{
    "version": "https://jsonfeed.org/version/1",
    "title": "北海虽赊，扶摇可接",
    "subtitle": "「 勇敢者是到处有路可走的 」",
    "icon": "https://metal-heart.github.io/images/favicon.ico",
    "description": "老实是人生绝妙的法宝。虽然对人老实，你可能付出一定的代价，但日后你得到的，远比付出的多得多。",
    "home_page_url": "https://Metal-Heart.github.io",
    "items": [
        {
            "id": "https://metal-heart.github.io/posts/fe37bc01/",
            "url": "https://metal-heart.github.io/posts/fe37bc01/",
            "title": "博客同步",
            "date_published": "2023-04-06T01:56:48.000Z",
            "content_html": "<h1 id=\"博客同步\"><a class=\"anchor\" href=\"#博客同步\">#</a> 博客同步</h1>\n<p>我的博客即将同步至腾讯云开发者社区，<br />\n邀请大家一同入驻：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvc3VwcG9ydC1wbGFuP2ludml0ZV9jb2RlPTJxbmN5eHZsaW8wMGc=\">https://cloud.tencent.com/developer/support-plan?invite_code=2qncyxvlio00g</span></p>\n",
            "tags": [
                "微信",
                "腾讯云",
                "腾讯云"
            ]
        },
        {
            "id": "https://metal-heart.github.io/posts/fe37bc01/",
            "url": "https://metal-heart.github.io/posts/fe37bc01/",
            "title": "博客同步",
            "date_published": "2023-04-06T01:56:48.000Z",
            "content_html": "<h1 id=\"博客同步\"><a class=\"anchor\" href=\"#博客同步\">#</a> 博客同步</h1>\n<p>我的博客即将同步至腾讯云开发者社区，<br />\n邀请大家一同入驻：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvc3VwcG9ydC1wbGFuP2ludml0ZV9jb2RlPTJxbmN5eHZsaW8wMGc=\">https://cloud.tencent.com/developer/support-plan?invite_code=2qncyxvlio00g</span></p>\n",
            "tags": [
                "微信",
                "腾讯云",
                "腾讯云"
            ]
        },
        {
            "id": "https://metal-heart.github.io/posts/816f699b/",
            "url": "https://metal-heart.github.io/posts/816f699b/",
            "title": "EMC知识总结",
            "date_published": "2023-01-12T03:08:00.000Z",
            "content_html": "<p><img data-src=\"https://pic1.zhimg.com/80/v2-2b79b6ec485d9ed67351fcc00e5bf5a0_720w.webp\" alt=\"\" /><br />\n<img data-src=\"https://pic3.zhimg.com/80/v2-651b044546319ca6725e50423af4f92a_720w.webp\" alt=\"\" /><br />\n<img data-src=\"https://pic3.zhimg.com/80/v2-b17d79d71b2666f0bb36a45ca6e4607a_720w.webp\" alt=\"\" /></p>\n<h1 id=\"附录\"><a class=\"anchor\" href=\"#附录\">#</a> 附录：</h1>\n<p>附录：家电产品 EMC 标准 / 测试方法汇总<br />\n EN/IEC 55014-1：Electromagnetic compatibility - Requirements for household appliances, electric tools and similar apparatus - Part 1: Emission 家用电器、电动工具及类似器具的电磁兼容发射骚扰要求</p>\n<p>EN/IEC 55014-2：Electromagnetic compatibility - Requirements for household appliances, electric tools and similar apparatus Part 2: Immunity 家用电器、电动工具及类似器具的电磁兼容抗扰度要求</p>\n<p>EN/IEC 61000-3-2：Electromagnetic compatibility (EMC) Part 3-2: Limits - Limits for harmonic current emissions (equipment input current ≤ 16 A per phase) 低压电气及电子设备发出的谐波电流限值（单项输入电流不大于 16A）</p>\n<p>EN/IEC 61000-3-3：Electromagnetic compatibility (EMC) – Part 3-3: Limits – Limitation of voltage changes, voltage fluctuations and flicker in public low-voltage supply systems, for equipment with rated current ≤ 16 A per phase and not subject to conditional connection 输入电流不大于 16A 的低压供电系统电压波动和闪烁测试</p>\n<p>EN/IEC 61000-4-2：Electromagnetic compatibility (EMC) Part 4-2: Testing and measurement techniques - Electrostatic discharge immunity test ESD 静电放电抗扰</p>\n<p>EN/IEC 61000-4-3：Electromagnetic compatibility (EMC) Part 4-3: Testing and measurement techniques — Radiated, radio-frequency, electromagnetic field immunity test 辐射，射频，电磁场抗扰度</p>\n<p>EN/IEC 61000-4-4：Electromagnetic compatibility (EMC) Part 4-4: Testing and measurement techniques - Electrical fast transient/burst immunity test ETF 电瞬变脉冲群抗扰度</p>\n<p>EN/IEC 61000-4-5：Electromagnetic compatibility (EMC) - Part 4-5: Testing and measurement techniques - Surge immunity test 浪涌抗扰度</p>\n<p>EN/IEC 61000-4-6：Electromagnetic compatibility (EMC) - Part 4-6: Testing and measurement techniques - Immunity to conducted disturbances, induced by radio-frequency fields 射频场引起的传导干扰的抗扰度</p>\n<p>EN/IEC 61000-4-11：Electromagnetic compatibility (EMC) Part 4-11: Testing and measurement techniques - Voltage dips, short interruptions and voltage variations immunity tests for equipment with input current up to 16 A per phase 电压暂降，短时中断和电压变化抗扰度</p>\n<p>CISPR 14-1：Electromagnetic compatibility - Requirements for household appliances, electric tools and similar apparatus - Part 1: Emission 家用电器、电动工具及类似器具的电磁兼容发射骚扰要求</p>\n<p>CISPR 14-2：Electromagnetic compatibility - Requirements for household appliances, electric tools and similar apparatus Part 2: Immunity 家用电器、电动工具及类似器具的电磁兼容抗扰度要求</p>\n<p>CFR title 47 part 15：Radio Frequency Devices 无线电频率设备</p>\n<p>ICES-003：Information Technology Equipment (including Digital Apparatus) 信息技术设备（包括数字仪器）</p>\n<p>AS/NZS CISPR 14.1：Electromagnetic compatibility - Requirements for household appliances, electric tools and similar apparatus - Part 1: Emission 家用电器、电动工具及类似器具的电磁兼容发射骚扰要求</p>\n<p>GB 4343.1：Electromagnetic compatibility - Requirements for household appliances, electric tools and similar apparatus - Part 1: Emission 家用电器、电动工具及类似器具的电磁兼容发射骚扰要求</p>\n<p>GB 4343.2：Electromagnetic compatibility - Requirements for household appliances, electric tools and similar apparatus Part 2: Immunity 家用电器、电动工具及类似器具的电磁兼容抗扰度要求</p>\n<p>KN 14-1：Electromagnetic compatibility - Requirements for household appliances, electric tools and similar apparatus - Part 1: Emission 家用电器、电动工具及类似器具的电磁兼容发射骚扰要求</p>\n<p>KN 14-2：Electromagnetic compatibility - Requirements for household appliances, electric tools and similar apparatus Part 2: Immunity 家用电器、电动工具及类似器具的电磁兼容抗扰度要求</p>\n<p>J55014-1 (H27)：Electromagnetic compatibility - Requirements for household appliances, electric tools and similar apparatus - Part 1: Emission 家用电器、电动工具及类似器具的电磁兼容发射骚扰要求</p>\n",
            "tags": [
                "硬件设计",
                "EMC",
                "硬件设计",
                "EMC"
            ]
        },
        {
            "id": "https://metal-heart.github.io/posts/41049874/",
            "url": "https://metal-heart.github.io/posts/41049874/",
            "title": "一篇文章让你彻底掌握 Shell",
            "date_published": "2022-11-17T10:16:00.000Z",
            "content_html": "<h1 id=\"一篇文章让你彻底掌握-shell\"><a class=\"anchor\" href=\"#一篇文章让你彻底掌握-shell\">#</a> 一篇文章让你彻底掌握 Shell</h1>\n<blockquote>\n<p>由于 bash 是 Linux 标准默认的 shell 解释器，可以说 bash 是 shell 编程的基础。</p>\n<p><em>本文主要介绍 bash 的语法，对于 linux 指令不做任何介绍</em>。</p>\n</blockquote>\n<pre><code>███████╗██╗  ██╗███████╗██╗     ██╗\n██╔════╝██║  ██║██╔════╝██║     ██║\n███████╗███████║█████╗  ██║     ██║\n╚════██║██╔══██║██╔══╝  ██║     ██║\n███████║██║  ██║███████╗███████╗███████╗\n</code></pre>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<h3 id=\"什么是-shell\"><a class=\"anchor\" href=\"#什么是-shell\">#</a> 什么是 shell</h3>\n<ul>\n<li>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。</li>\n<li>Shell 既是一种命令语言，又是一种程序设计语言。</li>\n<li>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问 Linux 内核的服务。</li>\n</ul>\n<p>Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。</p>\n<h3 id=\"什么是-shell-脚本\"><a class=\"anchor\" href=\"#什么是-shell-脚本\">#</a> 什么是 shell 脚本</h3>\n<p>Shell 脚本（shell script），是一种为 shell 编写的脚本程序，一般文件后缀为  <code>.sh</code> 。</p>\n<p>业界所说的 shell 通常都是指 shell 脚本，但 shell 和 shell script 是两个不同的概念。</p>\n<h3 id=\"shell-环境\"><a class=\"anchor\" href=\"#shell-环境\">#</a> Shell 环境</h3>\n<p>Shell 编程跟 java、php 编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。</p>\n<p>Shell 的解释器种类众多，常见的有：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ251Lm9yZy9zb2Z0d2FyZS9iYXNoLw==\">sh</span> - 即 Bourne Shell。sh 是 Unix 标准默认的 shell。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ251Lm9yZy9zb2Z0d2FyZS9iYXNoLw==\">bash</span> - 即 Bourne Again Shell。bash 是 Linux 标准默认的 shell。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9maXNoc2hlbGwuY29tLw==\">fish</span> - 智能和用户友好的命令行 shell。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3hpa2kub3JnLw==\">xiki</span> - 使 shell 控制台更友好，更强大。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy56c2gub3JnLw==\">zsh</span> - 功能强大的 shell 与脚本语言。</li>\n</ul>\n<h4 id=\"指定脚本解释器\"><a class=\"anchor\" href=\"#指定脚本解释器\">#</a> 指定脚本解释器</h4>\n<p>在 shell 脚本， <code>#!</code>  告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 解释器。 <code>#!</code>  被称作<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvU2hlYmFuZw==\"> shebang（也称为 Hashbang ）</span>。</p>\n<p>所以，你应该会在 shell 中，见到诸如以下的注释：</p>\n<ul>\n<li>指定 sh 解释器</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/sh</span></pre></td></tr></table></figure><ul>\n<li>指定 bash 解释器</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr></table></figure><blockquote>\n<p><strong>注意</strong></p>\n<p>上面的指定解释器的方式是比较常见的，但有时候，你可能也会看到下面的方式：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/usr/bin/env bash</span></pre></td></tr></table></figure><p>这样做的好处是，系统会自动在  <code>PATH</code>  环境变量中查找你指定的程序（本例中的 <code>bash</code> ）。相比第一种写法，你应该尽量用这种写法，因为程序的路径是不确定的。这样写还有一个好处，操作系统的 <code>PATH</code>  变量有可能被配置为指向程序的另一个版本。比如，安装完新版本的 <code>bash</code> ，我们可能将其路径添加到 <code>PATH</code>  中，来 “隐藏” 老版本。如果直接用 <code>#!/bin/bash</code> ，那么系统会选择老版本的 <code>bash</code>  来执行脚本，如果用 <code>#!/usr/bin/env bash</code> ，则会使用新版本。</p>\n</blockquote>\n<h3 id=\"模式\"><a class=\"anchor\" href=\"#模式\">#</a> 模式</h3>\n<p>shell 有交互和非交互两种模式。</p>\n<h4 id=\"交互模式\"><a class=\"anchor\" href=\"#交互模式\">#</a> 交互模式</h4>\n<blockquote>\n<p>简单来说，你可以将 shell 的交互模式理解为执行命令行。</p>\n</blockquote>\n<p>看到形如下面的东西，说明 shell 处于交互模式下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>user@host:~$</pre></td></tr></table></figure><p>接着，便可以输入一系列 Linux 命令，比如  <code>ls</code> ， <code>grep</code> ， <code>cd</code> ， <code>mkdir</code> ， <code>rm</code>  等等。</p>\n<h4 id=\"非交互模式\"><a class=\"anchor\" href=\"#非交互模式\">#</a> 非交互模式</h4>\n<blockquote>\n<p>简单来说，你可以将 shell 的非交互模式理解为执行 shell 脚本。</p>\n</blockquote>\n<p>在非交互模式下，shell 从文件或者管道中读取命令并执行。</p>\n<p>当 shell 解释器执行完文件中的最后一个命令，shell 进程终止，并回到父进程。</p>\n<p>可以使用下面的命令让 shell 以非交互模式运行：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sh</span> /path/to/script.sh</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">bash</span> /path/to/script.sh</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">source</span> /path/to/script.sh</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>./path/to/script.sh</pre></td></tr></table></figure><p>上面的例子中， <code>script.sh</code>  是一个包含 shell 解释器可以识别并执行的命令的普通文本文件， <code>sh</code>  和 <code>bash</code>  是 shell 解释器程序。你可以使用任何喜欢的编辑器创建 <code>script.sh</code> （vim，nano，Sublime Text, Atom 等等）。</p>\n<p>其中， <code>source /path/to/script.sh</code>  和  <code>./path/to/script.sh</code>  是等价的。</p>\n<p>除此之外，你还可以通过 <code>chmod</code>  命令给文件添加可执行的权限，来直接执行脚本文件：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chmod</span> +x /path/to/script.sh <span class=\"token comment\">#使脚本具有执行权限</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/path/to/test.sh</pre></td></tr></table></figure><p>这种方式要求脚本文件的第一行必须指明运行该脚本的程序，比如：</p>\n<p><strong>💻 『示例源码』</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/usr/bin/env bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello, world!\"</span></pre></td></tr></table></figure><p>上面的例子中，我们使用了一个很有用的命令 <code>echo</code>  来输出字符串到屏幕上。</p>\n<h2 id=\"基本语法\"><a class=\"anchor\" href=\"#基本语法\">#</a> 基本语法</h2>\n<h3 id=\"解释器\"><a class=\"anchor\" href=\"#解释器\">#</a> 解释器</h3>\n<p>前面虽然两次提到了 <code>#!</code>  ，但是本着重要的事情说三遍的精神，这里再强调一遍：</p>\n<p>在 shell 脚本， <code>#!</code>  告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 解释器。 <code>#!</code>  被称作<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvU2hlYmFuZw==\"> shebang（也称为 Hashbang ）</span>。</p>\n<p><code>#!</code>  决定了脚本可以像一个独立的可执行文件一样执行，而不用在终端之前输入 <code>sh</code> ,  <code>bash</code> ,  <code>python</code> ,  <code>php</code>  等。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 以下两种方式都可以指定 shell 解释器为 bash，第二种方式更好</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#!/usr/bin/env bash</span></pre></td></tr></table></figure><h3 id=\"注释\"><a class=\"anchor\" href=\"#注释\">#</a> 注释</h3>\n<p>注释可以说明你的代码是什么作用，以及为什么这样写。</p>\n<p>shell 语法中，注释是特殊的语句，会被 shell 解释器忽略。</p>\n<ul>\n<li>单行注释 - 以  <code>#</code>  开头，到行尾结束。</li>\n<li>多行注释 - 以  <code>:&lt;&lt;EOF</code>  开头，到  <code>EOF</code>  结束。</li>\n</ul>\n<p><strong>💻 『示例源码』</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#--------------------------------------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># shell 注释示例</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># author：zp</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#--------------------------------------------</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># echo ' 这是单行注释'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">########## 这是分割线 ##########</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>:<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>echo '这是多行注释'</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>echo '这是多行注释'</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>echo '这是多行注释'</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>EOF</span></pre></td></tr></table></figure><h3 id=\"echo\"><a class=\"anchor\" href=\"#echo\">#</a> echo</h3>\n<p>echo 用于字符串的输出。</p>\n<p>输出普通字符串：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"hello, world\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># Output: hello, world</span></pre></td></tr></table></figure><p>输出含变量的字符串：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"hello, <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>zp<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># Output: hello, \"zp\"</span></pre></td></tr></table></figure><p>输出含变量的字符串：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>zp</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"hello, <span class=\"token entity\" title=\"\\&quot;\">\\\"</span><span class=\"token variable\">$&#123;name&#125;</span><span class=\"token entity\" title=\"\\&quot;\">\\\"</span>\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># Output: hello, \"zp\"</span></pre></td></tr></table></figure><p>输出含换行符的字符串：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 输出含换行符的字符串</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"YES<span class=\"token entity\" title=\"\\n\">\\n</span>NO\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#  Output: YES\\nNO</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"YES<span class=\"token entity\" title=\"\\n\">\\n</span>NO\"</span> <span class=\"token comment\"># -e 开启转义</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#  Output:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#  YES</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#  NO</span></pre></td></tr></table></figure><p>输出含不换行符的字符串：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"YES\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"NO\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#  Output:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#  YES</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#  NO</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"YES<span class=\"token entity\" title=\"\\c\">\\c</span>\"</span> <span class=\"token comment\"># -e 开启转义 \\c 不换行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"NO\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#  Output:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#  YESNO</span></pre></td></tr></table></figure><p>输出重定向至文件</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"test\"</span> <span class=\"token operator\">></span> test.txt</pre></td></tr></table></figure><p>输出执行结果</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token builtin class-name\">pwd</span><span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#  Output:(当前目录路径)</span></pre></td></tr></table></figure><p><strong>💻 『示例源码』</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/usr/bin/env bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 输出普通字符串</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"hello, world\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#  Output: hello, world</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 输出含变量的字符串</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"hello, <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>zp<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#  Output: hello, \"zp\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 输出含变量的字符串</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>zp</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"hello, <span class=\"token entity\" title=\"\\&quot;\">\\\"</span><span class=\"token variable\">$&#123;name&#125;</span><span class=\"token entity\" title=\"\\&quot;\">\\\"</span>\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#  Output: hello, \"zp\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 输出含换行符的字符串</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"YES<span class=\"token entity\" title=\"\\n\">\\n</span>NO\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#  Output: YES\\nNO</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"YES<span class=\"token entity\" title=\"\\n\">\\n</span>NO\"</span> <span class=\"token comment\"># -e 开启转义</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#  Output:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#  YES</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#  NO</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># 输出含不换行符的字符串</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"YES\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"NO\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">#  Output:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#  YES</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#  NO</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"YES<span class=\"token entity\" title=\"\\c\">\\c</span>\"</span> <span class=\"token comment\"># -e 开启转义 \\c 不换行</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"NO\"</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">#  Output:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">#  YESNO</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\"># 输出内容定向至文件</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"test\"</span> <span class=\"token operator\">></span> test.txt</pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\"># 输出执行结果</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token builtin class-name\">pwd</span><span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">#  Output:(当前目录路径)</span></pre></td></tr></table></figure><h3 id=\"printf\"><a class=\"anchor\" href=\"#printf\">#</a> printf</h3>\n<p>printf 用于格式化输出字符串。</p>\n<p>默认，printf 不会像 echo 一样自动添加换行符，如果需要换行可以手动添加  <code>\\n</code> 。</p>\n<p><strong>💻 『示例源码』</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 单引号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">'%d %s\\n'</span> <span class=\"token number\">1</span> <span class=\"token string\">\"abc\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#  Output:1 abc</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 双引号</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"%d %s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> <span class=\"token number\">1</span> <span class=\"token string\">\"abc\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#  Output:1 abc</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 无引号</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin class-name\">printf</span> %s abcdef</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#  Output: abcdef (并不会换行)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 格式只指定了一个参数，但多出的参数仍然会按照该格式输出</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"%s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> abc def</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#  Output:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#  abc</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#  def</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"%s %s %s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> a b c d e f g h i j</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#  Output:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#  a b c</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#  d e f</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#  g h i</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#  j</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># 如果没有参数，那么 % s 用 NULL 代替，% d 用 0 代替</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"%s and %d <span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#  Output:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#   and 0</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># 格式化输出</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"%-10s %-8s %-4s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> 姓名 性别 体重kg</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"%-10s %-8s %-4.2f<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> 郭靖 男 <span class=\"token number\">66.1234</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"%-10s %-8s %-4.2f<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> 杨过 男 <span class=\"token number\">48.6543</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"%-10s %-8s %-4.2f<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> 郭芙 女 <span class=\"token number\">47.9876</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">#  Output:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">#  姓名     性别   体重 kg</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">#  郭靖     男      66.12</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#  杨过     男      48.65</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">#  郭芙     女      47.99</span></pre></td></tr></table></figure><h4 id=\"printf-的转义符\"><a class=\"anchor\" href=\"#printf-的转义符\">#</a> printf 的转义符</h4>\n<table>\n<thead>\n<tr>\n<th>序列</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\a</code></td>\n<td>警告字符，通常为 ASCII 的 BEL 字符</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>后退</td>\n</tr>\n<tr>\n<td><code>\\c</code></td>\n<td>抑制（不显示）输出结果中任何结尾的换行字符（只在 % b 格式指示符控制下的参数字符串中有效），而且，任何留在参数里的字符、任何接下来的参数以及任何留在格式字符串中的字符，都被忽略</td>\n</tr>\n<tr>\n<td><code>\\f</code></td>\n<td>换页（formfeed）</td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>换行</td>\n</tr>\n<tr>\n<td><code>\\r</code></td>\n<td>回车（Carriage return）</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>水平制表符</td>\n</tr>\n<tr>\n<td><code>\\v</code></td>\n<td>垂直制表符</td>\n</tr>\n<tr>\n<td><code>\\\\</code></td>\n<td>一个字面上的反斜杠字符</td>\n</tr>\n<tr>\n<td><code>\\ddd</code></td>\n<td>表示 1 到 3 位数八进制值的字符。仅在格式字符串中有效</td>\n</tr>\n<tr>\n<td><code>\\0ddd</code></td>\n<td>表示 1 到 3 位的八进制值字符</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> 变量</h2>\n<p>跟许多程序设计语言一样，你可以在 bash 中创建变量。</p>\n<p>Bash 中没有数据类型，bash 中的变量可以保存一个数字、一个字符、一个字符串等等。同时无需提前声明变量，给变量赋值会直接创建变量。</p>\n<h3 id=\"变量命名原则\"><a class=\"anchor\" href=\"#变量命名原则\">#</a> 变量命名原则</h3>\n<ul>\n<li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li>\n<li>中间不能有空格，可以使用下划线（_）。</li>\n<li>不能使用标点符号。</li>\n<li>不能使用 bash 里的关键字（可用 help 命令查看保留关键字）。</li>\n</ul>\n<h3 id=\"声明变量\"><a class=\"anchor\" href=\"#声明变量\">#</a> 声明变量</h3>\n<p>访问变量的语法形式为： <code>$&#123;var&#125;</code>  和  <code>$var</code>  。</p>\n<p>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，所以推荐加花括号。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">word</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;word&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># Output: hello</span></pre></td></tr></table></figure><h3 id=\"只读变量\"><a class=\"anchor\" href=\"#只读变量\">#</a> 只读变量</h3>\n<p>使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">rword</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;rword&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">readonly</span> rword</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># rword=\"bye\"  # 如果放开注释，执行时会报错</span></pre></td></tr></table></figure><h3 id=\"删除变量\"><a class=\"anchor\" href=\"#删除变量\">#</a> 删除变量</h3>\n<p>使用 unset 命令可以删除变量。变量被删除后不能再次使用。unset 命令不能删除只读变量。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">dword</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span>  <span class=\"token comment\"># 声明变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;dword&#125;</span>  <span class=\"token comment\"># 输出变量值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># Output: hello</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">unset</span> dword    <span class=\"token comment\"># 删除变量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;dword&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># Output: （空）</span></pre></td></tr></table></figure><h3 id=\"变量类型\"><a class=\"anchor\" href=\"#变量类型\">#</a> 变量类型</h3>\n<ul>\n<li><strong>局部变量</strong> - 局部变量是仅在某个脚本内部有效的变量。它们不能被其他的程序和脚本访问。</li>\n<li><strong>环境变量</strong> - 环境变量是对当前 shell 会话内所有的程序或脚本都可见的变量。创建它们跟创建局部变量类似，但使用的是  <code>export</code>  关键字，shell 脚本也可以定义环境变量。</li>\n</ul>\n<p>常见的环境变量：</p>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>$HOME</code></td>\n<td>当前用户的用户目录</td>\n</tr>\n<tr>\n<td><code>$PATH</code></td>\n<td>用分号分隔的目录列表，shell 会到这些目录中查找命令</td>\n</tr>\n<tr>\n<td><code>$PWD</code></td>\n<td>当前工作目录</td>\n</tr>\n<tr>\n<td><code>$RANDOM</code></td>\n<td>0 到 32767 之间的整数</td>\n</tr>\n<tr>\n<td><code>$UID</code></td>\n<td>数值类型，当前用户的用户 ID</td>\n</tr>\n<tr>\n<td><code>$PS1</code></td>\n<td>主要系统输入提示符</td>\n</tr>\n<tr>\n<td><code>$PS2</code></td>\n<td>次要系统输入提示符</td>\n</tr>\n</tbody>\n</table>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3RsZHAub3JnL0xEUC9CYXNoLUJlZ2lubmVycy1HdWlkZS9odG1sL3NlY3RfMDNfMDIuaHRtbCMjI3NlY3RfMDNfMDJfMDQ=\">这里</span> 有一张更全面的 Bash 环境变量列表。</p>\n<p><strong>💻 『示例源码』</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/usr/bin/env bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">################### 声明变量 ###################</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"world\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"hello <span class=\"token variable\">$&#123;name&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># Output: hello world</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">################### 输出变量 ###################</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token assign-left variable\">folder</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">pwd</span><span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"current path: <span class=\"token variable\">$&#123;folder&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">################### 只读变量 ###################</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token assign-left variable\">rword</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;rword&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># Output: hello</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token builtin class-name\">readonly</span> rword</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># rword=\"bye\"  # 如果放开注释，执行时会报错</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">################### 删除变量 ###################</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token assign-left variable\">dword</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span> <span class=\"token comment\"># 声明变量</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;dword&#125;</span> <span class=\"token comment\"># 输出变量值</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># Output: hello</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token builtin class-name\">unset</span> dword <span class=\"token comment\"># 删除变量</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;dword&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># Output: （空）</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">################### 系统变量 ###################</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"UID:<span class=\"token environment constant\">$UID</span>\"</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">LOGNAME</span><span class=\"token builtin class-name\">:</span><span class=\"token environment constant\">$LOGNAME</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token builtin class-name\">echo</span> User:<span class=\"token environment constant\">$USER</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">HOME</span><span class=\"token builtin class-name\">:</span><span class=\"token environment constant\">$HOME</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token environment constant\">$PATH</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">HOSTNAME</span><span class=\"token builtin class-name\">:</span><span class=\"token environment constant\">$HOSTNAME</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">SHELL</span><span class=\"token builtin class-name\">:</span><span class=\"token environment constant\">$SHELL</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">LANG</span><span class=\"token builtin class-name\">:</span><span class=\"token environment constant\">$LANG</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">################### 自定义变量 ###################</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token assign-left variable\">days</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token assign-left variable\">user</span><span class=\"token operator\">=</span><span class=\"token string\">\"admin\"</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$user</span> logged in <span class=\"token variable\">$days</span> days age\"</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token assign-left variable\">days</span><span class=\"token operator\">=</span><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token assign-left variable\">user</span><span class=\"token operator\">=</span><span class=\"token string\">\"root\"</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$user</span> logged in <span class=\"token variable\">$days</span> days age\"</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\"># Output:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\"># admin logged in 10 days age</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\"># root logged in 5 days age</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">################### 从变量读取列表 ###################</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token assign-left variable\">colors</span><span class=\"token operator\">=</span><span class=\"token string\">\"Red Yellow Blue\"</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token assign-left variable\">colors</span><span class=\"token operator\">=</span><span class=\"token variable\">$colors</span><span class=\"token string\">\" White Black\"</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">color</span> <span class=\"token keyword\">in</span> <span class=\"token variable\">$colors</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\" <span class=\"token variable\">$color</span>\"</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><h2 id=\"字符串\"><a class=\"anchor\" href=\"#字符串\">#</a> 字符串</h2>\n<h3 id=\"单引号和双引号\"><a class=\"anchor\" href=\"#单引号和双引号\">#</a> 单引号和双引号</h3>\n<p>shell 字符串可以用单引号  <code>''</code> ，也可以用双引号  <code>“”</code> ，也可以不用引号。</p>\n<ul>\n<li>单引号的特点\n<ul>\n<li>单引号里不识别变量</li>\n<li>单引号里不能出现单独的单引号（使用转义符也不行），但可成对出现，作为字符串拼接使用。</li>\n</ul>\n</li>\n<li>双引号的特点\n<ul>\n<li>双引号里识别变量</li>\n<li>双引号里可以出现转义字符</li>\n</ul>\n</li>\n</ul>\n<p>综上，推荐使用双引号。</p>\n<h3 id=\"拼接字符串\"><a class=\"anchor\" href=\"#拼接字符串\">#</a> 拼接字符串</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 使用单引号拼接</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">name1</span><span class=\"token operator\">=</span><span class=\"token string\">'white'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">str1</span><span class=\"token operator\">=</span><span class=\"token string\">'hello, '</span><span class=\"token variable\">$&#123;name1&#125;</span><span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">str2</span><span class=\"token operator\">=</span><span class=\"token string\">'hello, $&#123;name1&#125;'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;str1&#125;</span>_<span class=\"token variable\">$&#123;str2&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># Output:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># hello, white_hello, $&#123;name1&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 使用双引号拼接</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token assign-left variable\">name2</span><span class=\"token operator\">=</span><span class=\"token string\">\"black\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token assign-left variable\">str3</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello, \"</span><span class=\"token variable\">$&#123;name2&#125;</span><span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token assign-left variable\">str4</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello, <span class=\"token variable\">$&#123;name2&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;str3&#125;</span>_<span class=\"token variable\">$&#123;str4&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># Output:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># hello, black_hello, black</span></pre></td></tr></table></figure><h3 id=\"获取字符串长度\"><a class=\"anchor\" href=\"#获取字符串长度\">#</a> 获取字符串长度</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">text</span><span class=\"token operator\">=</span><span class=\"token string\">\"12345\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>text&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># Output:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 5</span></pre></td></tr></table></figure><h3 id=\"截取子字符串\"><a class=\"anchor\" href=\"#截取子字符串\">#</a> 截取子字符串</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">text</span><span class=\"token operator\">=</span><span class=\"token string\">\"12345\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;text<span class=\"token operator\">:</span>2<span class=\"token operator\">:</span>2&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># Output:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 34</span></pre></td></tr></table></figure><p>从第 3 个字符开始，截取 2 个字符</p>\n<h3 id=\"查找子字符串\"><a class=\"anchor\" href=\"#查找子字符串\">#</a> 查找子字符串</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/usr/bin/env bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">text</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> index <span class=\"token string\">\"<span class=\"token variable\">$&#123;text&#125;</span>\"</span> ll<span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># Execute: ./str-demo5.sh</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># Output:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 3</span></pre></td></tr></table></figure><p>查找  <code>ll</code>  子字符在  <code>hello</code>  字符串中的起始位置。</p>\n<p><strong>💻 『示例源码』</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/usr/bin/env bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">################### 使用单引号拼接字符串 ###################</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">name1</span><span class=\"token operator\">=</span><span class=\"token string\">'white'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">str1</span><span class=\"token operator\">=</span><span class=\"token string\">'hello, '</span><span class=\"token variable\">$&#123;name1&#125;</span><span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">str2</span><span class=\"token operator\">=</span><span class=\"token string\">'hello, $&#123;name1&#125;'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;str1&#125;</span>_<span class=\"token variable\">$&#123;str2&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># Output:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># hello, white_hello, $&#123;name1&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">################### 使用双引号拼接字符串 ###################</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token assign-left variable\">name2</span><span class=\"token operator\">=</span><span class=\"token string\">\"black\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token assign-left variable\">str3</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello, \"</span><span class=\"token variable\">$&#123;name2&#125;</span><span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token assign-left variable\">str4</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello, <span class=\"token variable\">$&#123;name2&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;str3&#125;</span>_<span class=\"token variable\">$&#123;str4&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># Output:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># hello, black_hello, black</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">################### 获取字符串长度 ###################</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token assign-left variable\">text</span><span class=\"token operator\">=</span><span class=\"token string\">\"12345\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;text&#125;</span> length is: <span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>text&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># Output:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># 12345 length is: 5</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># 获取子字符串</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token assign-left variable\">text</span><span class=\"token operator\">=</span><span class=\"token string\">\"12345\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;text<span class=\"token operator\">:</span>2<span class=\"token operator\">:</span>2&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\"># Output:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># 34</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">################### 查找子字符串 ###################</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token assign-left variable\">text</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> index <span class=\"token string\">\"<span class=\"token variable\">$&#123;text&#125;</span>\"</span> ll<span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\"># Output:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\"># 3</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">################### 判断字符串中是否包含子字符串 ###################</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token assign-left variable\">result</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;str&#125;</span>\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"feature/\"</span><span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$result</span>\"</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"feature/ 是 <span class=\"token variable\">$&#123;str&#125;</span> 的子字符串\"</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"feature/ 不是 <span class=\"token variable\">$&#123;str&#125;</span> 的子字符串\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">################### 截取关键字左边内容 ###################</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token assign-left variable\">full_branch</span><span class=\"token operator\">=</span><span class=\"token string\">\"feature/1.0.0\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token assign-left variable\">branch</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token builtin class-name\">echo</span> $<span class=\"token punctuation\">&#123;</span>full_branch<span class=\"token comment\">#feature/&#125;</span><span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"branch is <span class=\"token variable\">$&#123;branch&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">################### 截取关键字右边内容 ###################</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token assign-left variable\">full_version</span><span class=\"token operator\">=</span><span class=\"token string\">\"0.0.1-SNAPSHOT\"</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token assign-left variable\">version</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token builtin class-name\">echo</span> $<span class=\"token punctuation\">&#123;</span>full_version%-SNAPSHOT<span class=\"token punctuation\">&#125;</span><span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"version is <span class=\"token variable\">$&#123;version&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">################### 字符串分割成数组 ###################</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"0.0.0.1\"</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token assign-left variable\">OLD_IFS</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token environment constant\">$IFS</span>\"</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">IFS</span></span><span class=\"token operator\">=</span><span class=\"token string\">\".\"</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token assign-left variable\">array</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$&#123;str&#125;</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">IFS</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$OLD_IFS</span>\"</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token assign-left variable\">size</span><span class=\"token operator\">=</span><span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>array<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token assign-left variable\">lastIndex</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span>size<span class=\"token punctuation\">&#125;</span> - <span class=\"token number\">1</span><span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"数组长度：<span class=\"token variable\">$&#123;size&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"最后一个数组元素：<span class=\"token variable\">$&#123;array<span class=\"token punctuation\">[</span>$&#123;lastIndex&#125;</span>]&#125;\"</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">item</span> <span class=\"token keyword\">in</span> <span class=\"token variable\">$&#123;array<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$item</span>\"</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\">################### 判断字符串是否为空 ###################</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token comment\">#-n 判断长度是否非零</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token comment\">#-z 判断长度是否为零</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span>testing</pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token assign-left variable\">str2</span><span class=\"token operator\">=</span><span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"<span class=\"token variable\">$str</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"The string <span class=\"token variable\">$str</span> is not empty\"</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"The string <span class=\"token variable\">$str</span> is empty\"</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"<span class=\"token variable\">$str2</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"The string <span class=\"token variable\">$str2</span> is not empty\"</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"The string <span class=\"token variable\">$str2</span> is empty\"</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token comment\">#\tOutput:</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token comment\">#\tThe string testing is not empty</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token comment\">#\tThe string  is empty</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token comment\">################### 字符串比较 ###################</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span>hello</pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token assign-left variable\">str2</span><span class=\"token operator\">=</span>world</pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"str equals hello\"</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"str not equals hello\"</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$str2</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"str2 equals hello\"</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"str2 not equals hello\"</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr></table></figure><h2 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h2>\n<p>bash 只支持一维数组。</p>\n<p>数组下标从 0 开始，下标可以是整数或算术表达式，其值应大于或等于 0。</p>\n<h3 id=\"创建数组\"><a class=\"anchor\" href=\"#创建数组\">#</a> 创建数组</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 创建数组的不同方式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">nums</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">colors</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>red yellow <span class=\"token string\">\"dark blue\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"访问数组元素\"><a class=\"anchor\" href=\"#访问数组元素\">#</a> 访问数组元素</h3>\n<ul>\n<li><strong>访问数组的单个元素：</strong></li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;nums<span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># Output: 1</span></pre></td></tr></table></figure><ul>\n<li><strong>访问数组的所有元素：</strong></li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># Output: red yellow dark blue</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># Output: red yellow dark blue</span></pre></td></tr></table></figure><p>上面两行有很重要（也很微妙）的区别：</p>\n<p>为了将数组中每个元素单独一行输出，我们用  <code>printf</code>  命令：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"+ %s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> <span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># Output:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># + red</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># + yellow</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># + dark</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># + blue</span></pre></td></tr></table></figure><p>为什么 <code>dark</code>  和 <code>blue</code>  各占了一行？尝试用引号包起来：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"+ %s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># Output:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># + red yellow dark blue</span></pre></td></tr></table></figure><p>现在所有的元素都在一行输出 —— 这不是我们想要的！让我们试试 <code>$&#123;colors[@]&#125;</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"+ %s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># Output:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># + red</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># + yellow</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># + dark blue</span></pre></td></tr></table></figure><p>在引号内， <code>$&#123;colors[@]&#125;</code>  将数组中的每个元素扩展为一个单独的参数；数组元素中的空格得以保留。</p>\n<ul>\n<li><strong>访问数组的部分元素：</strong></li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;nums<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>0<span class=\"token operator\">:</span>2&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># Output:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 0 1</span></pre></td></tr></table></figure><p>在上面的例子中， <code>$&#123;array[@]&#125;</code>  扩展为整个数组， <code>:0:2</code>  取出了数组中从 0 开始，长度为 2 的元素。</p>\n<h3 id=\"访问数组长度\"><a class=\"anchor\" href=\"#访问数组长度\">#</a> 访问数组长度</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>nums<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># Output:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 3</span></pre></td></tr></table></figure><h3 id=\"向数组中添加元素\"><a class=\"anchor\" href=\"#向数组中添加元素\">#</a> 向数组中添加元素</h3>\n<p>向数组中添加元素也非常简单：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">colors</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>white <span class=\"token string\">\"<span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\"</span> green black<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># Output:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># white red yellow dark blue green black</span></pre></td></tr></table></figure><p>上面的例子中， <code>$&#123;colors[@]&#125;</code>  扩展为整个数组，并被置换到复合赋值语句中，接着，对数组 <code>colors</code>  的赋值覆盖了它原来的值。</p>\n<h3 id=\"从数组中删除元素\"><a class=\"anchor\" href=\"#从数组中删除元素\">#</a> 从数组中删除元素</h3>\n<p>用 <code>unset</code>  命令来从数组中删除一个元素：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">unset</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;nums<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># Output:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 1 2</span></pre></td></tr></table></figure><p><strong>💻 『示例源码』</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/usr/bin/env bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">################### 创建数组 ###################</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">nums</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">colors</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> red yellow <span class=\"token string\">\"dark blue\"</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">################### 访问数组的单个元素 ###################</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;nums<span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># Output: 1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">################### 访问数组的所有元素 ###################</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># Output: red yellow dark blue</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># Output: red yellow dark blue</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"+ %s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> <span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># Output:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># + red</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># + yellow</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># + dark</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># + blue</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"+ %s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># Output:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># + red yellow dark blue</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"+ %s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\"># Output:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># + red</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\"># + yellow</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\"># + dark blue</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">################### 访问数组的部分元素 ###################</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;nums<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>0<span class=\"token operator\">:</span>2&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\"># Output:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\"># 0 1</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">################### 获取数组长度 ###################</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>nums<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\"># Output:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\"># 3</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">################### 向数组中添加元素 ###################</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token assign-left variable\">colors</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> white <span class=\"token string\">\"<span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\"</span> green black <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\"># Output:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\"># white red yellow dark blue green black</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">################### 从数组中删除元素 ###################</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token builtin class-name\">unset</span> nums<span class=\"token punctuation\">[</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;nums<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\"># Output:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\"># 1 2</span></pre></td></tr></table></figure><h2 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h2>\n<h3 id=\"算术运算符\"><a class=\"anchor\" href=\"#算术运算符\">#</a> 算术运算符</h3>\n<p>下表列出了常用的算术运算符，假定变量 x 为 10，变量 y 为 20：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>加法</td>\n<td><code>expr $x + $y</code>  结果为 30。</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减法</td>\n<td><code>expr $x - $y</code>  结果为 -10。</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘法</td>\n<td><code>expr $x * $y</code>  结果为 200。</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除法</td>\n<td><code>expr $y / $x</code>  结果为 2。</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取余</td>\n<td><code>expr $y % $x</code>  结果为 0。</td>\n</tr>\n<tr>\n<td>=</td>\n<td>赋值</td>\n<td><code>x=$y</code>  将把变量 y 的值赋给 x。</td>\n</tr>\n<tr>\n<td>==</td>\n<td>相等。用于比较两个数字，相同则返回 true。</td>\n<td><code>[ $x == $y ]</code>  返回 false。</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不相等。用于比较两个数字，不相同则返回 true。</td>\n<td><code>[ $x != $y ]</code>  返回 true。</td>\n</tr>\n</tbody>\n</table>\n<p>** 注意：** 条件表达式要放在方括号之间，并且要有空格，例如:  <code>[$x==$y]</code>  是错误的，必须写成  <code>[ $x == $y ]</code> 。</p>\n<p><strong>💻 『示例源码』</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">y</span><span class=\"token operator\">=</span><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"x=<span class=\"token variable\">$&#123;x&#125;</span>, y=<span class=\"token variable\">$&#123;y&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">&#125;</span> + $<span class=\"token punctuation\">&#123;</span>y<span class=\"token punctuation\">&#125;</span><span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> + <span class=\"token variable\">$&#123;y&#125;</span> = <span class=\"token variable\">$val</span>\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">&#125;</span> - $<span class=\"token punctuation\">&#123;</span>y<span class=\"token punctuation\">&#125;</span><span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> - <span class=\"token variable\">$&#123;y&#125;</span> = <span class=\"token variable\">$val</span>\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span>* $<span class=\"token punctuation\">&#123;</span>y<span class=\"token punctuation\">&#125;</span><span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> * <span class=\"token variable\">$&#123;y&#125;</span> = <span class=\"token variable\">$val</span>\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span>y<span class=\"token punctuation\">&#125;</span> / $<span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">&#125;</span><span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;y&#125;</span> / <span class=\"token variable\">$&#123;x&#125;</span> = <span class=\"token variable\">$val</span>\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span>y<span class=\"token punctuation\">&#125;</span> % $<span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">&#125;</span><span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;y&#125;</span> % <span class=\"token variable\">$&#123;x&#125;</span> = <span class=\"token variable\">$val</span>\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$&#123;y&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> = <span class=\"token variable\">$&#123;y&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token operator\">!=</span> <span class=\"token variable\">$&#123;y&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> != <span class=\"token variable\">$&#123;y&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">#  Output:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">#  x=10, y=20</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">#  10 + 20 = 30</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">#  10 - 20 = -10</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">#  10 * 20 = 200</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">#  20 / 10 = 2</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">#  20 % 10 = 0</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">#  10 != 20</span></pre></td></tr></table></figure><h3 id=\"关系运算符\"><a class=\"anchor\" href=\"#关系运算符\">#</a> 关系运算符</h3>\n<p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p>\n<p>下表列出了常用的关系运算符，假定变量 x 为 10，变量 y 为 20：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-eq</code></td>\n<td>检测两个数是否相等，相等返回 true。</td>\n<td><code>[ $a -eq $b ]</code>  返回 false。</td>\n</tr>\n<tr>\n<td><code>-ne</code></td>\n<td>检测两个数是否相等，不相等返回 true。</td>\n<td><code>[ $a -ne $b ]</code>  返回 true。</td>\n</tr>\n<tr>\n<td><code>-gt</code></td>\n<td>检测左边的数是否大于右边的，如果是，则返回 true。</td>\n<td><code>[ $a -gt $b ]</code>  返回 false。</td>\n</tr>\n<tr>\n<td><code>-lt</code></td>\n<td>检测左边的数是否小于右边的，如果是，则返回 true。</td>\n<td><code>[ $a -lt $b ]</code>  返回 true。</td>\n</tr>\n<tr>\n<td><code>-ge</code></td>\n<td>检测左边的数是否大于等于右边的，如果是，则返回 true。</td>\n<td><code>[ $a -ge $b ]</code>  返回 false。</td>\n</tr>\n<tr>\n<td><code>-le</code></td>\n<td>检测左边的数是否小于等于右边的，如果是，则返回 true。</td>\n<td><code>[ $a -le $b ]</code>  返回 true。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>💻 『示例源码』</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">y</span><span class=\"token operator\">=</span><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"x=<span class=\"token variable\">$&#123;x&#125;</span>, y=<span class=\"token variable\">$&#123;y&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token variable\">$&#123;y&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> -eq <span class=\"token variable\">$&#123;y&#125;</span> : x 等于 y\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> -eq <span class=\"token variable\">$&#123;y&#125;</span>: x 不等于 y\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token parameter variable\">-ne</span> <span class=\"token variable\">$&#123;y&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> -ne <span class=\"token variable\">$&#123;y&#125;</span>: x 不等于 y\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> -ne <span class=\"token variable\">$&#123;y&#125;</span>: x 等于 y\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token parameter variable\">-gt</span> <span class=\"token variable\">$&#123;y&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> -gt <span class=\"token variable\">$&#123;y&#125;</span>: x 大于 y\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> -gt <span class=\"token variable\">$&#123;y&#125;</span>: x 不大于 y\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token parameter variable\">-lt</span> <span class=\"token variable\">$&#123;y&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> -lt <span class=\"token variable\">$&#123;y&#125;</span>: x 小于 y\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> -lt <span class=\"token variable\">$&#123;y&#125;</span>: x 不小于 y\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token parameter variable\">-ge</span> <span class=\"token variable\">$&#123;y&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> -ge <span class=\"token variable\">$&#123;y&#125;</span>: x 大于或等于 y\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> -ge <span class=\"token variable\">$&#123;y&#125;</span>: x 小于 y\"</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token parameter variable\">-le</span> <span class=\"token variable\">$&#123;y&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> -le <span class=\"token variable\">$&#123;y&#125;</span>: x 小于或等于 y\"</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> -le <span class=\"token variable\">$&#123;y&#125;</span>: x 大于 y\"</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">#  Output:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">#  x=10, y=20</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">#  10 -eq 20: x 不等于 y</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">#  10 -ne 20: x 不等于 y</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">#  10 -gt 20: x 不大于 y</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">#  10 -lt 20: x 小于 y</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">#  10 -ge 20: x 小于 y</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">#  10 -le 20: x 小于或等于 y</span></pre></td></tr></table></figure><h3 id=\"布尔运算符\"><a class=\"anchor\" href=\"#布尔运算符\">#</a> 布尔运算符</h3>\n<p>下表列出了常用的布尔运算符，假定变量 x 为 10，变量 y 为 20：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>!</code></td>\n<td>非运算，表达式为 true 则返回 false，否则返回 true。</td>\n<td><code>[ ! false ]</code>  返回 true。</td>\n</tr>\n<tr>\n<td><code>-o</code></td>\n<td>或运算，有一个表达式为 true 则返回 true。</td>\n<td><code>[ $a -lt 20 -o $b -gt 100 ]</code>  返回 true。</td>\n</tr>\n<tr>\n<td><code>-a</code></td>\n<td>与运算，两个表达式都为 true 才返回 true。</td>\n<td><code>[ $a -lt 20 -a $b -gt 100 ]</code>  返回 false。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>💻 『示例源码』</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">y</span><span class=\"token operator\">=</span><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"x=<span class=\"token variable\">$&#123;x&#125;</span>, y=<span class=\"token variable\">$&#123;y&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token operator\">!=</span> <span class=\"token variable\">$&#123;y&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> != <span class=\"token variable\">$&#123;y&#125;</span> : x 不等于 y\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> != <span class=\"token variable\">$&#123;y&#125;</span>: x 等于 y\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token parameter variable\">-lt</span> <span class=\"token number\">100</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$&#123;y&#125;</span> <span class=\"token parameter variable\">-gt</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> 小于 100 且 <span class=\"token variable\">$&#123;y&#125;</span> 大于 15 : 返回 true\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> 小于 100 且 <span class=\"token variable\">$&#123;y&#125;</span> 大于 15 : 返回 false\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token parameter variable\">-lt</span> <span class=\"token number\">100</span> <span class=\"token operator\">||</span> <span class=\"token variable\">$&#123;y&#125;</span> <span class=\"token parameter variable\">-gt</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> 小于 100 或 <span class=\"token variable\">$&#123;y&#125;</span> 大于 100 : 返回 true\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> 小于 100 或 <span class=\"token variable\">$&#123;y&#125;</span> 大于 100 : 返回 false\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token parameter variable\">-lt</span> <span class=\"token number\">5</span> <span class=\"token operator\">||</span> <span class=\"token variable\">$&#123;y&#125;</span> <span class=\"token parameter variable\">-gt</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> 小于 5 或 <span class=\"token variable\">$&#123;y&#125;</span> 大于 100 : 返回 true\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> 小于 5 或 <span class=\"token variable\">$&#123;y&#125;</span> 大于 100 : 返回 false\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">#  Output:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">#  x=10, y=20</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">#  10 != 20 : x 不等于 y</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">#  10 小于 100 且 20 大于 15 : 返回 true</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">#  10 小于 100 或 20 大于 100 : 返回 true</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">#  10 小于 5 或 20 大于 100 : 返回 false</span></pre></td></tr></table></figure><h3 id=\"逻辑运算符\"><a class=\"anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h3>\n<p>以下介绍 Shell 的逻辑运算符，假定变量 x 为 10，变量 y 为 20:</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&amp;&amp;</code></td>\n<td>逻辑的 AND</td>\n<td><code>[[ $&#123;x&#125; -lt 100 &amp;&amp; $&#123;y&#125; -gt 100 ]]</code>  返回 false</td>\n</tr>\n<tr>\n<td><code>| |</code></td>\n<td>逻辑的 OR</td>\n<td><code>[[ $&#123;x&#125; -lt 100 | | $&#123;y&#125; -gt 100 ]]</code>  返回 true</td>\n</tr>\n</tbody>\n</table>\n<p><strong>💻 『示例源码』</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">y</span><span class=\"token operator\">=</span><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"x=<span class=\"token variable\">$&#123;x&#125;</span>, y=<span class=\"token variable\">$&#123;y&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token parameter variable\">-lt</span> <span class=\"token number\">100</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$&#123;y&#125;</span> <span class=\"token parameter variable\">-gt</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> -lt 100 &amp;&amp; <span class=\"token variable\">$&#123;y&#125;</span> -gt 100 返回 true\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> -lt 100 &amp;&amp; <span class=\"token variable\">$&#123;y&#125;</span> -gt 100 返回 false\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token parameter variable\">-lt</span> <span class=\"token number\">100</span> <span class=\"token operator\">||</span> <span class=\"token variable\">$&#123;y&#125;</span> <span class=\"token parameter variable\">-gt</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> -lt 100 || <span class=\"token variable\">$&#123;y&#125;</span> -gt 100 返回 true\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> -lt 100 || <span class=\"token variable\">$&#123;y&#125;</span> -gt 100 返回 false\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#  Output:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#  x=10, y=20</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#  10 -lt 100 &amp;&amp; 20 -gt 100 返回 false</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#  10 -lt 100 || 20 -gt 100 返回 true</span></pre></td></tr></table></figure><h3 id=\"字符串运算符\"><a class=\"anchor\" href=\"#字符串运算符\">#</a> 字符串运算符</h3>\n<p>下表列出了常用的字符串运算符，假定变量 a 为 &quot;abc&quot;，变量 b 为 &quot;efg&quot;：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>=</code></td>\n<td>检测两个字符串是否相等，相等返回 true。</td>\n<td><code>[ $a = $b ]</code>  返回 false。</td>\n</tr>\n<tr>\n<td><code>!=</code></td>\n<td>检测两个字符串是否相等，不相等返回 true。</td>\n<td><code>[ $a != $b ]</code>  返回 true。</td>\n</tr>\n<tr>\n<td><code>-z</code></td>\n<td>检测字符串长度是否为 0，为 0 返回 true。</td>\n<td><code>[ -z $a ]</code>  返回 false。</td>\n</tr>\n<tr>\n<td><code>-n</code></td>\n<td>检测字符串长度是否为 0，不为 0 返回 true。</td>\n<td><code>[ -n $a ]</code>  返回 true。</td>\n</tr>\n<tr>\n<td><code>str</code></td>\n<td>检测字符串是否为空，不为空返回 true。</td>\n<td><code>[ $a ]</code>  返回 true。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>💻 『示例源码』</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token string\">\"abc\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">y</span><span class=\"token operator\">=</span><span class=\"token string\">\"xyz\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"x=<span class=\"token variable\">$&#123;x&#125;</span>, y=<span class=\"token variable\">$&#123;y&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$&#123;y&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> = <span class=\"token variable\">$&#123;y&#125;</span> : x 等于 y\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> = <span class=\"token variable\">$&#123;y&#125;</span>: x 不等于 y\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token operator\">!=</span> <span class=\"token variable\">$&#123;y&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> != <span class=\"token variable\">$&#123;y&#125;</span> : x 不等于 y\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> != <span class=\"token variable\">$&#123;y&#125;</span>: x 等于 y\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-z</span> <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"-z <span class=\"token variable\">$&#123;x&#125;</span> : 字符串长度为 0\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"-z <span class=\"token variable\">$&#123;x&#125;</span> : 字符串长度不为 0\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"-n <span class=\"token variable\">$&#123;x&#125;</span> : 字符串长度不为 0\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"-n <span class=\"token variable\">$&#123;x&#125;</span> : 字符串长度为 0\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> : 字符串不为空\"</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> : 字符串为空\"</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">#  Output:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">#  x=abc, y=xyz</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#  abc = xyz: x 不等于 y</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">#  abc != xyz : x 不等于 y</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">#  -z abc : 字符串长度不为 0</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">#  -n abc : 字符串长度不为 0</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">#  abc : 字符串不为空</span></pre></td></tr></table></figure><h3 id=\"文件测试运算符\"><a class=\"anchor\" href=\"#文件测试运算符\">#</a> 文件测试运算符</h3>\n<p>文件测试运算符用于检测 Unix 文件的各种属性。</p>\n<p>属性检测描述如下：</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-b file</td>\n<td>检测文件是否是块设备文件，如果是，则返回 true。</td>\n<td><code>[ -b $file ]</code>  返回 false。</td>\n</tr>\n<tr>\n<td>-c file</td>\n<td>检测文件是否是字符设备文件，如果是，则返回 true。</td>\n<td><code>[ -c $file ]</code>  返回 false。</td>\n</tr>\n<tr>\n<td>-d file</td>\n<td>检测文件是否是目录，如果是，则返回 true。</td>\n<td><code>[ -d $file ]</code>  返回 false。</td>\n</tr>\n<tr>\n<td>-f file</td>\n<td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td>\n<td><code>[ -f $file ]</code>  返回 true。</td>\n</tr>\n<tr>\n<td>-g file</td>\n<td>检测文件是否设置了 SGID 位，如果是，则返回 true。</td>\n<td><code>[ -g $file ]</code>  返回 false。</td>\n</tr>\n<tr>\n<td>-k file</td>\n<td>检测文件是否设置了粘着位 (Sticky Bit)，如果是，则返回 true。</td>\n<td><code>[ -k $file ]</code>  返回 false。</td>\n</tr>\n<tr>\n<td>-p file</td>\n<td>检测文件是否是有名管道，如果是，则返回 true。</td>\n<td><code>[ -p $file ]</code>  返回 false。</td>\n</tr>\n<tr>\n<td>-u file</td>\n<td>检测文件是否设置了 SUID 位，如果是，则返回 true。</td>\n<td><code>[ -u $file ]</code>  返回 false。</td>\n</tr>\n<tr>\n<td>-r file</td>\n<td>检测文件是否可读，如果是，则返回 true。</td>\n<td><code>[ -r $file ]</code>  返回 true。</td>\n</tr>\n<tr>\n<td>-w file</td>\n<td>检测文件是否可写，如果是，则返回 true。</td>\n<td><code>[ -w $file ]</code>  返回 true。</td>\n</tr>\n<tr>\n<td>-x file</td>\n<td>检测文件是否可执行，如果是，则返回 true。</td>\n<td><code>[ -x $file ]</code>  返回 true。</td>\n</tr>\n<tr>\n<td>-s file</td>\n<td>检测文件是否为空（文件大小是否大于 0），不为空返回 true。</td>\n<td><code>[ -s $file ]</code>  返回 true。</td>\n</tr>\n<tr>\n<td>-e file</td>\n<td>检测文件（包括目录）是否存在，如果是，则返回 true。</td>\n<td><code>[ -e $file ]</code>  返回 true。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>💻 『示例源码』</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">file</span><span class=\"token operator\">=</span><span class=\"token string\">\"/etc/hosts\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-r</span> <span class=\"token variable\">$&#123;file&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;file&#125;</span> 文件可读\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;file&#125;</span> 文件不可读\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-w</span> <span class=\"token variable\">$&#123;file&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;file&#125;</span> 文件可写\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;file&#125;</span> 文件不可写\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-x</span> <span class=\"token variable\">$&#123;file&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;file&#125;</span> 文件可执行\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;file&#125;</span> 文件不可执行\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-f</span> <span class=\"token variable\">$&#123;file&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;file&#125;</span> 文件为普通文件\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;file&#125;</span> 文件为特殊文件\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-d</span> <span class=\"token variable\">$&#123;file&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;file&#125;</span> 文件是个目录\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;file&#125;</span> 文件不是个目录\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-s</span> <span class=\"token variable\">$&#123;file&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;file&#125;</span> 文件不为空\"</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;file&#125;</span> 文件为空\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-e</span> <span class=\"token variable\">$&#123;file&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;file&#125;</span> 文件存在\"</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;file&#125;</span> 文件不存在\"</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#  Output:(根据文件的实际情况，输出结果可能不同)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">#  /etc/hosts 文件可读</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">#  /etc/hosts 文件可写</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">#  /etc/hosts 文件不可执行</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">#  /etc/hosts 文件为普通文件</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">#  /etc/hosts 文件不是个目录</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">#  /etc/hosts 文件不为空</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">#  /etc/hosts 文件存在</span></pre></td></tr></table></figure><h2 id=\"控制语句\"><a class=\"anchor\" href=\"#控制语句\">#</a> 控制语句</h2>\n<h3 id=\"条件语句\"><a class=\"anchor\" href=\"#条件语句\">#</a> 条件语句</h3>\n<p>跟其它程序设计语言一样，Bash 中的条件语句让我们可以决定一个操作是否被执行。结果取决于一个包在 <code>[[ ]]</code>  里的表达式。</p>\n<p>由 <code>[[ ]]</code> （ <code>sh</code>  中是 <code>[ ]</code> ）包起来的表达式被称作 <strong>检测命令</strong> 或 <strong>基元</strong>。这些表达式帮助我们检测一个条件的结果。这里可以找到有关<span class=\"exturl\" data-url=\"aHR0cDovL3NlcnZlcmZhdWx0LmNvbS9hLzUyMDUw\"> bash 中单双中括号区别</span>的答案。</p>\n<p>共有两个不同的条件表达式： <code>if</code>  和 <code>case</code> 。</p>\n<h4 id=\"if\"><a class=\"anchor\" href=\"#if\">#</a>  <code>if</code></h4>\n<p>（1） <code>if</code>  语句</p>\n<p><code>if</code>  在使用上跟其它语言相同。如果中括号里的表达式为真，那么 <code>then</code>  和 <code>fi</code>  之间的代码会被执行。 <code>fi</code>  标志着条件代码块的结束。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 写成一行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token number\">1</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"1 -eq 1 result is: true\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># Output: 1 -eq 1 result is: true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 写成多行</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token string\">\"abc\"</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token string\">\"abc\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"\"</span>abc<span class=\"token string\">\" -eq \"</span>abc<span class=\"token string\">\" result is: true\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># Output: abc -eq abc result is: true</span></pre></td></tr></table></figure><p>（2） <code>if else</code>  语句</p>\n<p>同样，我们可以使用 <code>if..else</code>  语句，例如：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token number\">2</span> <span class=\"token parameter variable\">-ne</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># Output: true</span></pre></td></tr></table></figure><p>（3） <code>if elif else</code>  语句</p>\n<p>有些时候， <code>if..else</code>  不能满足我们的要求。别忘了 <code>if..elif..else</code> ，使用起来也很方便。</p>\n<p><strong>💻 『示例源码』</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">y</span><span class=\"token operator\">=</span><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token operator\">></span> <span class=\"token variable\">$&#123;y&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> > <span class=\"token variable\">$&#123;y&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">elif</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$&#123;y&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> &lt; <span class=\"token variable\">$&#123;y&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> = <span class=\"token variable\">$&#123;y&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># Output: 10 &lt; 20</span></pre></td></tr></table></figure><h4 id=\"case\"><a class=\"anchor\" href=\"#case\">#</a>  <code>case</code></h4>\n<p>如果你需要面对很多情况，分别要采取不同的措施，那么使用 <code>case</code>  会比嵌套的 <code>if</code>  更有用。使用 <code>case</code>  来解决复杂的条件判断，看起来像下面这样：</p>\n<p><strong>💻 『示例源码』</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">exec</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token variable\">$&#123;oper&#125;</span> <span class=\"token keyword\">in</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">&#125;</span> + $<span class=\"token punctuation\">&#123;</span>y<span class=\"token punctuation\">&#125;</span><span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> + <span class=\"token variable\">$&#123;y&#125;</span> = <span class=\"token variable\">$&#123;val&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">&#125;</span> - $<span class=\"token punctuation\">&#123;</span>y<span class=\"token punctuation\">&#125;</span><span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> - <span class=\"token variable\">$&#123;y&#125;</span> = <span class=\"token variable\">$&#123;val&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span>* $<span class=\"token punctuation\">&#123;</span>y<span class=\"token punctuation\">&#125;</span><span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> * <span class=\"token variable\">$&#123;y&#125;</span> = <span class=\"token variable\">$&#123;val&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">&#125;</span> / $<span class=\"token punctuation\">&#123;</span>y<span class=\"token punctuation\">&#125;</span><span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> / <span class=\"token variable\">$&#123;y&#125;</span> = <span class=\"token variable\">$&#123;val&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  *<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Unknown oper!\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">esac</span></pre></td></tr></table></figure><p>每种情况都是匹配了某个模式的表达式。 <code>|</code>  用来分割多个模式， <code>)</code>  用来结束一个模式序列。第一个匹配上的模式对应的命令将会被执行。 <code>*</code>  代表任何不匹配以上给定模式的模式。命令块儿之间要用 <code>;;</code>  分隔。</p>\n<h3 id=\"循环语句\"><a class=\"anchor\" href=\"#循环语句\">#</a> 循环语句</h3>\n<p>循环其实不足为奇。跟其它程序设计语言一样，bash 中的循环也是只要控制条件为真就一直迭代执行的代码块。</p>\n<p>Bash 中有四种循环： <code>for</code> ， <code>while</code> ， <code>until</code>  和 <code>select</code> 。</p>\n<h4 id=\"for循环\"><a class=\"anchor\" href=\"#for循环\">#</a>  <code>for</code>  循环</h4>\n<p><code>for</code>  与它在 C 语言中的姊妹非常像。看起来是这样：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">arg</span> <span class=\"token keyword\">in</span> elem1 elem2 <span class=\"token punctuation\">..</span>. elemN</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">### 语句</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>在每次循环的过程中， <code>arg</code>  依次被赋值为从 <code>elem1</code>  到 <code>elemN</code> 。这些值还可以是通配符或者<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RlbnlzZG92aGFuL2Jhc2gtaGFuZGJvb2svYmxvYi9tYXN0ZXIvdHJhbnNsYXRpb25zL3poLUNOL1JFQURNRS5tZCMlRTUlQTQlQTclRTYlOEIlQUMlRTUlOEYlQjclRTYlODklQTklRTUlQjElOTU=\">大括号扩展</span>。</p>\n<p>当然，我们还可以把 <code>for</code>  循环写在一行，但这要求 <code>do</code>  之前要有一个分号，就像下面这样：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$i</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>还有，如果你觉得 <code>for..in..do</code>  对你来说有点奇怪，那么你也可以像 C 语言那样使用 <code>for</code> ，比如：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$i</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>当我们想对一个目录下的所有文件做同样的操作时， <code>for</code>  就很方便了。举个例子，如果我们想把所有的 <code>.bash</code>  文件移动到 <code>script</code>  文件夹中，并给它们可执行权限，我们的脚本可以这样写：</p>\n<p><strong>💻 『示例源码』</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">DIR</span><span class=\"token operator\">=</span>/home/zp</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">FILE</span> <span class=\"token keyword\">in</span> <span class=\"token variable\">$&#123;DIR&#125;</span>/*.sh<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">mv</span> <span class=\"token string\">\"<span class=\"token variable\">$FILE</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;DIR&#125;</span>/scripts\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 将 /home/zp 目录下所有 sh 文件拷贝到 /home/zp/scripts</span></pre></td></tr></table></figure><h4 id=\"while循环\"><a class=\"anchor\" href=\"#while循环\">#</a>  <code>while</code>  循环</h4>\n<p><code>while</code>  循环检测一个条件，只要这个条件为 <em>真</em>，就执行一段命令。被检测的条件跟 <code>if..then</code>  中使用的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RlbnlzZG92aGFuL2Jhc2gtaGFuZGJvb2svYmxvYi9tYXN0ZXIvdHJhbnNsYXRpb25zL3poLUNOL1JFQURNRS5tZCMlRTUlOUYlQkElRTUlODUlODMlRTUlOTIlOEMlRTclQkIlODQlRTUlOTAlODglRTglQTElQTglRTglQkUlQkUlRTUlQkMlOEY=\">基元</span>并无二异。因此一个 <code>while</code>  循环看起来会是这样：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> condition <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">### 语句</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>跟 <code>for</code>  循环一样，如果我们把 <code>do</code>  和被检测的条件写到一行，那么必须要在 <code>do</code>  之前加一个分号。</p>\n<p><strong>💻 『示例源码』</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">### 0 到 9 之间每个数的平方</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token parameter variable\">-lt</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>x <span class=\"token operator\">*</span> x<span class=\"token variable\">))</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token variable\">))</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#  Output:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#  0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#  1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#  4</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#  9</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#  16</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#  25</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#  36</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#  49</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#  64</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#  81</span></pre></td></tr></table></figure><h4 id=\"until循环\"><a class=\"anchor\" href=\"#until循环\">#</a>  <code>until</code>  循环</h4>\n<p><code>until</code>  循环跟 <code>while</code>  循环正好相反。它跟 <code>while</code>  一样也需要检测一个测试条件，但不同的是，只要该条件为 <em>假</em> 就一直执行循环：</p>\n<p><strong>💻 『示例源码』</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">until</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token parameter variable\">-ge</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;x&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">&#125;</span> + <span class=\"token number\">1</span><span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#  Output:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#  0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#  1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#  2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#  3</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#  4</span></pre></td></tr></table></figure><h4 id=\"select循环\"><a class=\"anchor\" href=\"#select循环\">#</a>  <code>select</code>  循环</h4>\n<p><code>select</code>  循环帮助我们组织一个用户菜单。它的语法几乎跟 <code>for</code>  循环一致：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token for-or-select variable\">answer</span> <span class=\"token keyword\">in</span> elem1 elem2 <span class=\"token punctuation\">..</span>. elemN</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">### 语句</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p><code>select</code>  会打印 <code>elem1..elemN</code>  以及它们的序列号到屏幕上，之后会提示用户输入。通常看到的是 <code>$?</code> （ <code>PS3</code>  变量）。用户的选择结果会被保存到 <code>answer</code>  中。如果 <code>answer</code>  是一个在 <code>1..N</code>  之间的数字，那么 <code>语句</code> 会被执行，紧接着会进行下一次迭代 —— 如果不想这样的话我们可以使用 <code>break</code>  语句。</p>\n<p><strong>💻 『示例源码』</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/usr/bin/env bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">PS3</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"Choose the package manager: \"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token for-or-select variable\">ITEM</span> <span class=\"token keyword\">in</span> bower <span class=\"token function\">npm</span> gem pip</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"Enter the package name: \"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">read</span> PACKAGE</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token variable\">$&#123;ITEM&#125;</span> <span class=\"token keyword\">in</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  bower<span class=\"token punctuation\">)</span> bower <span class=\"token function\">install</span> <span class=\"token variable\">$&#123;PACKAGE&#125;</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">npm</span><span class=\"token punctuation\">)</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token variable\">$&#123;PACKAGE&#125;</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  gem<span class=\"token punctuation\">)</span> gem <span class=\"token function\">install</span> <span class=\"token variable\">$&#123;PACKAGE&#125;</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  pip<span class=\"token punctuation\">)</span> pip <span class=\"token function\">install</span> <span class=\"token variable\">$&#123;PACKAGE&#125;</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">esac</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token builtin class-name\">break</span> <span class=\"token comment\"># 避免无限循环</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>这个例子，先询问用户他想使用什么包管理器。接着，又询问了想安装什么包，最后执行安装操作。</p>\n<p>运行这个脚本，会得到如下输出：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ ./my_script</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> bower</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token function\">npm</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> gem</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> pip</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Choose the package manager: <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Enter the package name: gitbook-cli</pre></td></tr></table></figure><h4 id=\"break-和-continue\"><a class=\"anchor\" href=\"#break-和-continue\">#</a>  <code>break</code>  和  <code>continue</code></h4>\n<p>如果想提前结束一个循环或跳过某次循环执行，可以使用 shell 的 <code>break</code>  和 <code>continue</code>  语句来实现。它们可以在任何循环中使用。</p>\n<blockquote>\n<p><code>break</code>  语句用来提前结束当前循环。</p>\n<p><code>continue</code>  语句用来跳过某次迭代。</p>\n</blockquote>\n<p><strong>💻 『示例源码』</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查找 10 以内第一个能整除 2 和 3 的正整数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;i&#125;</span> <span class=\"token parameter variable\">-lt</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>i <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token variable\">))</span></span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>i <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token variable\">))</span></span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;i&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span> + <span class=\"token number\">1</span><span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># Output: 6</span></pre></td></tr></table></figure><p><strong>💻 『示例源码』</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 打印 10 以内的奇数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>i <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token variable\">))</span></span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token builtin class-name\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;i&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#  Output:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#  1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#  3</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#  5</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#  7</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#  9</span></pre></td></tr></table></figure><h2 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h2>\n<p>bash 函数定义语法如下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">]</span> funname <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    action<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">[</span>return int<span class=\"token punctuation\">;</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>💡 说明：</p>\n<ol>\n<li>函数定义时， <code>function</code>  关键字可有可无。</li>\n<li>函数返回值 - return 返回函数返回值，返回值类型只能为整数（0-255）。如果不加 return 语句，shell 默认将以最后一条命令的运行结果，作为函数返回值。</li>\n<li>函数返回值在调用该函数后通过  <code>$?</code>  来获得。</li>\n<li>所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至 shell 解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。</li>\n</ol>\n</blockquote>\n<p><strong>💻 『示例源码』</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/usr/bin/env bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function-name function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token assign-left variable\"><span class=\"token environment constant\">PS3</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"choose the oper: \"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">select</span> <span class=\"token for-or-select variable\">oper</span> <span class=\"token keyword\">in</span> + - <span class=\"token punctuation\">\\</span>* / <span class=\"token comment\"># 生成操作符选择菜单</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"enter first num: \"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">read</span> x <span class=\"token comment\"># 读取输入参数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"enter second num: \"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">read</span> y <span class=\"token comment\"># 读取输入参数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token builtin class-name\">exec</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">case</span> <span class=\"token variable\">$&#123;oper&#125;</span> <span class=\"token keyword\">in</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token builtin class-name\">return</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>$&#123;x&#125; <span class=\"token operator\">+</span> $&#123;y&#125;<span class=\"token variable\">))</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token builtin class-name\">return</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>$&#123;x&#125; <span class=\"token operator\">-</span> $&#123;y&#125;<span class=\"token variable\">))</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token builtin class-name\">return</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>$&#123;x&#125; <span class=\"token operator\">*</span> $&#123;y&#125;<span class=\"token variable\">))</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token builtin class-name\">return</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>$&#123;x&#125; <span class=\"token operator\">/</span> $&#123;y&#125;<span class=\"token variable\">))</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    *<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;oper&#125;</span> is not support!\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">esac</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token builtin class-name\">break</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>calc</pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"the result is: <span class=\"token variable\">$?</span>\"</span> <span class=\"token comment\"># $? 获取 calc 函数返回值</span></pre></td></tr></table></figure><p>执行结果：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ ./function-demo.sh</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> +</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> -</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> /</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>choose the oper: <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>enter first num: <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>enter second num: <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>the result is: <span class=\"token number\">100</span></pre></td></tr></table></figure><h3 id=\"位置参数\"><a class=\"anchor\" href=\"#位置参数\">#</a> 位置参数</h3>\n<p><strong>位置参数</strong>是在调用一个函数并传给它参数时创建的变量。</p>\n<p>位置参数变量表：</p>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>$0</code></td>\n<td>脚本名称</td>\n</tr>\n<tr>\n<td><code>$1 … $9</code></td>\n<td>第 1 个到第 9 个参数列表</td>\n</tr>\n<tr>\n<td><code>$&#123;10&#125; … $&#123;N&#125;</code></td>\n<td>第 10 个到 N 个参数列表</td>\n</tr>\n<tr>\n<td><code>$*</code>  or  <code>$@</code></td>\n<td>除了 <code>$0</code>  外的所有位置参数</td>\n</tr>\n<tr>\n<td><code>$#</code></td>\n<td>不包括 <code>$0</code>  在内的位置参数的个数</td>\n</tr>\n<tr>\n<td><code>$FUNCNAME</code></td>\n<td>函数名称（仅在函数内部有值）</td>\n</tr>\n</tbody>\n</table>\n<p><strong>💻 『示例源码』</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/usr/bin/env bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-n</span> <span class=\"token variable\">$1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"第一个参数为：<span class=\"token variable\">$1</span>\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token variable\">$1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"第一个参数为空\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token assign-left variable\">y</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-n</span> <span class=\"token variable\">$2</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"第二个参数为：<span class=\"token variable\">$2</span>\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token assign-left variable\">y</span><span class=\"token operator\">=</span><span class=\"token variable\">$2</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"第二个参数为空\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function-name function\">paramsFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"函数第一个入参：<span class=\"token variable\">$1</span>\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"函数第二个入参：<span class=\"token variable\">$2</span>\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>paramsFunction <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token variable\">$&#123;y&#125;</span></pre></td></tr></table></figure><p>执行结果：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ ./function-demo2.sh</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>第一个参数为空</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>第二个参数为空</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>函数第一个入参：0</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>函数第二个入参：0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>$ ./function-demo2.sh <span class=\"token number\">10</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>第一个参数为：10</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>第二个参数为：20</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>函数第一个入参：10</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>函数第二个入参：20</pre></td></tr></table></figure><p>执行  <code>./variable-demo4.sh hello world</code>  ，然后在脚本中通过  <code>$1</code> 、 <code>$2</code>  ... 读取第 1 个参数、第 2 个参数。。。</p>\n<h3 id=\"函数处理参数\"><a class=\"anchor\" href=\"#函数处理参数\">#</a> 函数处理参数</h3>\n<p>另外，还有几个特殊字符用来处理参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数处理</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>$#</code></td>\n<td>返回参数个数</td>\n</tr>\n<tr>\n<td><code>$*</code></td>\n<td>返回所有参数</td>\n</tr>\n<tr>\n<td><code>$$</code></td>\n<td>脚本运行的当前进程 ID 号</td>\n</tr>\n<tr>\n<td><code>$!</code></td>\n<td>后台运行的最后一个进程的 ID 号</td>\n</tr>\n<tr>\n<td><code>$@</code></td>\n<td>返回所有参数</td>\n</tr>\n<tr>\n<td><code>$-</code></td>\n<td>返回 Shell 使用的当前选项，与 set 命令功能相同。</td>\n</tr>\n<tr>\n<td><code>$?</code></td>\n<td>函数返回值</td>\n</tr>\n</tbody>\n</table>\n<p><strong>💻 『示例源码』</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function-name function\">runner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>zp</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function-name function\">paramsFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"函数第一个入参：<span class=\"token variable\">$1</span>\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"函数第二个入参：<span class=\"token variable\">$2</span>\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"传递到脚本的参数个数：<span class=\"token variable\">$#</span>\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"所有参数：\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"+ %s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">$*</span>\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"脚本运行的当前进程 ID 号：<span class=\"token variable\">$$</span>\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"后台运行的最后一个进程的 ID 号：<span class=\"token variable\">$!</span>\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"所有参数：\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"+ %s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">$@</span>\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Shell 使用的当前选项：$-\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  runner</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"runner 函数的返回值：<span class=\"token variable\">$?</span>\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>paramsFunction <span class=\"token number\">1</span> <span class=\"token string\">\"abc\"</span> <span class=\"token string\">\"hello, <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>zp<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#  Output:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#  函数第一个入参：1</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#  函数第二个入参：abc</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#  传递到脚本的参数个数：3</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">#  所有参数：</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">#  + 1 abc hello, \"zp\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">#  脚本运行的当前进程 ID 号：26400</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#  后台运行的最后一个进程的 ID 号：</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#  所有参数：</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">#  + 1</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">#  + abc</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">#  + hello, \"zp\"</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">#  Shell 使用的当前选项：hB</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">#  runner 函数的返回值：0</span></pre></td></tr></table></figure><h2 id=\"shell-扩展\"><a class=\"anchor\" href=\"#shell-扩展\">#</a> Shell 扩展</h2>\n<p><em>扩展</em> 发生在一行命令被分成一个个的 <em>记号（tokens）</em> 之后。换言之，扩展是一种执行数学运算的机制，还可以用来保存命令的执行结果，等等。</p>\n<p>感兴趣的话可以阅读<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ251Lm9yZy9zb2Z0d2FyZS9iYXNoL21hbnVhbC9iYXNoLmh0bWwjIyNTaGVsbC1FeHBhbnNpb25z\">关于 shell 扩展的更多细节</span>。</p>\n<h4 id=\"大括号扩展\"><a class=\"anchor\" href=\"#大括号扩展\">#</a> 大括号扩展</h4>\n<p>大括号扩展让生成任意的字符串成为可能。它跟 <em>文件名扩展</em> 很类似，举个例子：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> beg<span class=\"token punctuation\">&#123;</span>i,a,u<span class=\"token punctuation\">&#125;</span>n <span class=\"token comment\">### begin began begun</span></pre></td></tr></table></figure><p>大括号扩展还可以用来创建一个可被循环迭代的区间。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">### 0 1 2 3 4 5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">&#123;</span>00<span class=\"token punctuation\">..</span><span class=\"token number\">8</span><span class=\"token punctuation\">..</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">### 00 02 04 06 08</span></pre></td></tr></table></figure><h4 id=\"命令置换\"><a class=\"anchor\" href=\"#命令置换\">#</a> 命令置换</h4>\n<p>命令置换允许我们对一个命令求值，并将其值置换到另一个命令或者变量赋值表达式中。当一个命令被 `` 或 <code>$()</code>  包围时，命令置换将会执行。举个例子：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">now</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">date</span> +%T<span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">### or</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">now</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +%T<span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$now</span> <span class=\"token comment\">### 19:08:26</span></pre></td></tr></table></figure><h4 id=\"算数扩展\"><a class=\"anchor\" href=\"#算数扩展\">#</a> 算数扩展</h4>\n<p>在 bash 中，执行算数运算是非常方便的。算数表达式必须包在 <code>$(( ))</code>  中。算数扩展的格式为：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">result</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span> <span class=\"token punctuation\">((</span><span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token variable\">))</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$result</span> <span class=\"token comment\">### 9</span></pre></td></tr></table></figure><p>在算数表达式中，使用变量无需带上 <code>$</code>  前缀：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">y</span><span class=\"token operator\">=</span><span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span> x <span class=\"token operator\">+</span> y <span class=\"token variable\">))</span></span>     <span class=\"token comment\">### 11</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span> <span class=\"token operator\">++</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">++</span> <span class=\"token variable\">))</span></span> <span class=\"token comment\">### 12</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span> x <span class=\"token operator\">+</span> y <span class=\"token variable\">))</span></span>     <span class=\"token comment\">### 13</span></pre></td></tr></table></figure><h4 id=\"单引号和双引号-2\"><a class=\"anchor\" href=\"#单引号和双引号-2\">#</a> 单引号和双引号</h4>\n<p>单引号和双引号之间有很重要的区别。在双引号中，变量引用或者命令置换是会被展开的。在单引号中是不会的。举个例子：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Your home: <span class=\"token environment constant\">$HOME</span>\"</span> <span class=\"token comment\">### Your home: /Users/&lt;username></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Your home: $HOME'</span> <span class=\"token comment\">### Your home: $HOME</span></pre></td></tr></table></figure><p>当局部变量和环境变量包含空格时，它们在引号中的扩展要格外注意。随便举个例子，假如我们用 <code>echo</code>  来输出用户的输入：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">INPUT</span><span class=\"token operator\">=</span><span class=\"token string\">\"A string  with   strange    whitespace.\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$INPUT</span>   <span class=\"token comment\">### A string with strange whitespace.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$INPUT</span>\"</span> <span class=\"token comment\">### A string  with   strange    whitespace.</span></pre></td></tr></table></figure><p>调用第一个 <code>echo</code>  时给了它 5 个单独的参数 ——  <code>$INPUT</code>  被分成了单独的词， <code>echo</code>  在每个词之间打印了一个空格。第二种情况，调用 <code>echo</code>  时只给了它一个参数（整个 $INPUT 的值，包括其中的空格）。</p>\n<p>来看一个更严肃的例子：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">FILE</span><span class=\"token operator\">=</span><span class=\"token string\">\"Favorite Things.txt\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cat</span> <span class=\"token variable\">$FILE</span>   <span class=\"token comment\">### 尝试输出两个文件: `Favorite` 和 `Things.txt`</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">cat</span> <span class=\"token string\">\"<span class=\"token variable\">$FILE</span>\"</span> <span class=\"token comment\">### 输出一个文件: `Favorite Things.txt`</span></pre></td></tr></table></figure><p>尽管这个问题可以通过把 FILE 重命名成 <code>Favorite-Things.txt</code>  来解决，但是，假如这个值来自某个环境变量，来自一个位置参数，或者来自其它命令（ <code>find</code> ,  <code>cat</code> , 等等）呢。因此，如果输入 <em>可能</em> 包含空格，务必要用引号把表达式包起来。</p>\n<h2 id=\"流和重定向\"><a class=\"anchor\" href=\"#流和重定向\">#</a> 流和重定向</h2>\n<p>Bash 有很强大的工具来处理程序之间的协同工作。使用流，我们能将一个程序的输出发送到另一个程序或文件，因此，我们能方便地记录日志或做一些其它我们想做的事。</p>\n<p>管道给了我们创建传送带的机会，控制程序的执行成为可能。</p>\n<p>学习如何使用这些强大的、高级的工具是非常非常重要的。</p>\n<h3 id=\"输入-输出流\"><a class=\"anchor\" href=\"#输入-输出流\">#</a> 输入、输出流</h3>\n<p>Bash 接收输入，并以字符序列或 <strong>字符流</strong> 的形式产生输出。这些流能被重定向到文件或另一个流中。</p>\n<p>有三个文件描述符：</p>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>描述符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>0</code></td>\n<td><code>stdin</code></td>\n<td>标准输入</td>\n</tr>\n<tr>\n<td><code>1</code></td>\n<td><code>stdout</code></td>\n<td>标准输出</td>\n</tr>\n<tr>\n<td><code>2</code></td>\n<td><code>stderr</code></td>\n<td>标准错误输出</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"重定向\"><a class=\"anchor\" href=\"#重定向\">#</a> 重定向</h3>\n<p>重定向让我们可以控制一个命令的输入来自哪里，输出结果到什么地方。这些运算符在控制流的重定向时会被用到：</p>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&gt;</code></td>\n<td>重定向输出</td>\n</tr>\n<tr>\n<td><code>&amp;&gt;</code></td>\n<td>重定向输出和错误输出</td>\n</tr>\n<tr>\n<td><code>&amp;&gt;&gt;</code></td>\n<td>以附加的形式重定向输出和错误输出</td>\n</tr>\n<tr>\n<td><code>&lt;</code></td>\n<td>重定向输入</td>\n</tr>\n<tr>\n<td><code>&lt;&lt;</code></td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3RsZHAub3JnL0xEUC9hYnMvaHRtbC9oZXJlLWRvY3MuaHRtbA==\">Here 文档</span> 语法</td>\n</tr>\n<tr>\n<td><code>&lt;&lt;&lt;</code></td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy50bGRwLm9yZy9MRFAvYWJzL2h0bWwveDE3ODM3Lmh0bWw=\">Here 字符串</span></td>\n</tr>\n</tbody>\n</table>\n<p>以下是一些使用重定向的例子：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">### ls 的结果将会被写到 list.txt 中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> <span class=\"token operator\">></span> list.txt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">### 将输出附加到 list.txt 中</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-a</span> <span class=\"token operator\">>></span> list.txt</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">### 所有的错误信息会被写到 errors.txt 中</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">grep</span> da * <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> errors.txt</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">### 从 errors.txt 中读取输入</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">less</span> <span class=\"token operator\">&lt;</span> errors.txt</pre></td></tr></table></figure><h3 id=\"devnull-文件\"><a class=\"anchor\" href=\"#devnull-文件\">#</a>  <code>/dev/null</code>  文件</h3>\n<p>如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 /dev/null：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">command</span> <span class=\"token operator\">></span> /dev/null</pre></td></tr></table></figure><p>/dev/null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 /dev/null 文件非常有用，将命令的输出重定向到它，会起到 &quot;禁止输出&quot; 的效果。</p>\n<p>如果希望屏蔽 stdout 和 stderr，可以这样写：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">command</span> <span class=\"token operator\">></span> /dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span></pre></td></tr></table></figure><h2 id=\"debug\"><a class=\"anchor\" href=\"#debug\">#</a> Debug</h2>\n<p>shell 提供了用于 debug 脚本的工具。</p>\n<p>如果想采用 debug 模式运行某脚本，可以在其 shebang 中使用一个特殊的选项：</p>\n<pre><code>#!/bin/bash options\n</code></pre>\n<p>options 是一些可以改变 shell 行为的选项。下表是一些可能对你有用的选项：</p>\n<table>\n<thead>\n<tr>\n<th>Short</th>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-f</code></td>\n<td>noglob</td>\n<td>禁止文件名展开（globbing）</td>\n</tr>\n<tr>\n<td><code>-i</code></td>\n<td>interactive</td>\n<td>让脚本以 <em>交互</em> 模式运行</td>\n</tr>\n<tr>\n<td><code>-n</code></td>\n<td>noexec</td>\n<td>读取命令，但不执行（语法检查）</td>\n</tr>\n<tr>\n<td><code>-t</code></td>\n<td>—</td>\n<td>执行完第一条命令后退出</td>\n</tr>\n<tr>\n<td><code>-v</code></td>\n<td>verbose</td>\n<td>在执行每条命令前，向 <code>stderr</code>  输出该命令</td>\n</tr>\n<tr>\n<td><code>-x</code></td>\n<td>xtrace</td>\n<td>在执行每条命令前，向 <code>stderr</code>  输出该命令以及该命令的扩展参数</td>\n</tr>\n</tbody>\n</table>\n<p>举个例子，如果我们在脚本中指定了 <code>-x</code>  例如：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash -x</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$i</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>这会向 <code>stdout</code>  打印出变量的值和一些其它有用的信息：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ ./my_script</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>+ <span class=\"token variable\"><span class=\"token punctuation\">((</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">))</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+ <span class=\"token variable\"><span class=\"token punctuation\">((</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">))</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>+ <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>+ <span class=\"token variable\"><span class=\"token punctuation\">((</span> i<span class=\"token operator\">++</span>  <span class=\"token punctuation\">))</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>+ <span class=\"token variable\"><span class=\"token punctuation\">((</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">))</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>+ <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>+ <span class=\"token variable\"><span class=\"token punctuation\">((</span> i<span class=\"token operator\">++</span>  <span class=\"token punctuation\">))</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>+ <span class=\"token variable\"><span class=\"token punctuation\">((</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">))</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>+ <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>+ <span class=\"token variable\"><span class=\"token punctuation\">((</span> i<span class=\"token operator\">++</span>  <span class=\"token punctuation\">))</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>+ <span class=\"token variable\"><span class=\"token punctuation\">((</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">))</span></span></pre></td></tr></table></figure><p>有时我们值需要 debug 脚本的一部分。这种情况下，使用 <code>set</code>  命令会很方便。这个命令可以启用或禁用选项。使用 <code>-</code>  启用选项， <code>+</code>  禁用选项：</p>\n<p><strong>💻 『示例源码』</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 开启 debug</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token parameter variable\">-x</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token builtin class-name\">printf</span> <span class=\"token variable\">$&#123;i&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 关闭 debug</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">set</span> +x</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#  Output:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#  + (( i = 0 ))</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#  + (( i &lt; 3 ))</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#  + printf 0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#  0+ (( i++  ))</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#  + (( i &lt; 3 ))</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#  + printf 1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#  1+ (( i++  ))</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#  + (( i &lt; 3 ))</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#  + printf 2</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#  2+ (( i++  ))</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#  + (( i &lt; 3 ))</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#  + set +x</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token builtin class-name\">printf</span> <span class=\"token variable\">$&#123;i&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#  Output: 12345</span></pre></td></tr></table></figure><h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsZWJjYXkvYXdlc29tZS1zaGVsbA==\">awesome-shell</span> - shell 资源列表</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2F3ZXNvbWUtbGlzdHMvYXdlc29tZS1iYXNo\">awesome-bash</span> - bash 资源列表</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RlbnlzZG92aGFuL2Jhc2gtaGFuZGJvb2s=\">bash-handbook</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Z1dWloYy9iYXNoLWd1aWRl\">bash-guide</span> - bash 基本用法指南</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0Jhc2gtaXQvYmFzaC1pdA==\">bash-it</span> - 为你日常使用、开发以及维护 shell 脚本和自定义命令提供了一个可靠的框架</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2RvdGZpbGVzLmdpdGh1Yi5pby8=\">dotfiles.github.io</span> - 上面有 bash 和其它 shell 的各种 dotfiles 集合以及 shell 框架的链接</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ydW5vb2IuY29tL2xpbnV4L2xpbnV4LXNoZWxsLmh0bWw=\">Runoob Shell 教程</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2tvYWxhbWFuL3NoZWxsY2hlY2s=\">shellcheck</span> - 一个静态 shell 脚本分析工具，本质上是 bash／sh／zsh 的 lint。</li>\n</ul>\n<p>最后，Stack Overflow 上 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvdGFnZ2VkL2Jhc2g=\">bash 标签下</span>有很多你可以学习的问题，当你遇到问题时，也是一个提问的好地方。</p>\n",
            "tags": [
                "工具",
                "Linux",
                "编程语言",
                "编程",
                "shell"
            ]
        },
        {
            "id": "https://metal-heart.github.io/posts/61108/",
            "url": "https://metal-heart.github.io/posts/61108/",
            "title": "《华为是怎样对待供应商的》",
            "date_published": "2022-10-12T02:45:48.000Z",
            "content_html": "<h1 id=\"解读华为是怎样对待供应商的\"><a class=\"anchor\" href=\"#解读华为是怎样对待供应商的\">#</a> 解读《华为是怎样对待供应商的》</h1>\n<h1 id=\"采购杠杆\"><a class=\"anchor\" href=\"#采购杠杆\">#</a> 采购杠杆</h1>\n<p>按物料族进行采购运作的目的是在全球范围内利用华为的采购杠杆。<br />\n这个应该很好理解：<br />\n即使是华为，其一个产品使用某个器件的量是有限的。他们有些项目的发货量也是非常小的。<br />\n但是其项目比较多、多个项目都使用同一种物料，所产生的累加在一起的数量，也是让供应商非常兴奋的数量。<br />\n从开发者的角度，在器件选型的时候，应该是考虑其他项目、其他产品已经在使用自己所需要的物料了，尽量考虑已经采购和使用的物料。<br />\n这个情况，在很多开发规模不大的公司很容易出现问题，大家按照自己的认知和想法随意选择新型号的器件。导致：<br />\na、重复设计，相同功能的电路<strong>重复设计多次</strong>。<br />\nb、技术不能得到积累，多个人、多个产品相互之间复用的电路、模块太少，每次开发都是新的人力投入；<strong>相互之间的电路不能够得到借鉴</strong>。<br />\nc、<strong>相同的功能，选用不同的器件，造成大量的库存，大量的浪费</strong>。</p>\n<p>所以，华为采取了以下几个措施，进行规避以上问题：<br />\na、<strong>新器件不允许轻易的引入，需要经过复杂的评审，重复论证其必要性</strong>。新引入一个器件的成本按照 10 万美金进行评估其综合成本。<br />\nb、电路<strong>设计要求：归一化、简洁度</strong><br />\n归一化：减少器件种类，作为一个专门的措施，在项目流程中对电路进行审视。<br />\n简洁度：器件管脚数量 / 器件的个数，用于考核是否使用了大量不必要的阻容等器件。<br />\nc、CBB  共用基础模块（Common Building Blocks, CBB）指那些可以在不同产品、系统之间共用的零部件、模块、技术及其他相关的设计成果。由于部门之间共享已有成果的程度很低，随着产品种类的不断增长，零部件、支持系统、供应商也在持续增长，这将导致一系列问题。事实上，不同产品、系统之间，存在许多可以共用的零部件、模块和技术，如果产品在开发中尽可能多地采用了这些成熟的共用基础模块和技术，无疑这一产品的质量、进度和成本会得到很好的控制和保证，产品开发中的技术分险也将大为降低。因此，通过产品重整，建立 CBB 数据库，实现技术、模块、子系统、零部件在不同产品之间的重用和共享，可以缩短产品开发周期、降低产品成本。 CBB 策略的实施需要组织结构和衡量标准的保证。<br />\nCBB 电路：指不同设计平台，不同项目之间共用的电路模块、PCB 布局、走线及其它相关的设计成果，CBB 电路分为原理图模块和 PCB 模块两部分。</p>\n<p>有一次，任正非 开会，问一名副总裁：“你的产品有百分之多少是自己开发的呀？</p>\n<p>” 这位副总裁非常骄傲的说：“我们的产品，<strong>有 80% 都是自己开发的，20% 是公司现有模块”。任正非非常生气，骂他：“你这个老农民”</strong>。</p>\n<p>又问另一个副总裁:“你的产品有百分之多少是自己开发的呀？”</p>\n<p>这位副总裁说：“<strong>我们的产品 60% 是自己开发的，40% 是公司现有的模块。” 任正非点点头：“你是农民企业家。</strong>”（开始学会整合资源了。）</p>\n<p>又问另一个副总裁:“你的产品有百分之多少是自己开发的呀？”</p>\n<p>这位副总裁说:” 我们的产品<strong> 40% 是自己开发的，60% 是公司现有模块。” 任总非常高兴：“你才是真正的企业家</strong>。”</p>\n<p>华为早期的螺钉就有 2000 多种。为什么呢？研发人员讲究” 创新”。他设计一个直角螺钉，我就设计一个卯角的，另外一个哥们看我设计卯角的，他就设计一个弯角的，反正和你们的都不一样，体现自己的独特性。这种创新有没有必要呢？答案显然不是。因此，华为后期通过对 CBB 共享模块进行梳理，发现只需要 200 多种螺钉。由于设计人员无谓的 “创新”，导致公司物料编码很多，很多物料采购量有很少，一是增加了采购部门的工作量，另一方面，由于我们采购的很少，因此，采购的议价就没有优势，导致很多物料的采购价格偏高。</p>\n<p>IBM 数据表明，如果公司建立规范化的 CBB 共享平台，在产品设计过程中尽量<strong>选用平台库中的部件和物料，料号减少了 30%，供应商从 5000 多家减少到 1200 多家，共享的开发费用从 2% 增加到 20%，减少 50 亿美元的库存成本，每年节约持有成本 5 亿美元，节约劳动节约了研发成本和制造成本，还保证了产品的质量</strong>，可以说是一个一劳永逸的战略部署。</p>\n<p>华为在 2017、2016 年芯片的采购额度在 140 亿美金左右，世界排名第五。</p>\n<p>单位：百万美元。BBK = 步步高。</p>\n<p>所谓 “客大欺店”：华为因为其采购的体量足够大，只要运作的好，可以足够的主动权去控制供应链的价格。<br />\n在利用上面的一些步骤，可以足以让某一型号的物料形成海量的采购，让芯片的价格最终跟沙子一样。</p>\n<p>杠杆也有撬不动的时候<br />\n有些器件，由于芯片厂家的技术壁垒，导致独家供货，使得即使华为这样的厂家也没有了议价权：<br />\n例如：Intel、三星、高通等厂家。</p>\n<p>三星自主生产的尖端电子件，除了给自家用外，还向其它厂商供货，再看看华为公司，今年从韩国供应链采购金额就高达 5.3 万亿韩元，约 311 亿人民币！<br />\n 华为公司一年从韩国采购的产品价值就达到了公司营收的 1/5 左右了。</p>\n<p>而且采购之时还要看三星 SK Hynix 等韩国公司的脸色，倘若搞的他们不开心还会出现限供或不供的局面。就拿三星屏来说，三星把最好的屏都留给自己用，过时或自己觉得不好的东西才给你！早期国产手机中兴 Vivo  金立等众多厂商由于手机屏货源紧张而到处奔波，寻求上游厂商支持，试图从这些屏厂商中<strong>获得足够量的显示屏。除了手机屏还是闪存  内存等等一系列尖端产品，你都要绞尽脑汁与上游厂商搞好关系，才能在后序生产中保证配件货源的稳定！</strong></p>\n<p>当单一器件不具备可以替代性，所以华为会针对这种独家供货采取很多手段：<br />\n1、扶持一家竞争对手，例如针对 Intel，会做一些针对 AMD 的性能测试、验证、甚至产品开发；针对 Intel，或研发和使用多核 ARM 的服务器，哪怕生态不成熟，哪怕困难重重，但是也需要提早做好准备，避免类似特朗普封杀中兴的事件。<br />\n2、自研芯片逐步解决供货的问题。<br />\n3、针对低附加值行业，尽早指定芯片布局，形成高端玩法，<strong>当设备不赚钱的时候，靠销售芯片</strong>，或者依托芯片本身的技术壁垒，形成高附加值的护城河。<br />\n例如，安防、wifi、光网络、手机、无线基站。都通过芯片布局，形成壁垒和优势。这种布局，一是长期积累的芯片设计能力，二是投入大，本身从资本层面就已经形成了保护。</p>\n<h1 id=\"华为92家供应商\"><a class=\"anchor\" href=\"#华为92家供应商\">#</a> 华为 92 家供应商</h1>\n<table>\n<thead>\n<tr>\n<th>供应商</th>\n<th>总部</th>\n<th>供应产品及业务</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>英特尔</td>\n<td>美国</td>\n<td>计算和存储等</td>\n</tr>\n<tr>\n<td>恩智浦</td>\n<td>荷兰</td>\n<td>NFC 芯片及音频放大器 等</td>\n</tr>\n<tr>\n<td>灝讯</td>\n<td>瑞士</td>\n<td>射频连接器和光学连接元件</td>\n</tr>\n<tr>\n<td>赛灵思</td>\n<td>美国</td>\n<td>FPGA 芯片及视频编码器</td>\n</tr>\n<tr>\n<td>美满</td>\n<td>美国</td>\n<td>存储、网络和无线连接解决方案</td>\n</tr>\n<tr>\n<td>富士康</td>\n<td>中国台湾</td>\n<td>代工</td>\n</tr>\n<tr>\n<td>生益电子</td>\n<td>中国大陆</td>\n<td>PCB (印刷线路板〉</td>\n</tr>\n<tr>\n<td>中利集团</td>\n<td>中国大陆</td>\n<td>线缆</td>\n</tr>\n<tr>\n<td>富士通</td>\n<td>曰本</td>\n<td>硬盘驱动器、大移动硬盘等</td>\n</tr>\n<tr>\n<td>沪士电子</td>\n<td>中国大陆</td>\n<td>PCB 产品</td>\n</tr>\n<tr>\n<td>美光</td>\n<td>美国</td>\n<td>存储产品</td>\n</tr>\n<tr>\n<td>广濑</td>\n<td>曰本</td>\n<td>连接器及相关组件</td>\n</tr>\n<tr>\n<td>比亚迪</td>\n<td>中国大陆</td>\n<td>手机结构件、组装、电池、充电器等</td>\n</tr>\n<tr>\n<td>村田</td>\n<td>日本</td>\n<td>滤波器和 MLCC 等</td>\n</tr>\n<tr>\n<td>索尼</td>\n<td>日本</td>\n<td>手机摄像头及相关模组</td>\n</tr>\n<tr>\n<td>大立光电</td>\n<td>中国台湾</td>\n<td>手机镜头</td>\n</tr>\n<tr>\n<td>高通</td>\n<td>美国</td>\n<td>调制调解芯片</td>\n</tr>\n<tr>\n<td>亚德诺</td>\n<td>美国</td>\n<td>模拟与数字倍号处理</td>\n</tr>\n<tr>\n<td>康沃</td>\n<td>美国</td>\n<td>数据保护解决方案</td>\n</tr>\n<tr>\n<td>安费诺</td>\n<td>美国</td>\n<td>连接器及线缆</td>\n</tr>\n<tr>\n<td>立讯精密</td>\n<td>中国大陆</td>\n<td>连接器</td>\n</tr>\n<tr>\n<td>欣兴电子</td>\n<td>中国台湾</td>\n<td>电路板 PC8、集成电辂 载板</td>\n</tr>\n<tr>\n<td>莫仕</td>\n<td>美国</td>\n<td>连接器与线缆</td>\n</tr>\n<tr>\n<td>耐克森</td>\n<td>法国</td>\n<td>线缆</td>\n</tr>\n<tr>\n<td>京东方</td>\n<td>中国大陆</td>\n<td>显示屏</td>\n</tr>\n<tr>\n<td>阳天电子</td>\n<td>中国大陆</td>\n<td>温控设备、通信整机 、TOP 级的结构件等</td>\n</tr>\n<tr>\n<td>中航光电</td>\n<td>中国大陆</td>\n<td>线缆与连接器物料</td>\n</tr>\n<tr>\n<td>甲骨文</td>\n<td>美国</td>\n<td>软件</td>\n</tr>\n<tr>\n<td>住友电工</td>\n<td>曰本</td>\n<td>光通佶信器件</td>\n</tr>\n<tr>\n<td>安森美</td>\n<td>美国</td>\n<td>光学防抖、自动对焦 、可调谐射頻器件、摄像机和充电器的电源管理集成屯路解决方案以及保护器件等</td>\n</tr>\n<tr>\n<td>中远海运集团</td>\n<td colspan=\"2\">中国大陆</td>\n<td>货物运鍮</td>\n</tr>\n<tr>\n<td>顺丰速通</td>\n<td>中国大陆</td>\n<td>货物运输</td>\n</tr>\n<tr>\n<td>中国外运</td>\n<td>中国大陆</td>\n<td>货物运输</td>\n</tr>\n<tr>\n<td>新能源科技有限公司</td>\n<td>中国香港</td>\n<td>电池类产品</td>\n</tr>\n<tr>\n<td>舜宇光学</td>\n<td>中国大陆</td>\n<td>摄像头模组</td>\n</tr>\n<tr>\n<td>天马</td>\n<td>中国大陆</td>\n<td>屏幕</td>\n</tr>\n<tr>\n<td>SK 海力士</td>\n<td>韩国</td>\n<td>内存</td>\n</tr>\n<tr>\n<td>罗德与施瓦茨</td>\n<td>德国</td>\n<td>从产品开发到产线无缝衔接的 NB-loT 测试方案</td>\n</tr>\n<tr>\n<td>是徳科技</td>\n<td>美国</td>\n<td>SG 技术的测试</td>\n</tr>\n<tr>\n<td>美国国际集团</td>\n<td>美国</td>\n<td>保险、金融、投资及资产管理等服务</td>\n</tr>\n<tr>\n<td>思博沦</td>\n<td>美国</td>\n<td>验证测试业务</td>\n</tr>\n<tr>\n<td>红帽</td>\n<td>美国</td>\n<td>开期软件和技术</td>\n</tr>\n<tr>\n<td>SUSE</td>\n<td>德国</td>\n<td>Linux</td>\n</tr>\n<tr>\n<td>晶技股份</td>\n<td>中国台湾</td>\n<td>石英英荡器及表面声波振荡器</td>\n</tr>\n<tr>\n<td>东芝存储</td>\n<td>曰本</td>\n<td>从硬盘 (HDD)、固态混合硬盘 SSHD 和固态硬盘 SSD 到 NAND 闪存的各种存储技术</td>\n</tr>\n<tr>\n<td>希捷</td>\n<td>美国</td>\n<td>高速硬盘以及闪存等 解决方案</td>\n</tr>\n<tr>\n<td>西部数椐</td>\n<td>美国</td>\n<td>创新的存储技术和硬盘产品</td>\n</tr>\n<tr>\n<td>光迅科技</td>\n<td>中国大陆</td>\n<td>光模块</td>\n</tr>\n<tr>\n<td>迅达科技</td>\n<td>美国</td>\n<td>PCB 及相关产品</td>\n</tr>\n<tr>\n<td>新思科技</td>\n<td>美国</td>\n<td>人工智能手机芯片以及软件安全评估</td>\n</tr>\n<tr>\n<td>华工科技</td>\n<td>中国大陆</td>\n<td>5G 光模块</td>\n</tr>\n<tr>\n<td>长飞</td>\n<td>中国大陆</td>\n<td>光纤光缆</td>\n</tr>\n<tr>\n<td>意法半导体</td>\n<td>瑞士</td>\n<td>MCU、MEMS 传感器及 NB-IoT 开发板</td>\n</tr>\n<tr>\n<td>思佳迅</td>\n<td>美国</td>\n<td>射频芯片</td>\n</tr>\n<tr>\n<td>微软</td>\n<td>美国</td>\n<td>翻译技术</td>\n</tr>\n<tr>\n<td>深南电路</td>\n<td>中国大陆</td>\n<td>无线通讯基站用 PCB 在内的各类产品</td>\n</tr>\n<tr>\n<td>新飞通</td>\n<td>美国</td>\n<td>光通讯产品</td>\n</tr>\n<tr>\n<td>Qorvo</td>\n<td>美国</td>\n<td>RF 解决方案</td>\n</tr>\n<tr>\n<td>古河电工</td>\n<td>曰本</td>\n<td>光纤、电线电缆</td>\n</tr>\n<tr>\n<td>瑞声科技</td>\n<td>中国大陆</td>\n<td>声学器件</td>\n</tr>\n<tr>\n<td>联恩电子</td>\n<td>曰本</td>\n<td>光纤接入产品和视频编码器芯片</td>\n</tr>\n<tr>\n<td>Sumicem</td>\n<td>曰本</td>\n<td>UNbO3 调制器</td>\n</tr>\n<tr>\n<td>歌尔股份</td>\n<td>中国大陆</td>\n<td>声学精密零组件和智能硬件</td>\n</tr>\n<tr>\n<td>华通电脑</td>\n<td>中国台湾</td>\n<td>PCB</td>\n</tr>\n<tr>\n<td>三菱电机</td>\n<td>曰本</td>\n<td>电机产品</td>\n</tr>\n<tr>\n<td>三星</td>\n<td>韩国</td>\n<td>OLED 辟幕及内存 / 闪存 产品</td>\n</tr>\n<tr>\n<td>南亚科技</td>\n<td>中国台湾</td>\n<td>存储芯片</td>\n</tr>\n<tr>\n<td>赛普拉斯</td>\n<td>美国</td>\n<td>传感器 (三轴加速度计&gt; 、BST 电容控制器等</td>\n</tr>\n<tr>\n<td>高意</td>\n<td>美国</td>\n<td>光电产品</td>\n</tr>\n<tr>\n<td>Inphl</td>\n<td>美国</td>\n<td>半导体组件和光学子系统</td>\n</tr>\n<tr>\n<td>松下</td>\n<td>曰本</td>\n<td>电子材料、电子元器件、电池、汽车电子设备、工厂和工业自动化设备及方案等</td>\n</tr>\n<tr>\n<td>航嘉</td>\n<td>中国大陆</td>\n<td>消费电源核心</td>\n</tr>\n<tr>\n<td>旺宏电子</td>\n<td>中国台湾</td>\n<td>高端 NOR Flash</td>\n</tr>\n<tr>\n<td>华勒通讯</td>\n<td>中国大陆</td>\n<td>0DM</td>\n</tr>\n<tr>\n<td>台积电</td>\n<td>中国台湾</td>\n<td>晶圆代工</td>\n</tr>\n<tr>\n<td>核达中远通</td>\n<td>中国大陆</td>\n<td>电源及相关祖件</td>\n</tr>\n<tr>\n<td>风河</td>\n<td>美国</td>\n<td>VxWorks 嫌作系统</td>\n</tr>\n<tr>\n<td>亨通光电</td>\n<td>中国大陆</td>\n<td>通信产品及系统解决方案</td>\n</tr>\n<tr>\n<td>曰月光集团</td>\n<td>中国台湾</td>\n<td>封测业务</td>\n</tr>\n<tr>\n<td>联发科</td>\n<td>中国台湾</td>\n<td>低端手机芯片</td>\n</tr>\n<tr>\n<td>蓝思科技</td>\n<td>中国大陆</td>\n<td>玻璃前盖、后盖、摄像头、TP、装饰件等</td>\n</tr>\n<tr>\n<td>中芯国际</td>\n<td>中国大陆</td>\n<td>生产电源管理芯片</td>\n</tr>\n<tr>\n<td>伟创力</td>\n<td>新加坡</td>\n<td>组装业务</td>\n</tr>\n<tr>\n<td>罗森伯格</td>\n<td>德国</td>\n<td>无线射频和光纤通信技术</td>\n</tr>\n<tr>\n<td>伯恩光学</td>\n<td>中国香港</td>\n<td>玻璃盖板</td>\n</tr>\n<tr>\n<td>Lumeotum</td>\n<td>美国</td>\n<td>光学元件</td>\n</tr>\n<tr>\n<td>菲尼萨</td>\n<td>美国</td>\n<td>光器件</td>\n</tr>\n<tr>\n<td>铿腾电子</td>\n<td>美国</td>\n<td>EDA 软件</td>\n</tr>\n<tr>\n<td>博通</td>\n<td>美国</td>\n<td>WIFI+BT 模块、定位中枢芯片、射频天线开关等</td>\n</tr>\n<tr>\n<td>德州仪器</td>\n<td>美国</td>\n<td>DSP 和模拟芯片</td>\n</tr>\n<tr>\n<td>英飞凌</td>\n<td>德国</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "工作",
                "职场",
                "硬件设计",
                "供应商",
                "华为"
            ]
        },
        {
            "id": "https://metal-heart.github.io/posts/27650/",
            "url": "https://metal-heart.github.io/posts/27650/",
            "title": "《Git知识点整理》",
            "date_published": "2022-10-12T02:45:48.000Z",
            "content_html": "<h2 id=\"1-git基本概念\"><a class=\"anchor\" href=\"#1-git基本概念\">#</a> 1. Git 基本概念。</h2>\n<ul>\n<li><code>repository</code></li>\n<li><code>config</code></li>\n<li><code>init</code></li>\n<li><code>clone</code></li>\n<li><code>fetch</code></li>\n<li><code>pull</code></li>\n<li><code>commit</code></li>\n<li><code>push</code></li>\n<li><code>branch</code></li>\n<li><code>head</code></li>\n<li><code>tag</code></li>\n<li><code>merge</code></li>\n<li><code>conflict</code></li>\n<li><code>diff</code></li>\n<li><code>log</code></li>\n<li><code>show</code></li>\n<li><code>status</code></li>\n</ul>\n<h2 id=\"2-git工作空间和文件状态\"><a class=\"anchor\" href=\"#2-git工作空间和文件状态\">#</a> 2. Git 工作空间和文件状态</h2>\n<h3 id=\"1工作空间\"><a class=\"anchor\" href=\"#1工作空间\">#</a> (1). 工作空间</h3>\n<p><img data-src=\"http://blog.chinaunix.net/attachment/201402/19/10415985_139279770639pM.jpg\" alt=\"Git工作空间\" /></p>\n<p>左侧为工作区，右侧为版本库。</p>\n<ul>\n<li>工作区（ <code>Working Directory</code> ） 就是在电脑里能看到的目录，比如 learngit 文件夹就是一个工作区。</li>\n<li>版本库（ <code>Repository</code> ）工作区有一个隐藏目录 <code>.git</code> ，是 Git 的版本库。</li>\n</ul>\n<p>在版本库中标记为 <code>index</code>  的区域为暂存区，标记为 <code>master</code>  的是 Git 为我们自动创建的第一个分支，代表的是目录树。此时 <code>HEAD</code>  实际是指向 <code>master</code>  分支的一个 “游标”，所以图示的命令中出现 HEAD 的地方可以用 <code>master</code>  来替换。图中的 objects 标识的区域为 git 的对象库，实际位于 <code>.git/objects</code>  目录下。</p>\n<ul>\n<li>当对工作区修改（或新增）的文件执行 <code>git add</code>  命令时，暂存区的目录树会被更新，同时工作区修改（或新增）的文件内容会被写入到对象库中的一个新的对象中，而该对象的 id 被记录在暂存区的文件索引中。</li>\n<li>当执行提交操作 <code>git commit</code>  时，暂存区的目录树会写到版本库（对象库）中，master 分支会做相应的更新，即 master 最新指向的目录树就是提交时原暂存区的目录树。</li>\n<li>当执行 <code>git reset HEAD</code>  命令时，暂存区的目录树会被重写，会被 master 分支指向的目录树所替换，但是工作区不受影响。</li>\n<li>当执行 <code>git rm --cached</code>  命令时，会直接从暂存区删除文件，工作区则不做出改变。</li>\n<li>当执行 <code>git checkout .</code>  或 <code>git checkout --</code>  命令时，会用暂存区全部的文件或指定的文件替换工作区的文件。这个操作很危险，会清楚工作区中未添加到暂存区的改动。</li>\n<li>当执行 <code>git checkout HEAD .</code>  或 <code>git checkout HEAD</code>  命令时，会用 HEAD 指向的 master 分支中的全部或部分文件替换暂存区和工作区中的文件。这个命令也是极度危险的。因为不但会清楚工作区中未提交的改动，也会清楚暂存区中未提交的改动。</li>\n</ul>\n<h3 id=\"1文件状态\"><a class=\"anchor\" href=\"#1文件状态\">#</a> (1). 文件状态</h3>\n<p>Git 有三种状态，你的文件可能处于其中之一：<strong>已提交 ( <code>committed</code> )</strong>、<strong>已修改 ( <code>modified</code> )<strong> 和</strong>已暂存 ( <code>staged</code> )</strong>。</p>\n<h2 id=\"3-git配置系统级-全局-当前仓库用户名-邮箱的命令\"><a class=\"anchor\" href=\"#3-git配置系统级-全局-当前仓库用户名-邮箱的命令\">#</a> 3. Git 配置系统级、全局、当前仓库用户名、邮箱的命令</h2>\n<p>系统级、全局、当前仓库选项分别是：仓库 - system、-global、-local (或默认不填)</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">\"Jerry Mouse\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email <span class=\"token string\">\"jerry@yiibai.com\"</span></pre></td></tr></table></figure><p>列出 Git 设置</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--list</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">-l</span></pre></td></tr></table></figure><h2 id=\"4-git-fetch和pull的区别\"><a class=\"anchor\" href=\"#4-git-fetch和pull的区别\">#</a> 4. Git fetch 和 pull 的区别</h2>\n<ul>\n<li><code>git fetch</code> ：相当于是从远程获取最新版本到本地，不会自动 merge.</li>\n<li><code>git pull</code> ：相当于是从远程获取最新版本并 merge 到本地.</li>\n</ul>\n<h3 id=\"1-git-fetch示例\"><a class=\"anchor\" href=\"#1-git-fetch示例\">#</a> (1). git fetch 示例：</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Git fetch origin master</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> log <span class=\"token parameter variable\">-p</span> master<span class=\"token punctuation\">..</span>origin/master</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> merge origin/master</pre></td></tr></table></figure><p>以上命令的含义：</p>\n<ul>\n<li>首先从远程的 <code>origin</code>  的 <code>master</code>  主分支下载最新的版本到 <code>origin/master</code>  分支上</li>\n<li>然后比较本地的 <code>master</code>  分支和 <code>origin/master</code>  分支的差别</li>\n<li>最后进行合并</li>\n<li>上述过程其实可以用以下更清晰的方式来进行：</li>\n</ul>\n<h3 id=\"1-git-pull示例\"><a class=\"anchor\" href=\"#1-git-pull示例\">#</a> (1). git pull 示例：</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> pull origin master</pre></td></tr></table></figure><p>上述命令其实相当于 <code>git fetch</code>  和 <code>git merge</code> 。在实际使用中， <code>git fetch</code>  更安全一些，因为在 merge 前，我们可以查看更新情况，然后再决定是否合并。</p>\n<h2 id=\"5-git-reset和revert的却别\"><a class=\"anchor\" href=\"#5-git-reset和revert的却别\">#</a> 5. Git reset 和 revert 的却别</h2>\n<ul>\n<li><code>git revert</code>  是用一次新的 commit 来回滚之前的 commit， <code>git reset</code>  是直接删除指定的 commit。</li>\n<li>在回滚这一操作上看，效果差不多。但是在日后继续 merge 以前的老版本时有区别。因为 <code>git revert</code>  是用一次逆向的 commit “中和” 之前的提交，因此日后合并老的 branch 时，导致这部分改变不会再次出现，但是 <code>git reset</code>  是之间把某些 commit 在某个 branch 上删除，因而和老的 branch 再次 merge 时，这些被回滚的 commit 应该还会被引入。</li>\n<li><code>git reset</code>  是把 HEAD 向后移动了一下，而 <code>git revert</code>  是 HEAD 继续前进，只是新的 commit 的内容和要 revert 的内容正好相反，能够抵消要被 revert 的内容。</li>\n<li>git revert 与 git reset 最大的不同是，git revert 仅仅是撤销某次提交。</li>\n</ul>\n<p>另外，说一下 <code>git revert</code> ，  <code>git reset –hard</code>  和  <code>–soft</code>  的区别</p>\n<ul>\n<li><code>git reset –mixed id</code> : 是将 git 的 HEAD 变了（也就是提交记录变了），但文件并没有改变，（也就是 working tree 并没有改变）。</li>\n<li><code>git reset –soft id</code> : 实际上，是 <code>git reset –mixed id</code>  后，又做了一次 <code>git add</code> 。</li>\n<li><code>git reset –herd id</code> : 是将 git 的 HEAD 变了，文件也变了。</li>\n</ul>\n<h2 id=\"6-git-merge和reabse的相同点和不同点\"><a class=\"anchor\" href=\"#6-git-merge和reabse的相同点和不同点\">#</a> 6. Git merge 和 reabse 的相同点和不同点</h2>\n<p><code>merge</code>  是合并的意思， <code>rebase</code>  是复位基底的意思，相同点都是用来合并分支的。</p>\n<p><img data-src=\"http://images2015.cnblogs.com/blog/759200/201608/759200-20160806092734215-279978821.png\" alt=\"merge和rebase\" /></p>\n<p>不同点:</p>\n<ul>\n<li><code>merge</code>  操作会生成一个新的节点，之前的提交分开显示。而 <code>rebase</code>  操作不会生成新的节点，是将两个分支融合成一个线性的提交。</li>\n<li>解决冲突时。merge 操作遇到冲突的时候，当前 merge 不能继续进行下去。手动修改冲突内容后，add 修改，commit 就可以了。而 <code>rebase</code>  操作的话，会中断 rebase, 同时会提示去解决冲突。解决冲突后，将修改 add 后执行 <code>git rebase –continue</code>  继续操作，或者 <code>git rebase –skip</code>  忽略冲突。</li>\n<li><code>git pull</code>  和 <code>git pull --rebase</code>  区别： <code>git pull</code>  做了两个操作分别是 &quot;获取&quot; 和 &quot;合并&quot;。所以加了 rebase 就是以 rebase 的方式进行合并分支，默认为 merge。</li>\n</ul>\n<p><strong>总结</strong>：选择 merge 还是 rebase？</p>\n<ul>\n<li>merge 是一个合并操作，会将两个分支的修改合并在一起，默认操作的情况下会提交合并中修改的内容</li>\n<li>merge 的提交历史忠实地记录了实际发生过什么，关注点在真实的提交历史上面</li>\n<li>rebase 并没有进行合并操作，只是提取了当前分支的修改，将其复制在了目标分支的最新提交后面</li>\n<li>rebase 的提交历史反映了项目过程中发生了什么，关注点在开发过程上面</li>\n<li>merge 与 rebase 都是非常强大的分支整合命令，没有优劣之分，使用哪一个应由项目和团队的开发需求决定</li>\n<li>merge 和 rebase 还有很多强大的选项，可以使用 git help &lt;command&gt; 查看</li>\n</ul>\n<h2 id=\"7-git-stash是什么它的相关使用方式命令\"><a class=\"anchor\" href=\"#7-git-stash是什么它的相关使用方式命令\">#</a> 7. Git stash 是什么？它的相关使用方式命令</h2>\n<ul>\n<li>git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到 Git 栈中。</li>\n<li>git stash pop: 从 Git 栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个 Stash 的内容，所以用栈来管理，pop 会从最近的一个 stash 中读取内容并恢复。</li>\n<li>git stash pop --index stash@{0}: 恢复编号为 0 的进度的工作区和暂存区。</li>\n<li>git stash apply stash@{1} 以将你指定版本号为 stash@{1} 的工作取出来</li>\n<li>git stash drop [&lt;stash&gt;] 删除某一个进度，默认删除最新进度</li>\n<li>git stash list: 显示 Git 栈内的所有备份，可以利用这个列表来决定从那个地方恢复。</li>\n<li>git stash clear: 清空 Git 栈。此时使用 gitg 等图形化工具会发现，原来 stash 的哪些节点都消失了</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 恢复工作进度</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> stash pop <span class=\"token punctuation\">[</span>--index<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>stash<span class=\"token operator\">></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token parameter variable\">--index</span> 参数：不仅恢复工作区，还恢复暂存区</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>stash<span class=\"token operator\">></span> 指定恢复某一个具体进度。如果没有这个参数，默认恢复最新进度</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 这是 git stash 保存进度的完整命令形式</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">git</span> stash <span class=\"token punctuation\">[</span>save message<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-k<span class=\"token operator\">|</span>--no-keep-index<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>--patch<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-k和--no-keep-index指定保存进度后，是否重置暂存区</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token parameter variable\">--patch</span> 会显示工作区和HEAD的差异,通过编辑差异文件，排除不需要保存的内容。和git <span class=\"token function\">add</span> -p命令类似</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>使用save可以对进度添加备注</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># git stash save \"这是保存的进度\"</span></pre></td></tr></table></figure><h2 id=\"8-git只从暂存区删除从工作空间删除的命令分别是什么\"><a class=\"anchor\" href=\"#8-git只从暂存区删除从工作空间删除的命令分别是什么\">#</a> 8. Git 只从暂存区删除，从工作空间删除的命令分别是什么？</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">--cached</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">rm</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> commit</pre></td></tr></table></figure><h2 id=\"9-git标签的使用\"><a class=\"anchor\" href=\"#9-git标签的使用\">#</a> 9. Git 标签的使用</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 列出现有的标签</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> tag</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 打标签</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> tag <span class=\"token parameter variable\">-a</span> v1.01 <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Relase version 1.01\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 查看相应标签的版本信息</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">git</span> show v1.4</pre></td></tr></table></figure><ul>\n<li>-a 选项，创建一个含附注类型的标签</li>\n<li>-m 选项，指定了对应的标签说明</li>\n</ul>\n<h2 id=\"9-git分支的使用\"><a class=\"anchor\" href=\"#9-git分支的使用\">#</a> 9. Git 分支的使用</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看本地分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> branch</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 查看远程分支</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-r</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 创建本地分支 (注意新分支创建后不会自动切换为当前分支)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 切换分支</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">git</span> checkout <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 创建新分支并立即切换到新分支</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 强制删除一个分支</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-D</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 合并分支 (将名称为 [name] 的分支与当前分支合并)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">git</span> merge <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># 查看各个分支最后提交信息</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token function\">git</span> br <span class=\"token parameter variable\">-v</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># 查看已经被合并到当前分支的分支</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token function\">git</span> br <span class=\"token parameter variable\">--merged</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\"># 查看尚未被合并到当前分支的分支</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token function\">git</span> br --no-merged</pre></td></tr></table></figure><h2 id=\"10-介绍git冲突处理经验以及merge和rebase中的ours和theirs的差别\"><a class=\"anchor\" href=\"#10-介绍git冲突处理经验以及merge和rebase中的ours和theirs的差别\">#</a> 10. 介绍 Git 冲突处理经验，以及 merge 和 rebase 中的 ours 和 theirs 的差别。</h2>\n<p>merge 和 rebase 对于 ours 和 theirs 的定义是完全相反的。在 merge 时，ours 指代的是当前分支，theirs 代表需要被合并的分支。而在 rebase 过程中，ours 指向了修改参考分支，theirs 却是当前分支。因为 rebase 隐含了一个 <code>git checkout upstream</code>  的过程，将 <code>HEAD</code>  从 local 分支变成了 upstream 分支。git 会在 rebase 结束后撤销这个改变，但它已经不可避免地影响了冲突的状态，使 rebase 中 ours 和 theirs 的定义与 merge 截然相反。因此，在使用 ours 与 theirs 时请格外小心。</p>\n<h2 id=\"11-git远程操作相关\"><a class=\"anchor\" href=\"#11-git远程操作相关\">#</a> 11. Git 远程操作相关</h2>\n<h3 id=\"1-clone\"><a class=\"anchor\" href=\"#1-clone\">#</a> (1). clone</h3>\n<blockquote>\n<p>git clone &lt;版本库的网址&gt;<br />\ngit clone &lt;版本库的网址&gt; &lt; 本地目录名 &gt;</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 克隆 jQuery 的版本库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token function\">git</span> clone https://github.com/jquery/jquery.git</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token function\">git</span> clone <span class=\"token parameter variable\">-o</span> jQuery https://github.com/jquery/jquery.git</pre></td></tr></table></figure><h3 id=\"2-remote\"><a class=\"anchor\" href=\"#2-remote\">#</a> (2). remote</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 列出所有远程主机</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> remote</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 使用 - v 选项，可以参看远程主机的网址</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> remote <span class=\"token parameter variable\">-v</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 可以查看该主机的详细信息</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">git</span> remote show <span class=\"token operator\">&lt;</span>主机名<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 添加远程主机</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> <span class=\"token operator\">&lt;</span>主机名<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>网址<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 删除远程主机</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">git</span> remote <span class=\"token function\">rm</span> <span class=\"token operator\">&lt;</span>主机名<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 修改远程主机名称</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">git</span> remote <span class=\"token function\">rename</span> <span class=\"token operator\">&lt;</span>原主机名<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>新主机名<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"3-fetch\"><a class=\"anchor\" href=\"#3-fetch\">#</a> (3). fetch</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 取回所有分支 (branch) 的更新到本地</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> fetch <span class=\"token operator\">&lt;</span>远程主机名<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 取回某的特定分支的更新</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> fetch <span class=\"token operator\">&lt;</span>远程主机名<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>分支名<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 取回 origin 主机的 master 分支的更新</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">git</span> fetch origin master</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 所取回的更新，在本地主机上要用” 远程主机名 / 分支名” 的形式读取。比如 origin 主机的 master，就要用 origin/master 读取。可以使用 git merge 命令或者 git rebase 命令，在本地分支上合并远程分支</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">git</span> merge origin/master</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">git</span> rebase origin/master</pre></td></tr></table></figure><h3 id=\"4-pull\"><a class=\"anchor\" href=\"#4-pull\">#</a> (4). pull</h3>\n<blockquote>\n<p>git pull &lt;远程主机名&gt; &lt; 远程分支名 &gt;:&lt; 本地分支名 &gt;</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 取回 origin 主机的 next 分支，与本地的 master 分支合并</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> pull origin next:master</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> pull origin next</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 上面的命令实质上等同于先做 git fetch，再做 git merge。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">git</span> fetch origin</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">git</span> merge origin/next</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 合并需要采用 rebase 模式</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">git</span> pull <span class=\"token parameter variable\">--rebase</span> <span class=\"token operator\">&lt;</span>远程主机名<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>远程分支名<span class=\"token operator\">></span>:<span class=\"token operator\">&lt;</span>本地分支名<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"5-push\"><a class=\"anchor\" href=\"#5-push\">#</a> (5). push</h3>\n<blockquote>\n<p>git push &lt;远程主机名&gt; &lt; 本地分支名 &gt;:&lt; 远程分支名 &gt;</p>\n</blockquote>\n<p><strong>注意</strong>：分支推送顺序的写法是 &quot;&lt;来源地&gt;:&lt; 目的地 &gt;&quot;，所以 git pull 是 &quot;&lt; 远程分支 &gt;:&lt; 本地分支 &gt;&quot;，而 git push 是 &quot;&lt; 本地分支 &gt;:&lt; 远程分支 &gt;&quot;。</p>\n<ul>\n<li>如果省略远程分支名，则表示将本地分支推送与之存在” 追踪关系” 的远程分支 (通常两者同名)，如果该远程分支不存在，则会被新建。</li>\n<li>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 将本地的 master 分支推送到 origin 主机的 master 分支。如果后者不存在，则会被新建</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> push origin master</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 省略了本地分支，以下等同，删除 origin 主机的 master 分支</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> push origin :master</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">git</span> push origin <span class=\"token parameter variable\">--delete</span> master</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">git</span> push origin</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 如果当前分支只有一个追踪分支，那么主机名都可以省略。</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">git</span> push</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 如果当前分支与多个主机存在追踪关系，则可以使用 - u 选项指定一个默认主机，这样后面就可以不加任何参数使用 git push</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin master</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token parameter variable\">--all</span> origin</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 强制推送</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token parameter variable\">--force</span> origin</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># git push 不会推送标签 (tag)，除非使用–tags 选项</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token function\">git</span> push origin <span class=\"token parameter variable\">--tags</span></pre></td></tr></table></figure><h2 id=\"12-git-flow使用简介\"><a class=\"anchor\" href=\"#12-git-flow使用简介\">#</a> 12. Git Flow 使用简介</h2>\n<p>就像代码需要代码规范一样，代码管理同样需要一个清晰的流程和规范。三种广泛使用的工作流程：</p>\n<ul>\n<li>Git flow</li>\n<li>Github flow</li>\n<li>Gitlab flow</li>\n</ul>\n<p>三种工作流程，有一个共同点：都采用 &quot;功能驱动式开发&quot;（Feature-driven development，简称 FDD）。它指的是，需求是开发的起点，先有需求再有功能分支（feature branch）或者补丁分支（hotfix branch）。完成开发后，该分支就合并到主分支，然后被删除。最早诞生、并得到广泛采用的一种工作流程，就是<span class=\"exturl\" data-url=\"aHR0cDovL252aWUuY29tL3Bvc3RzL2Etc3VjY2Vzc2Z1bC1naXQtYnJhbmNoaW5nLW1vZGVsLw==\"> Git flow</span>。</p>\n<p>它最主要的特点有两个。首先，项目存在两个长期分支，分别是：主分支 master、开发分支 develop。其次，项目存在三种短期分支，分别是：功能分支（feature branch）、补丁分支（hotfix branch）、预发分支（release branch），一旦完成开发，它们就会被合并进 develop 或 master，然后被删除。</p>\n<h3 id=\"1-git-flow流程图\"><a class=\"anchor\" href=\"#1-git-flow流程图\">#</a> (1). Git Flow 流程图</h3>\n<p><img data-src=\"https://statics.sh1a.qingstor.com/2018/09/24/imagegit-flow.png\" alt=\"Git Flow流程图\" /></p>\n<h3 id=\"2-git-flow常用的分支\"><a class=\"anchor\" href=\"#2-git-flow常用的分支\">#</a> (2). Git Flow 常用的分支</h3>\n<ul>\n<li><code>Production</code>  分支。也就是我们经常使用的 Master 分支，这个分支最近发布到生产环境的代码，最近发布的 Release， 这个分支只能从其他分支合并，不能在这个分支直接修改。</li>\n<li><code>Develop</code>  分支。这个分支是我们是我们的主开发分支，包含所有要发布到下一个 Release 的代码，这个主要合并与其他分支，比如 Feature 分支。</li>\n<li><code>Feature</code>  分支。这个分支主要是用来开发一个新的功能，一旦开发完成，我们合并回 Develop 分支进入下一个 Release。</li>\n<li><code>Release</code>  分支。当你需要一个发布一个新 Release 的时候，我们基于 Develop 分支创建一个 Release 分支，完成 Release 后，我们合并到 Master 和 Develop 分支。</li>\n<li><code>Hotfix</code>  分支。当我们在 Production 发现新的 Bug 时候，我们需要创建一个 Hotfix, 完成 Hotfix 后，我们合并回 Master 和 Develop 分支，所以 Hotfix 的改动会进入下一个 Release。</li>\n</ul>\n<h3 id=\"3-git-flow代码示例\"><a class=\"anchor\" href=\"#3-git-flow代码示例\">#</a> (3). Git Flow 代码示例</h3>\n<h4 id=\"a-创建develop分支\"><a class=\"anchor\" href=\"#a-创建develop分支\">#</a> a. 创建 develop 分支</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> branch develop</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin develop</pre></td></tr></table></figure><h4 id=\"b-开始新feature开发\"><a class=\"anchor\" href=\"#b-开始新feature开发\">#</a> b. 开始新 Feature 开发</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> some-feature develop</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># Optionally, push branch to origin:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin some-feature</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 做一些改动</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">git</span> status</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> some-file</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">git</span> commit</pre></td></tr></table></figure><h4 id=\"c-完成feature\"><a class=\"anchor\" href=\"#c-完成feature\">#</a> c. 完成 Feature</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> pull origin develop</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> checkout develop</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> merge --no-ff some-feature</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> push origin develop</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-d</span> some-feature</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># If you pushed branch to origin:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">git</span> push origin <span class=\"token parameter variable\">--delete</span> some-feature</pre></td></tr></table></figure><h4 id=\"d-开始relase\"><a class=\"anchor\" href=\"#d-开始relase\">#</a> d. 开始 Relase</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> release-0.1.0 develop</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># Optional: Bump version number, commit</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># Prepare release, commit</span></pre></td></tr></table></figure><h4 id=\"e-完成release\"><a class=\"anchor\" href=\"#e-完成release\">#</a> e. 完成 Release</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> checkout master</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> merge --no-ff release-0.1.0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> push</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> checkout develop</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">git</span> merge --no-ff release-0.1.0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">git</span> push</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-d</span> release-0.1.0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># If you pushed branch to origin:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">git</span> push origin <span class=\"token parameter variable\">--delete</span> release-0.1.0   </pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">git</span> tag <span class=\"token parameter variable\">-a</span> v0.1.0 master</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token parameter variable\">--tags</span></pre></td></tr></table></figure><h4 id=\"f-开始hotfix\"><a class=\"anchor\" href=\"#f-开始hotfix\">#</a> f. 开始 Hotfix</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> hotfix-0.1.1 master</pre></td></tr></table></figure><h4 id=\"g-完成hotfix\"><a class=\"anchor\" href=\"#g-完成hotfix\">#</a> g. 完成 Hotfix</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> checkout master</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> merge --no-ff hotfix-0.1.1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> push</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> checkout develop</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">git</span> merge --no-ff hotfix-0.1.1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">git</span> push</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-d</span> hotfix-0.1.1</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">git</span> tag <span class=\"token parameter variable\">-a</span> v0.1.1 master</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token parameter variable\">--tags</span></pre></td></tr></table></figure>",
            "tags": [
                "工具",
                "Git",
                "LINUX",
                "SOFTWARE",
                "GIT",
                "软件工具"
            ]
        },
        {
            "id": "https://metal-heart.github.io/posts/5924/",
            "url": "https://metal-heart.github.io/posts/5924/",
            "title": "话术",
            "date_published": "2022-07-11T01:12:29.000Z",
            "content_html": "<h1 id=\"话术\"><a class=\"anchor\" href=\"#话术\">#</a> 话术</h1>\n<h2 id=\"职场黑话\"><a class=\"anchor\" href=\"#职场黑话\">#</a> 职场 “黑话”</h2>\n<h3 id=\"二字动词\"><a class=\"anchor\" href=\"#二字动词\">#</a> 二字动词</h3>\n<p>复盘，赋能，加持，沉淀，倒逼，落地，串联，协同，反哺，兼容，包装，重组，履约，响应，量化，布局，联动，细分，梳理，输出，加速，共建，支撑，融合，聚合，集成，对标，聚焦，抓手，拆解，抽象，摸索，提炼，打通，打透，吃透，迁移，分发，分装，辐射，围绕，复用，渗透，扩展，开拓，皮实，共创，共建，解耦，集成，对齐，拉齐，对焦，给到，拿到，死磕</p>\n<h3 id=\"三字名词\"><a class=\"anchor\" href=\"#三字名词\">#</a> 三字名词</h3>\n<p>感知度，方法论，组合拳，引爆点，点线面，精细化，差异化，平台化，结构化，影响力，耦合性，便捷性，一致性，端到端，短平快，护城河，体验感，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3NlYXJjaD9xPSVFOSVBMiU5NyVFNyVCMiU5MiVFNSVCQSVBNiZhbXA7c2VhcmNoX3NvdXJjZT1FbnRpdHkmYW1wO2h5YnJpZF9zZWFyY2hfc291cmNlPUVudGl0eSZhbXA7aHlicmlkX3NlYXJjaF9leHRyYT0lN0IlMjJzb3VyY2VUeXBlJTIyJTNBJTIyYW5zd2VyJTIyJTJDJTIyc291cmNlSWQlMjIlM0EyMjcyMDA1MjY3JTdE\">颗粒度</span></p>\n<h3 id=\"四字名词\"><a class=\"anchor\" href=\"#四字名词\">#</a> 四字名词</h3>\n<p>生命周期，价值转化，强化认知，资源倾斜，完善逻辑，抽离透传，复用打法，商业模式，快速响应，定性定量，关键路径，去中心化，结果导向，垂直领域，归因分析，体验度量，信息屏障，资源整合</p>\n<h3 id=\"术语应用\"><a class=\"anchor\" href=\"#术语应用\">#</a> 术语应用</h3>\n<p>比如原来你提问：这个问题你准备怎么解决？</p>\n<p>现在的你可以说：你这个问题的底层逻辑是什么？顶层设计在哪？最终交付价值是什么？过程的抓手在哪？如何保证回答闭环？你比别人的亮点在哪？优势在哪？你的思考和沉淀是什么？这个问题换成我来问是否会不一样？在这之前，有自己的思考和沉淀吗？这些问题的颗粒度是怎样拆分的，能作为爆点，引发回答者对问题关键路径的探索吗？别人回答了，你能反哺赋能他们，共建团队意识生态吗？只会问而不会解决，你有自己独有的价值吗？</p>\n<p>比如你之前只会一脸懵逼的看着他，愣着不敢说话，现在你可以这么回复他：</p>\n<p>我们这款产品底层逻辑是打通信息屏障，创建行业新生态。顶层设计是聚焦用户感知赛道，通过差异化和颗粒度达到引爆点。交付价值是在垂直领域采用复用打法达成持久收益。抽离透传归因分析作为抓手为产品赋能，体验度量作为闭环的评判标准。亮点是载体，优势是链路。思考整个生命周期，完善逻辑考虑资源倾斜。方法论是组合拳达到平台化标准。</p>\n<h2 id=\"模板\"><a class=\"anchor\" href=\"#模板\">#</a> 模板</h2>\n<h3 id=\"yes-and-法则\"><a class=\"anchor\" href=\"#yes-and-法则\">#</a> yes and 法则</h3>\n<p>当别人提出一个观点，自己不认同时，我们往往会说，yes，but，这样别人会觉得 “那就这样吧，你说什么就是什么吧” 的想法，无法形成有效的沟通。</p>\n<p>yes-and 的原则首先是要接纳，而不是全身都是刺，即当别人提出观点的时候还没仔细思考就先给予否定，尤其当对方不认可攻击你时，很多人立马想到的就是反击。</p>\n<p>然后关键是这里的 and，这里的 and 并不是转折或反驳，而是并且或附加的内容，可以巧妙地避免意见不同甚至冲突，所以 yes-and 不仅仅是做事方式，也是一种特别好的沟通方式，让对方感受很舒服。</p>\n<p>【示例】</p>\n<p>男朋友特别喜欢爬山，有一天男朋友邀请女生去爬山，女生说了下面的一段话 &quot;我不爱爬上，但是我特别好奇你到山顶后看到的风景，你能爬上去之后能给我拍几样张照片吗？专门为我拍的，然后你下来以后，我在哪个咖啡馆等你，你跟我讲讲此次的经历！&quot;</p>\n<p>可以听出来，这位女生并不爱爬山，也没有勉强自己去迎合新的男朋友，而是肯定了男朋友的爱好，并且在此基础上创造了新的情景来继续他们的交流！</p>\n<h3 id=\"prep-模型\"><a class=\"anchor\" href=\"#prep-模型\">#</a> PREP 模型</h3>\n<blockquote>\n<p>PREP 模型用于<strong>表达观点</strong>。</p>\n</blockquote>\n<p>PREP 四个英文字母分别代表：Point，观点；Reason，理由；Example，案例；Point，再次讲观点。这是最经典的表达结构。</p>\n<p>整个 PREP 结构的关键是，开始就要讲出你的观点，点明主题；后面再举出理由来论证观点；案例部分，最好讲自己的经历或故事来解释，这样听众比较容易听懂；最后再重复和强调一下你的观点。</p>\n<h3 id=\"scq-a-模型\"><a class=\"anchor\" href=\"#scq-a-模型\">#</a> SCQ-A 模型</h3>\n<blockquote>\n<p>SCQ-A 模型 用于<strong>提出问题，请求帮助</strong>。</p>\n</blockquote>\n<ul>\n<li><strong>situation</strong>：阐述背景</li>\n<li><strong>conflict</strong>：阐述冲突</li>\n<li><strong>question</strong>：为了解决冲突，你提出要解决的问题</li>\n<li><strong>answer</strong>：你的看法</li>\n</ul>\n<p>【示例】</p>\n<p>老板，最近竞争对手上任了新的 CEO，做了一系列措施，比如下调了产品的价格，增大推广和营销，导致现在我们的很多市场被对方蚕食了。</p>\n<p>我们现在该如何调整应应对当前的情况，保持市场上的领导位置。</p>\n<p>目前我的看法就是优化目前的营销渠道，全面包围对手。</p>\n<h3 id=\"ffc-赞美法则\"><a class=\"anchor\" href=\"#ffc-赞美法则\">#</a> FFC 赞美法则</h3>\n<p>所谓 FFC 赞美法，就是指在赞美人的时候，先用自己的语言来表达感受（Feel），然后再进一步通过陈述事实（Fact）来论证自己的感受，最后再通过比较（Compare），来加深对对方的认可，这样对方会感觉特别好。</p>\n<h3 id=\"让对方服从你行为的经典话术\"><a class=\"anchor\" href=\"#让对方服从你行为的经典话术\">#</a> 让对方服从你行为的经典话术</h3>\n<p>这个话术一般来讲模板是这样的： 是.. 还是.../ 是否 / 要不要，xxx 好处是这样。</p>\n<p>这里的关键是尽量不让用户思考，提供非 A 即 B 的选项，说某个选项的好处，从而让对方服从你。</p>\n<p>比如麦当劳、肯德基有 3 个经典话术，进行快推式产品营销：</p>\n<ul>\n<li>您是否要加一包薯条，这样可以凑成一个套餐，节省 2 元？（实际上多消费 5 元）</li>\n<li>您要不要加 3 元把可乐换成大杯，可以多一半哦？</li>\n<li>您要不要加 10 元买个玩具给小朋友呢？</li>\n</ul>\n<h3 id=\"沟通中的万能表达模型-观察感受需求请求\"><a class=\"anchor\" href=\"#沟通中的万能表达模型-观察感受需求请求\">#</a> 沟通中的万能表达模型 - 观察 + 感受 + 需求 + 请求</h3>\n<ul>\n<li>观察：即你观察的客观事实是什么？注意这里要是事实才行</li>\n<li>感受：通过观察之后，你心情感受是怎样的？</li>\n<li>需求：你内心希望要解决的问题是什么？</li>\n<li>请求：向对方请求你的需求需要得到满足</li>\n</ul>\n<h3 id=\"ffa-法则\"><a class=\"anchor\" href=\"#ffa-法则\">#</a> FFA 法则</h3>\n<ul>\n<li>Fact—— 事实</li>\n<li>Feeling—— 感受</li>\n<li>Action—— 行动</li>\n</ul>\n<p>最近一段团队不少新人加入，整体运营效率下降了 30%。（事实）我感觉主要是业务知识传递有些跟不上。（感受）接下来的一周，我会安排老员工一对一辅导每位新人。（行动）</p>\n<h2 id=\"实战\"><a class=\"anchor\" href=\"#实战\">#</a> 实战</h2>\n<p><strong>别人求你办事，如果你说：“这事儿不太好办”，那么资源置换就来了。</strong></p>\n<p>不好办说明能办，但需要附加条件，懂的人自然知道接下来应该怎么办。</p>\n<p><strong>拒绝借钱：“你知道的，我最近 XX，也没钱。”</strong></p>\n<p>遇到借钱，只要你平时不太露富，就好用。</p>\n<p>朋友管你借钱，用 “你知道的” 直接把皮球踢回去，再给个具体理由，比如买了什么东西、投入基金股票里了，随便什么都行。</p>\n<p>只要把对方放在知道你没钱的位置上，他就不好再开下一句口，一般会主动结束对话。</p>\n<p><strong>表示体贴，但不想真的去接客户，先打电话沟通：“约的地方有点远，需要我去接您吗？”</strong></p>\n<p>绝大部分人遇到这样的问句，本能反应是不用，你的目的就达到了。</p>\n<p>不过如果真遇到要你接的，这人多半有点矫情，以后相处要注意多恭维一下。</p>\n<p><strong>经典汇报话术 1：“老板，我们团队做了 A、B 两版方案，各有优势，您给提提意见，看选哪个好。”</strong></p>\n<p>该话术利用了沉锚效应，抛出了二者选其一的锚，避开全部拒绝的选项，引导领导 “选一个”、“提意见”，减小被全部驳回的风险。</p>\n<p><strong>经典汇报话术 2：“领导，我是这么想的，XXX。第一，X；第二，X；第三，X。”</strong></p>\n<p>我们的大脑被训练得听到 “第一、第二” 就默认为其中有条理、有逻辑，不管其中是不是真的严丝合缝地支撑你的观点。善用一二三做汇报，领导会觉得你准备得很充分，考虑周全。</p>\n<p><strong>遇到问题请求领导帮忙：“经过了解，现在碰到了一些情况，我的解决办法是 XX，您看还有没有什么更好的办法。”</strong></p>\n<p>不要直接说自己解决不了，让领导想办法。不管自己提出的办法多平庸，都一定要提。</p>\n<p><strong>请求他人帮忙：“能请你帮我打印一下文件吗，因为我一会儿真有事。”、“不好意思，能插一下队吗，因为我真的着急。”</strong></p>\n<p>善用 “因为所以”，“因为所以” 是十几年语文教学留给我们的条件反射，不管多离奇的理由，听到的时候都会默认有道理。</p>\n<p><strong>聊天想聊下去：揪住对方句子里的关键词 + 延伸过往彼此交流过的信息。</strong></p>\n<blockquote>\n<p><strong>例 1</strong></p>\n<p>朋友：“今天又加班，烦死了。”</p>\n<p>你：“怎么又加班啊，又是上回让你加班的那个领导吗？”</p>\n<p><strong>例 2</strong></p>\n<p>闺蜜：“我爱豆塌房子了！”</p>\n<p>你：“哪个爱豆？上回你说的 XXX？我去！”</p>\n</blockquote>\n<p><strong>聊天不想继续聊下去：重复关键词 +<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3NlYXJjaD9xPSVFNiU4NCU5RiVFNSU4RiVCOSVFOCVBRiU4RCZhbXA7c2VhcmNoX3NvdXJjZT1FbnRpdHkmYW1wO2h5YnJpZF9zZWFyY2hfc291cmNlPUVudGl0eSZhbXA7aHlicmlkX3NlYXJjaF9leHRyYT0lN0IlMjJzb3VyY2VUeXBlJTIyJTNBJTIyYW5zd2VyJTIyJTJDJTIyc291cmNlSWQlMjIlM0ExNzkxNTU2MzQzJTdE\"> 感叹词</span>。重点！不要扩展任何有效信息。</strong></p>\n<blockquote>\n<p><strong>例 1</strong></p>\n<p>朋友：“今天又加班，烦死了”</p>\n<p>你：“怎么又加班啊，唉，这叫啥事啊，我无语。”</p>\n<p><strong>例 2</strong></p>\n<p>闺蜜：“我爱豆又塌房子了！”</p>\n<p>你：“又塌房子！我去，也太那个了，绝了！”</p>\n</blockquote>\n<p><strong>领导说：“辛苦了。”</strong></p>\n<p><strong>你：“从中学到很多，很有收获。”</strong></p>\n<p>敏而好学、不居功，领导更喜欢这样的下属。</p>\n<p><strong>给领导的节日问候：尊称 + 感谢 + 互动 + 祝福</strong></p>\n<p>尊称放在前面，引起注意。互动要具体、细节，才有记忆点。</p>\n<blockquote>\n<p>XX，过年好！<br />\n感谢您一直的关照，从您身上学到很多。</p>\n<p>上次 XX，您说 XXX 我一直记得，受益匪浅。</p>\n<p>又到新的一年，祝您和家人新年快乐！</p>\n</blockquote>\n<p><strong>改变一个人的想法：认同立场，替换观点。</strong></p>\n<p>无论任何人，观点不是不可改变的，但立场很难动摇。</p>\n<p>比如你的预算交上去，被砍了很大一块，你能做的不是抱怨老板抠门，而是认同老板砍预算是为了控制成本，<strong>开公司是为了赚钱的，这就是老板该有的立场。</strong></p>\n<p>所以，如果你不想自己的预算被砍掉，只有你能向老板展示，你做的方案能为他赚更多钱，老板就不会不同意。</p>\n<h3 id=\"工作汇报\"><a class=\"anchor\" href=\"#工作汇报\">#</a> 工作汇报</h3>\n<table>\n<thead>\n<tr>\n<th>实情</th>\n<th>话术</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>新项目玩砸了</td>\n<td>进行了积极的试错，吸收了宝贵的经验。</td>\n</tr>\n<tr>\n<td>数据不好看</td>\n<td>有较大的增长空间</td>\n</tr>\n<tr>\n<td>啥也没干</td>\n<td>稳定发展</td>\n</tr>\n<tr>\n<td>接下来，我依旧打算啥也不干</td>\n<td>保持现有成绩，稳定成果</td>\n</tr>\n<tr>\n<td>数据稍微好看一点</td>\n<td>取得了较大增长</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"沟通\"><a class=\"anchor\" href=\"#沟通\">#</a> 沟通</h3>\n<p><strong>当你觉得对方特别啰嗦，又不好意思打断对方谈话</strong></p>\n<p>直接给对方说的话下定义，作评判。例如：“好的”、“那确实不错”、“的确是这样”、“嗯，你说的对” 等等。</p>\n<p>对方会瞬间失去表达欲望。</p>\n<p><strong>当你接到你不想做的任务时</strong></p>\n<ul>\n<li>我仔细看了一下这个需求，我这里可能存在 XXX XXX XXX 方面的短板</li>\n<li>“领导，我仔细看了一下这个需求，我这里可能存在 XXX XXX XXX 方面的短板”</li>\n<li>“想要推进这件事情的话，我可能需要 XXX XXX XXX 方面的支持”</li>\n</ul>\n<p>好的可能：领导感觉你是认真经过调研，分析了可行性，确实你不太适合，他表示会再考虑考虑</p>\n<p>坏的可能：你还是得做，但是这句话的意思已经很明确了：我可是给你说清楚了啊，这件事办砸了，你可不能赖我</p>\n<p><strong>当我想刺探什么秘密的时候，我会先说一个结论，然后看对方的反应</strong></p>\n<ul>\n<li>“我们公司下个月要发奖金你知道对吧，想好怎么花了么？”\n<ul>\n<li>“卧槽你这消息灵通啊”—— 真的要发</li>\n<li>“你听谁说的”—— 不知道真假，但是可以继续测</li>\n</ul>\n</li>\n<li>这个时候我会再补一句：“我能得到这个消息，说明肯定有人放风给我”\n<ul>\n<li>“胡扯，没有这个规划”—— 下个月不发奖金</li>\n<li>“你每天花花肠子怎么这么多”—— 没有明确的回应这个问题，我的猜测 80% 是真实的</li>\n</ul>\n</li>\n</ul>\n<p><strong>临时要交什么汇报，或者做工作总结的时候，不要紧张</strong></p>\n<p>【你日常都在做什么】+【这件事的目的是什么】+【你在做这件事的时候有什么困难】+【怎么把这件事做的更好】</p>\n<p>比如：</p>\n<p>我最近在更新我的知乎账号，坚持回答问题，这是为了能够积累更多的粉丝数，获得更多的认同，也培养自己输出的习惯</p>\n<p>但是我发现我的阅读量上去了，但是点赞量还没有起来</p>\n<p>所以我决定在写到这一段的时候给读者老爷们磕个头求个赞，哐哐哐</p>\n<p><strong>想要说服别人的时候</strong></p>\n<p>注意两点：</p>\n<ul>\n<li>\n<p>先肯定对方的想法</p>\n</li>\n<li>\n<p>尽量不要出现比较主观的用语，如：“我觉得”、“照我看”、“我认为”</p>\n</li>\n</ul>\n<p>【示例】我仔细听了你的诉求，很有道理，这个需求是可以理解的。但是，我们换个角度想一想：......。而且，我还听别人说：.....。所以，不妨折中一下：.....。你觉得这样如何呢？</p>\n<p>当别人给你布置杂活的时候</p>\n<p>我们要死扣细节，不停问细节：</p>\n<ul>\n<li>\n<p>“你说的这件事大概什么时候需要？”</p>\n</li>\n<li>\n<p>“这个时间点具体到几点？”</p>\n</li>\n<li>\n<p>“我是微信给你还是邮箱给你？”</p>\n</li>\n<li>\n<p>“那需要我先给一个计划，你帮我看看合适不合适么？”</p>\n</li>\n<li>\n<p>......</p>\n</li>\n</ul>\n<p>一个杂活而已，你不停地追问细节，会极大地增加你们之间的沟通成本，让对方崩溃，从此再也不想给你安排杂活。</p>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n",
            "tags": [
                "工作",
                "职场",
                "沟通",
                "话术"
            ]
        },
        {
            "id": "https://metal-heart.github.io/posts/a1a87ec3/",
            "url": "https://metal-heart.github.io/posts/a1a87ec3/",
            "title": "复杂度分析",
            "date_published": "2022-03-20T15:25:17.000Z",
            "content_html": "<h1 id=\"复杂度分析\"><a class=\"anchor\" href=\"#复杂度分析\">#</a> 复杂度分析</h1>\n<h2 id=\"为什么需要复杂度分析\"><a class=\"anchor\" href=\"#为什么需要复杂度分析\">#</a> 为什么需要复杂度分析</h2>\n<p>衡量算法的优劣，有两种评估方式：事前估计和后期测试。</p>\n<p>后期测试有性能测试、基准测试（Benchmark）等手段。</p>\n<p>但是，后期测试有以下限制：</p>\n<ul>\n<li><strong>测试结果非常依赖测试环境</strong>。如：不同机型、不同编译器版本、不同硬件配置等等，都会影响测试结果。</li>\n<li><strong>测试结果受数据规模的影响很大</strong>。</li>\n</ul>\n<p>所以，需要一种方法，可以不受环境或数据规模的影响，粗略地估计算法的执行效率。这种方法就是复杂度分析。</p>\n<h2 id=\"时间复杂度分析\"><a class=\"anchor\" href=\"#时间复杂度分析\">#</a> 时间复杂度分析</h2>\n<h3 id=\"大-o-表示法\"><a class=\"anchor\" href=\"#大-o-表示法\">#</a> 大 O 表示法</h3>\n<p>假设问题的规模为 n，则程序的时间复杂度表示为  <code>T(n)</code> 。<strong>代码的执行时间 T (n) 与每行代码的执行次数 n 成正比</strong>。</p>\n<p>当 n 增大时，T (n) 也随之增大，想要准确估计其变化比较困难。所以，可以采用大 O 时间复杂度来粗略估计其复杂度，其表达式为：<strong> <code>T(n) = O(f(n))</code> </strong>。</p>\n<p><strong>大 O 表示法</strong>实际上并不具体表示代码真正的执行时间，而是表示<strong>代码执行时间随数据规模增长的变化趋势</strong>，所以，也叫作<strong>渐进时间复杂度</strong>（asymptotic time complexity），简称<strong>时间复杂度</strong>。</p>\n<h3 id=\"时间复杂度分析的要点\"><a class=\"anchor\" href=\"#时间复杂度分析的要点\">#</a> 时间复杂度分析的要点</h3>\n<ul>\n<li><strong>只关注循环执行次数最多的一段代码</strong></li>\n<li><strong>加法法则：总复杂度等于量级最大的那段代码的复杂度</strong></li>\n<li><strong>乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</strong></li>\n</ul>\n<h3 id=\"最好-最坏和平均情况\"><a class=\"anchor\" href=\"#最好-最坏和平均情况\">#</a> 最好、最坏和平均情况</h3>\n<ul>\n<li><strong>最好情况时间复杂度</strong>（best case time complexity）：<strong>在最理想的情况下，执行代码的时间复杂度</strong>。例如：在最理想的情况下，要查找的变量 x 正好是数组的第一个元素，此时最好情况时间复杂度为 1。</li>\n<li><strong>最坏情况时间复杂度</strong>（worst case time complexity）：<strong>在最糟糕的情况下，执行代码的时间复杂度</strong>。例如：在最理想的情况下，要查找的变量 x 正好是数组的最后个元素，此时最好情况时间复杂度为 n。</li>\n<li><strong>平均情况时间复杂度</strong>（average case time complexity）：平均时间复杂度的全称应该叫<strong>加权平均时间复杂度</strong>或者<strong>期望时间复杂度</strong>。</li>\n</ul>\n<h3 id=\"时间复杂度分析示例\"><a class=\"anchor\" href=\"#时间复杂度分析示例\">#</a> 时间复杂度分析示例</h3>\n<p>【示例】从 1 累加到 100 的时间复杂度是多少？</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">N</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>时间复杂度计算：显然，这段代码执行了 100 次加法，其时间复杂度和 N 的大小完全一致</p>\n<pre><code>T(n) = O(n)\n</code></pre>\n<p>【示例】嵌套循环的时间复杂度是多少？</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">M</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">N</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">M</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i = \"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\", j = \"</span> <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>时间复杂度计算：</p>\n<pre><code>T(n) = (M-1)(N-1) = O(M*N) ≈ O(N^2)\n</code></pre>\n<p>【示例】递归函数的时间复杂度是多少？思考一下斐波那契数列  <code>f(n) = f(n-1) + f(n-2)</code>  的时间复杂度是多少？</p>\n<p><img data-src=\"https://raw.githubusercontent.com/dunwu/images/dev/snap/20220320110642.png\" alt=\"img\" /></p>\n<pre><code>T(n) = O(2^N)\n</code></pre>\n<h2 id=\"空间复杂度分析\"><a class=\"anchor\" href=\"#空间复杂度分析\">#</a> 空间复杂度分析</h2>\n<p>时间复杂度的全称是<strong>渐进时间复杂度</strong>，<strong>表示算法的执行时间与数据规模之间的增长关系</strong>。</p>\n<p>类比一下，空间复杂度全称就是<strong>渐进空间复杂度</strong>（asymptotic space complexity），<strong>表示算法的存储空间与数据规模之间的增长关系</strong>。</p>\n<h2 id=\"复杂度量级\"><a class=\"anchor\" href=\"#复杂度量级\">#</a> 复杂度量级</h2>\n<p>复杂度有以下量级：</p>\n<ul>\n<li><strong> <code>O(1)</code> </strong>：常数复杂度</li>\n<li><strong> <code>O(log n)</code> </strong>：对数复杂度</li>\n<li><strong> <code>O(n)</code> </strong>：线性复杂度</li>\n<li><strong> <code>O(nlog n)</code> </strong>：线性对数阶复杂度</li>\n<li><strong> <code>O(n^2)</code> </strong>：平方复杂度</li>\n<li><strong> <code>O(n^3)</code> </strong>：立方复杂度</li>\n<li><strong> <code>O(n^k)</code> </strong>：K 次方复杂度</li>\n<li><strong> <code>O(2^n)</code> </strong>：指数复杂度</li>\n<li><strong> <code>O(n!)</code> </strong>：阶乘复杂度</li>\n</ul>\n<p>在数据量比较小的时候，复杂度量级差异并不明显；但是，随着数据规模大小的变化，差异会逐渐突出。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/dunwu/images/dev/snap/20220320160627.png\" alt=\"img\" /></p>\n<p><code>O(1)</code>  复杂度示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num = \"</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>O(log n)</code>  对数复杂度示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> max<span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i = \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>O(n)</code>  复杂度示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> max<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i = \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>O(n^2)</code>  复杂度示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">M</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">N</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">M</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i = \"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\", j = \"</span> <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>O(k^n)</code>  复杂度示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i = \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"常见数据结构的复杂度\"><a class=\"anchor\" href=\"#常见数据结构的复杂度\">#</a> 常见数据结构的复杂度</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200702071922.png\" alt=\"img\" /></p>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90aW1lLmdlZWtiYW5nLm9yZy9jb2x1bW4vaW50cm8vMTAwMDE3MzAx\">数据结构与算法之美</span></li>\n</ul>\n",
            "tags": [
                "软件",
                "数据结构和算法",
                "综合",
                "数据结构",
                "算法"
            ]
        },
        {
            "id": "https://metal-heart.github.io/posts/37138/",
            "url": "https://metal-heart.github.io/posts/37138/",
            "title": "代码工程规范",
            "date_published": "2021-12-18T11:26:20.000Z",
            "content_html": "<h1 id=\"代码工程规范\"><a class=\"anchor\" href=\"#代码工程规范\">#</a> 代码工程规范</h1>\n<blockquote>\n<p>软件项目开发规范。</p>\n</blockquote>\n<h2 id=\"项目结构\"><a class=\"anchor\" href=\"#项目结构\">#</a> 项目结构</h2>\n<p>以下为项目根目录下的文件和目录的组织结构：</p>\n<h3 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h3>\n<p><strong>codes</strong> - 代码目录。<br />\n<strong>configurations</strong> - 配置目录。一般存放项目相关的配置文件。如 maven 的 settings.xml，nginx 的 nginx.conf 等。<br />\n<strong>demos</strong> - 示例目录。<br />\n<strong>docs</strong> - 文档目录。<br />\n<strong>libs</strong> - 第三方库文件。<br />\n<strong>scripts</strong> - 脚本目录。一般存放用于启动、构建项目的可执行脚本文件。<br />\n<strong>packages</strong> - 打包文件目录。Java 项目中可能是 jar、war 等；前端项目中可能是 zip、rar 等；电子书项目中可能是 pdf 等。</p>\n<h3 id=\"文件\"><a class=\"anchor\" href=\"#文件\">#</a> 文件</h3>\n<p><strong>.gitignore</strong> - git 忽略规则。<br />\n<strong>.gitattributes</strong> - git 属性规则。<br />\n<strong>.editorconfig</strong> - 编辑器书写规则。<br />\n<strong><span class=\"exturl\" data-url=\"aHR0cDovL1JFQURNRS5tZA==\">README.md</span></strong> - 项目说明文件。<br />\n<strong>LICENSE</strong> - 开源协议。如果项目是开源文件，需要添加。</p>\n<h2 id=\"命名规则\"><a class=\"anchor\" href=\"#命名规则\">#</a> 命名规则</h2>\n<h3 id=\"目录名\"><a class=\"anchor\" href=\"#目录名\">#</a> 目录名</h3>\n<p>目录名必须使用半角字符，不得使用全角字符。这也意味着，中文不能用于文件名。</p>\n<p>目录名建议只使用小写字母，不使用大写字母。</p>\n<pre><code>不佳： Test\n正确： test\n</code></pre>\n<p>目录名可以使用数字，但不应该是首字符。</p>\n<pre><code>不佳： 1-demo\n正确： demo1\n</code></pre>\n<p>目录名包含多个单词时，单词之间建议使用半角的连词线（ <code>-</code> ）分隔。</p>\n<pre><code>不佳： common_demo\n正确： common-demo\n</code></pre>\n<h3 id=\"文件名\"><a class=\"anchor\" href=\"#文件名\">#</a> 文件名</h3>\n<p>文档的文件名不得含有空格。</p>\n<p>文件名必须使用半角字符，不得使用全角字符。这也意味着，中文不能用于文件名。</p>\n<pre><code>错误： 名词解释.md\n正确： glossary.md\n</code></pre>\n<p>文件名建议只使用小写字母，不使用大写字母。</p>\n<pre><code>错误：TroubleShooting.md\n正确：troubleshooting.md\n</code></pre>\n<p>为了醒目，某些说明文件的文件名，可以使用大写字母，比如 <code>README</code> 、 <code>LICENSE</code> 。</p>\n<p>一些约定俗成的习惯可以保持传统写法，如：Java 的文件名一般使用驼峰命名法，且首字母大写；配置文件  <code>applicationContext.xml</code>  ；React 中的 JSX 组件文件名一般使用驼峰命名法，且首字母大写等。</p>\n<p>文件名包含多个单词时，单词之间建议使用半角的连词线（ <code>-</code> ）分隔。</p>\n<pre><code>不佳：advanced_usage.md\n正确：advanced-usage.md\n</code></pre>\n<h2 id=\"java-日志规范\"><a class=\"anchor\" href=\"#java-日志规范\">#</a> Java 日志规范</h2>\n<blockquote>\n<p>这里基于<span class=\"exturl\" data-url=\"aHR0cHM6Ly95cS5hbGl5dW4uY29tL2F0dGFjaG1lbnQvZG93bmxvYWQvP2lkPTQ5NDI=\">阿里巴巴 Java 开发手册</span>日志规约章节，结合自己的开发经验做了一些增删和调整。</p>\n</blockquote>\n<ol>\n<li>【强制】应用中不可直接使用日志系统（Log4j、Logback）中的 API，而应依赖使用日志框架 SLF4J 中的 API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LoggerFactory</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Abc</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>\n<p>【强制】日志文件推荐至少保存  <code>30</code>  天，因为有些异常具备以 “周” 为频次发生的特点。</p>\n</li>\n<li>\n<p>【强制】应用中的扩展日志（如打点、临时监控、访问日志等）命名方式： <code>appName_logType_logName.log</code> 。logType: 日志类型，推荐分类有 stats/desc/monitor/visit 等；logName: 日志描述。这种命名的好处：通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。</p>\n</li>\n</ol>\n<p><strong>正例</strong>：mppserver 应用中单独监控时区转换异常，如： <code>mppserver_monitor_timeZoneConvert.log</code></p>\n<p><strong>说明</strong>：推荐对日志进行分类，如将错误日志和业务日志分开存放，便于开发人员查看，也便于通过日志对系统进行及时监控。</p>\n<ol start=\"4\">\n<li>【强制】对  <code>trace/debug/info</code>  级别的日志输出，必须使用条件输出形式或者使用占位符的方式。</li>\n</ol>\n<p>说明： <code>logger.debug(&quot;Processing trade with id: &quot; + id + &quot; and symbol: &quot; + symbol);</code>  如果日志级别是 warn，上述日志不会打印，但是会执行字符串拼接操作，如果 symbol 是对象，会执行 toString () 方法，浪费了系统资源，执行了上述操作，最终日志却没有打印。</p>\n<p><strong>正例：（条件）</strong></p>\n<pre><code>if (logger.isDebugEnabled()) &#123;\nlogger.debug(&quot;Processing trade with id: &quot; + id + &quot; and symbol: &quot; + symbol);\n&#125;\n</code></pre>\n<p><strong>正例：（占位符）</strong></p>\n<pre><code>logger.debug(&quot;Processing trade with id: &#123;&#125; and symbol : &#123;&#125; &quot;, id, symbol);\n</code></pre>\n<ol start=\"5\">\n<li>【强制】避免重复打印日志，浪费磁盘空间。务必在  <code>log4j.xml</code>  或  <code>logback.xml</code>  中设置  <code>additivity=false</code> 。</li>\n</ol>\n<p><strong>正例</strong>：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>logger</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.taobao.dubbo.config<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">additivity</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"6\">\n<li>【强制】异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么通过关键字 throws 往上抛出。</li>\n</ol>\n<p><strong>正例</strong>：logger.error (各类参数或者对象 toString + &quot;_&quot; + e.getMessage (), e);</p>\n<ol start=\"9\">\n<li>【强制】日志格式遵循如下格式：</li>\n</ol>\n<p>&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2R1bnd1L2ltYWdlcy9kZXYvY3MvamF2YS9qYXZhbGliL2xvZy9sb2diYWNrL2xvZy1wYXR0ZXJuLnBuZw==\">https://raw.githubusercontent.com/dunwu/images/dev/cs/java/javalib/log/logback/log-pattern.png</span>&quot;/&gt;&lt;/div&gt;</p>\n<p>打印出的日志信息如：</p>\n<pre><code>2018-03-29 15:06:57.277 [javalib] [main] [TRACE] i.g.dunwu.javalib.log.LogbackDemo#main - 这是一条 trace 日志记录\n2018-03-29 15:06:57.282 [javalib] [main] [DEBUG] i.g.dunwu.javalib.log.LogbackDemo#main - 这是一条 debug 日志记录\n2018-03-29 15:06:57.282 [javalib] [main] [INFO] i.g.dunwu.javalib.log.LogbackDemo#main - 这是一条 info 日志记录\n2018-03-29 15:06:57.282 [javalib] [main] [WARN] i.g.dunwu.javalib.log.LogbackDemo#main - 这是一条 warn 日志记录\n2018-03-29 15:06:57.282 [javalib] [main] [ERROR] i.g.dunwu.javalib.log.LogbackDemo#main - 这是一条 error 日志记录\n</code></pre>\n<ol start=\"8\">\n<li>【参考】slf4j 支持的日志级别，按照级别从低到高，分别为： <code>trace &lt; debug &lt; info &lt; warn &lt; error</code> 。</li>\n</ol>\n<p>建议只使用  <code>debug &lt; info &lt; warn &lt; error</code>  四个级别。</p>\n<ul>\n<li><code>error</code>  日志级别只记录系统逻辑出错、异常等重要的错误信息。如非必要，请不要在此场景打出 error 级别。</li>\n<li><code>warn</code>  日志级别记录用户输入参数错误的情况，避免用户投诉时，无所适从。</li>\n<li><code>info</code>  日志级别记录业务逻辑中一些重要步骤信息。</li>\n<li><code>debug</code>  日志级别记录一些用于调试的信息。</li>\n</ul>\n<ol start=\"10\">\n<li>【参考】有一些第三方框架或库的日志对于排查问题具有一定的帮助，如 Spring、Dubbo、Mybatis 等。这些框架所使用的日志库未必和本项目一样，为了避免出现日志无法输出的问题，请引入对应的桥接 jar 包。</li>\n</ol>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly95cS5hbGl5dW4uY29tL2F0dGFjaG1lbnQvZG93bmxvYWQvP2lkPTQ5NDI=\">阿里巴巴 Java 开发手册</span>日志规约章节</li>\n</ul>\n",
            "tags": [
                "工作",
                "工作效率",
                "效率提升",
                "规范"
            ]
        },
        {
            "id": "https://metal-heart.github.io/posts/35174/",
            "url": "https://metal-heart.github.io/posts/35174/",
            "title": "个人目录管理规范",
            "date_published": "2021-12-11T02:23:22.000Z",
            "content_html": "<h1 id=\"个人目录管理规范\"><a class=\"anchor\" href=\"#个人目录管理规范\">#</a> 个人目录管理规范</h1>\n<blockquote>\n<p>作为程序员，想必每个人都会有大量的资料、数据。按照条理清晰的目录结构去分类化存储，十分有助于管理文件。</p>\n</blockquote>\n<h2 id=\"目录结构\"><a class=\"anchor\" href=\"#目录结构\">#</a> 目录结构</h2>\n<p>以下是我个人整理的目录结构：</p>\n<pre><code>.\n├── Codes           #代码目录\n│   ├── Other       #第三方代码目录\n│   ├── My          #个人代码目录\n│   └── Work        #工作代码目录\n├── Data            #数据目录\n├── Downloads       #下载文件目录\n├── Docs            #文档目录\n│   ├── Books       #电子书目录\n│   ├── My          #个人文档目录\n│   └── Work        #工作文档目录\n├── Movies          #视频目录\n├── Music           #音乐目录\n├── Pictures        #图片目录\n├── Public          #共享目录\n├── Temp            #临时文件目录\n└── Tools           #工具软件目录\n    └── Packages    #安装包目录\n</code></pre>\n<p>注：如果您使用的操作系统是 Mac 这种可以为目录或文件添加 tag 的操作系统，那么您可以根据自己的喜好更细致化的管理。</p>\n<h2 id=\"2-文件管理软件\"><a class=\"anchor\" href=\"#2-文件管理软件\">#</a> 2. 文件管理软件</h2>\n<blockquote>\n<p>选用便利的文件管理软件，可以让你的文件管理如虎添翼。这里推荐几款经典的文件管理工具。</p>\n</blockquote>\n<h3 id=\"21-clover\"><a class=\"anchor\" href=\"#21-clover\">#</a> 2.1. Clover</h3>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2NuLmVqaWUubWUv\">Clover</span> 是 Windows Explorer 资源管理器的一个扩展，为其增加类似谷歌 Chrome 浏览器的多标签页功能。</p>\n</blockquote>\n<p>&lt;div align=&quot;center&quot;&gt;<br />\n&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL2NuLmVqaWUubWUvaW1hZ2VzL2Nsb3Zlci5qcGc=\">http://cn.ejie.me/images/clover.jpg</span>&quot; width=&quot;640&quot; /&gt;<br />\n&lt;/div&gt;</p>\n<h3 id=\"22-everything\"><a class=\"anchor\" href=\"#22-everything\">#</a> 2.2. Everything</h3>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy52b2lkdG9vbHMuY29tLw==\">Everything</span> 可以立即在 windows 系统中找到制定名称的文件和文件夹。</p>\n</blockquote>\n<p>&lt;div align=&quot;center&quot;&gt;<br />\n&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy52b2lkdG9vbHMuY29tL3Nzc21hbGwyLmdpZg==\">http://www.voidtools.com/sssmall2.gif</span>&quot; width=&quot;640&quot; /&gt;<br />\n&lt;/div&gt;</p>\n<h3 id=\"23-wox\"><a class=\"anchor\" href=\"#23-wox\">#</a> 2.3. Wox</h3>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1dveC1sYXVuY2hlci9Xb3g=\">Wox</span> 是一款简单易用的 Windows 启动器。可以把它视为 windows 版的 Alfred。</p>\n</blockquote>\n<p>&lt;div align=&quot;center&quot;&gt;<br />\n&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jYW1vLmdpdGh1YnVzZXJjb250ZW50LmNvbS85ZGIzMzU0NmQzYTkwNWE5YWQ5MTVlMDk0OGQzYmEzZjQ3ZjU3YjY0LzY4NzQ3NDcwM2EyZjJmNjkyZTY5NmQ2Nzc1NzIyZTYzNmY2ZDJmNDQ3NDc4NGU0MjRhNjkyZTY3Njk2Ng==\">https://camo.githubusercontent.com/9db33546d3a905a9ad915e0948d3ba3f47f57b64/687474703a2f2f692e696d6775722e636f6d2f4474784e424a692e676966</span>&quot; width=&quot;640&quot; /&gt;<br />\n&lt;/div&gt;</p>\n<h3 id=\"24-q-dir\"><a class=\"anchor\" href=\"#24-q-dir\">#</a> 2.4. Q-dir</h3>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5zb2Z0cGVkaWEuY29tL2dldC9GaWxlLW1hbmFnZXJzL1EtRGlyLnNodG1s\">Q-dir</span> 是轻量的文件管理器，特点鲜明，各种布局视图切换灵活，默认四个小窗口组成一个大窗口，操作快捷。</p>\n</blockquote>\n<p>&lt;div align=&quot;center&quot;&gt;<br />\n&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL2kxLXdpbi5zb2Z0cGVkaWEtc3RhdGljLmNvbS9zY3JlZW5zaG90cy9xLWRpcl8xLnBuZw==\">http://i1-win.softpedia-static.com/screenshots/q-dir_1.png</span>&quot; width=&quot;640&quot; /&gt;<br />\n&lt;/div&gt;</p>\n",
            "tags": [
                "工作",
                "工作效率",
                "效率提升",
                "规范"
            ]
        },
        {
            "id": "https://metal-heart.github.io/posts/11605/",
            "url": "https://metal-heart.github.io/posts/11605/",
            "title": "技术文档规范",
            "date_published": "2021-12-11T02:23:22.000Z",
            "content_html": "<h1 id=\"技术文档规范\"><a class=\"anchor\" href=\"#技术文档规范\">#</a> 技术文档规范</h1>\n<blockquote>\n<p>文档采用 Markdown 语法书写。</p>\n<p>📚 「参考」Markdown 语法可以参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2d1b2Rvbmd4aWFyZW4vUkVBRE1F\">https://github.com/guodongxiaren/README</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RjaGFwaS9tYXJrZG93bi1jaGVhdHNoZWV0\">https://github.com/tchapi/markdown-cheatsheet</span></li>\n</ul>\n</blockquote>\n<h2 id=\"1-标题\"><a class=\"anchor\" href=\"#1-标题\">#</a> 1. 标题</h2>\n<h3 id=\"11-标题层级\"><a class=\"anchor\" href=\"#11-标题层级\">#</a> 1.1. 标题层级</h3>\n<p>标题分为四级。</p>\n<ol>\n<li>一级标题：文章的标题</li>\n<li>二级标题：文章内容的大标题</li>\n<li>三级标题：二级标题下一级的标题</li>\n<li>四级标题：三级标题下一级的标题</li>\n</ol>\n<h3 id=\"12-标题原则\"><a class=\"anchor\" href=\"#12-标题原则\">#</a> 1.2. 标题原则</h3>\n<ul>\n<li>一篇文章中应该尽力避免同名标题。</li>\n<li>一级标题下，不能直接出现三级标题。</li>\n<li>标题要避免孤立编号（即同级标题只有一个）。</li>\n<li>下级标题不重复上一级标题的内容。</li>\n<li>谨慎使用四级标题，尽量避免出现，保持层级的简单和防止出现过于复杂的章节。如果三级标题下有并列性的内容，建议只使用项目列表（Item list）。</li>\n</ul>\n<h2 id=\"2-文本\"><a class=\"anchor\" href=\"#2-文本\">#</a> 2. 文本</h2>\n<h3 id=\"21-字间距\"><a class=\"anchor\" href=\"#21-字间距\">#</a> 2.1. 字间距</h3>\n<p>全角中文字符与半角英文字符之间，应有一个半角空格。</p>\n<pre><code>反例：本文介绍如何快速启动Windows系统。\n\n正例：本文介绍如何快速启动 Windows 系统。\n</code></pre>\n<p>全角中文字符与半角阿拉伯数字之间，有没有半角空格都可，但必须保证风格统一，不能两种风格混杂。</p>\n<pre><code>正例：2011年5月15日，我订购了5台笔记本电脑与10台平板电脑。\n\n正例：2011 年 5 月 15 日，我订购了 5 台笔记本电脑与 10 台平板电脑。\n</code></pre>\n<p>半角的百分号，视同阿拉伯数字。</p>\n<p>英文单位若不翻译，单位前的阿拉伯数字与单位间不留空格。</p>\n<pre><code>反例：一部容量为 16 GB 的智能手机\n\n正例：一部容量为 16GB 的智能手机\n</code></pre>\n<p>半角英文字符和半角阿拉伯数字，与全角标点符号之间不留空格。</p>\n<pre><code>反例：他的电脑是 MacBook Air 。\n\n正例：他的电脑是 MacBook Air。\n</code></pre>\n<h3 id=\"22-句子\"><a class=\"anchor\" href=\"#22-句子\">#</a> 2.2. 句子</h3>\n<ul>\n<li>避免使用长句。一个句子建议不超过 100 字或者正文的 3 行。</li>\n<li>尽量使用简单句和并列句，避免使用复合句。</li>\n</ul>\n<h3 id=\"23-写作风格\"><a class=\"anchor\" href=\"#23-写作风格\">#</a> 2.3. 写作风格</h3>\n<p>尽量不使用被动语态，改为使用主动语态。</p>\n<pre><code>反例：假如此软件尚未被安装，\n\n正例：假如尚未安装这个软件，\n</code></pre>\n<p>不使用非正式的语言风格。</p>\n<pre><code>反例：Lady Gaga 的演唱会真是酷毙了，从没看过这么给力的表演！！！\n\n正例：无法参加本次活动，我深感遗憾。\n</code></pre>\n<p>用对 “的”、“地”、“得”。</p>\n<pre><code>她露出了开心的笑容。\n（形容词＋的＋名词）\n\n她开心地笑了。\n（副词＋地＋动词）\n\n她笑得很开心。\n（动词＋得＋副词）\n</code></pre>\n<p>使用代词时（比如 “其”、“该”、“此”、“这” 等词），必须明确指代的内容，保证只有一个含义。</p>\n<pre><code>反例：从管理系统可以监视中继系统和受其直接控制的分配系统。\n\n正例：从管理系统可以监视两个系统：中继系统和受中继系统直接控制的分配系统。\n</code></pre>\n<p>名词前不要使用过多的形容词。</p>\n<pre><code>反例：此设备的使用必须在接受过本公司举办的正式的设备培训的技师的指导下进行。\n\n正例：此设备必须在技师的指导下使用，且指导技师必须接受过由本公司举办的正式设备培训。\n</code></pre>\n<p>单个句子的长度尽量保持在 20 个字以内；20 ～ 29 个字的句子，可以接受；30 ～ 39 个字的句子，语义必须明确，才能接受；多于 40 个字的句子，在任何情况下都不能接受。</p>\n<pre><code>反例：本产品适用于从由一台服务器进行动作控制的单一节点结构到由多台服务器进行动作控制的并行处理程序结构等多种体系结构。\n\n正例：本产品适用于多种体系结构。无论是由一台服务器（单一节点结构），还是由多台服务器（并行处理结构）进行动作控制，均可以使用本产品。\n</code></pre>\n<p>同样一个意思，尽量使用肯定句表达，不使用否定句表达。</p>\n<pre><code>反例：请确认没有接通装置的电源。\n\n正例：请确认装置的电源已关闭。\n</code></pre>\n<p>避免使用双重否定句。</p>\n<pre><code>反例：没有删除权限的用户，不能删除此文件。\n\n正例：用户必须拥有删除权限，才能删除此文件。\n</code></pre>\n<h3 id=\"24-英文处理\"><a class=\"anchor\" href=\"#24-英文处理\">#</a> 2.4. 英文处理</h3>\n<p>英文原文如果使用了复数形式，翻译成中文时，应该将其还原为单数形式。</p>\n<pre><code>英文：⋯information stored in random access memory (RAMs)⋯\n\n中文：……存储在随机存取存储器（RAM）里的信息……\n</code></pre>\n<p>外文缩写可以使用半角圆点 ( <code>.</code> ) 表示缩写。</p>\n<pre><code>U.S.A.\nApple, Inc.\n</code></pre>\n<p>表示中文时，英文省略号（ <code>⋯</code> ）应改为中文省略号（ <code>……</code> ）。</p>\n<pre><code>英文：5 minutes later⋯\n\n中文：5 分钟过去了⋯⋯\n</code></pre>\n<p>英文书名或电影名改用中文表达时，双引号应改为书名号。</p>\n<pre><code>英文：He published an article entitled &quot;The Future of the Aviation&quot;.\n\n中文：他发表了一篇名为《航空业的未来》的文章。\n</code></pre>\n<p>第一次出现英文词汇时，在括号中给出中文标注。此后再次出现时，直接使用英文缩写即可。</p>\n<pre><code>IOC（International Olympic Committee，国际奥林匹克委员会）。这样定义后，便可以直接使用“IOC”了。\n</code></pre>\n<p>专有名词中每个词第一个字母均应大写，非专有名词则不需要大写。</p>\n<pre><code>“American Association of Physicists in Medicine”（美国医学物理学家协会）是专有名词，需要大写。\n\n“online transaction processing”（在线事务处理）不是专有名词，不应大写。\n</code></pre>\n<h2 id=\"3-段落\"><a class=\"anchor\" href=\"#3-段落\">#</a> 3. 段落</h2>\n<h3 id=\"31-段落原则\"><a class=\"anchor\" href=\"#31-段落原则\">#</a> 3.1. 段落原则</h3>\n<ul>\n<li>一个段落只能有一个主题，或一个中心句子。</li>\n<li>段落的中心句子放在段首，对全段内容进行概述。后面陈述的句子为核心句服务。</li>\n<li>一个段落的长度不能超过七行，最佳段落长度小于等于四行。</li>\n<li>段落的句子语气要使用陈述和肯定语气，避免使用感叹语气。</li>\n<li>段落之间使用一个空行隔开。</li>\n<li>段落开头不要留出空白字符。</li>\n</ul>\n<h3 id=\"32-引用\"><a class=\"anchor\" href=\"#32-引用\">#</a> 3.2. 引用</h3>\n<p>引用第三方内容时，应注明出处。</p>\n<pre><code>One man’s constant is another man’s variable. — Alan Perlis\n</code></pre>\n<p>如果是全篇转载，请在全文开头显著位置注明作者和出处，并链接至原文。</p>\n<pre><code>本文转载自 WikiQuote\n</code></pre>\n<p>使用外部图片时，必须在图片下方或文末标明来源。</p>\n<pre><code>本文部分图片来自 Wikipedia\n</code></pre>\n<h3 id=\"33-强调\"><a class=\"anchor\" href=\"#33-强调\">#</a> 3.3. 强调</h3>\n<p>一些特殊的强调内容可以按照如下方式书写：</p>\n<blockquote>\n<p>🔔 『注意』</p>\n</blockquote>\n<blockquote>\n<p>💡 『提示』</p>\n</blockquote>\n<blockquote>\n<p>📚 『参考』</p>\n</blockquote>\n<h2 id=\"4-数值\"><a class=\"anchor\" href=\"#4-数值\">#</a> 4. 数值</h2>\n<h3 id=\"41-半角数字\"><a class=\"anchor\" href=\"#41-半角数字\">#</a> 4.1. 半角数字</h3>\n<p>数字一律使用半角形式，不得使用全角形式。</p>\n<pre><code>反例： 这件商品的价格是１０００元。\n\n正例： 这件商品的价格是 1000 元。\n</code></pre>\n<h3 id=\"42-千分号\"><a class=\"anchor\" href=\"#42-千分号\">#</a> 4.2. 千分号</h3>\n<p>数值为千位以上，应添加千分号（半角逗号）。</p>\n<pre><code>XXX 公司的实收资本为 RMB1,258,000。\n</code></pre>\n<p>对于 4 ～ 6 位的数值，千分号是选用的，比如 <code>1000</code>  和 <code>1,000</code>  都可以接受。对于 7 位及以上的数值，千分号是必须的。</p>\n<p>多位小数要从小数点后从左向右添加千分号，比如 <code>4.234,345</code> 。</p>\n<h3 id=\"43-货币\"><a class=\"anchor\" href=\"#43-货币\">#</a> 4.3. 货币</h3>\n<p>货币应为阿拉伯数字，并在数字前写出货币符号，或在数字后写出货币中文名称。</p>\n<pre><code>$1,000\n1,000 美元\n</code></pre>\n<h3 id=\"44-数值范围\"><a class=\"anchor\" href=\"#44-数值范围\">#</a> 4.4. 数值范围</h3>\n<p>表示数值范围时，用 <code>～</code> 连接。参见《标点符号》一节的 “连接号” 部分。</p>\n<p>带有单位或百分号时，两个数字都要加上单位或百分号，不能只加后面一个。</p>\n<pre><code>反例：132～234kg\n正例：132kg～234kg\n\n反例：67～89%\n正例：67%～89%\n</code></pre>\n<h3 id=\"45-变化程度的表示法\"><a class=\"anchor\" href=\"#45-变化程度的表示法\">#</a> 4.5. 变化程度的表示法</h3>\n<p>数字的增加要使用 “增加了”、“增加到”。“了” 表示增量，“到” 表示定量。</p>\n<pre><code>增加到过去的两倍\n（过去为一，现在为二）\n\n增加了两倍\n（过去为一，现在为三）\n</code></pre>\n<p>数字的减少要使用 “降低了”、“降低到”。“了” 表示增量，“到” 表示定量。</p>\n<pre><code>降低到百分之八十\n（定额是一百，现在是八十）\n\n降低了百分之八十\n（原来是一百，现在是二十）\n</code></pre>\n<p>不能用 “降低 N 倍” 或 “减少 N 倍” 的表示法，要用 “降低百分之几” 或 “减少百分之几”。因为减少（或降低）一倍表示数值原来为一百，现在等于零。</p>\n<h2 id=\"5-符号\"><a class=\"anchor\" href=\"#5-符号\">#</a> 5. 符号</h2>\n<h3 id=\"51-符号原则\"><a class=\"anchor\" href=\"#51-符号原则\">#</a> 5.1. 符号原则</h3>\n<ul>\n<li>中文语句的标点符号，均应该采取全角符号，这样可以保证视觉的一致。</li>\n<li>如果整句为英文，则该句使用英文 / 半角标点。</li>\n<li>句号、问号、叹号、逗号、顿号、分号和冒号不得出现在一行之首。</li>\n</ul>\n<h3 id=\"52-句号\"><a class=\"anchor\" href=\"#52-句号\">#</a> 5.2. 句号</h3>\n<p>中文语句中的结尾处应该用全角句号（ <code>。</code> ）。</p>\n<p>句子末尾用括号加注时，句号应在括号之外。</p>\n<pre><code>反例：关于文件的输出，请参照第 1.3 节（见第 26 页。）\n\n正例：关于文件的输出，请参照第 1.3 节（见第 26 页）。\n</code></pre>\n<h3 id=\"53-逗号\"><a class=\"anchor\" href=\"#53-逗号\">#</a> 5.3. 逗号</h3>\n<p>逗号 <code>，</code> 表示句子内部的一般性停顿。</p>\n<p>注意避免 “一逗到底”，即整个段落除了结尾，全部停顿都使用逗号。</p>\n<h3 id=\"54-顿号\"><a class=\"anchor\" href=\"#54-顿号\">#</a> 5.4. 顿号</h3>\n<p>句子内部的并列词，应该用全角顿号 ( <code>、</code> ) 分隔，而不用逗号，即使并列词是英语也是如此。</p>\n<pre><code>反例：我最欣赏的科技公司有 Google, Facebook, 腾讯, 阿里和百度等。\n\n正例：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。\n</code></pre>\n<p>英文句子中，并列词语之间使用半角逗号（ <code>,</code> ）分隔。</p>\n<pre><code>例句：Microsoft Office includes Word, Excel, PowerPoint, Outlook and other components.\n</code></pre>\n<h3 id=\"55-分号\"><a class=\"anchor\" href=\"#55-分号\">#</a> 5.5. 分号</h3>\n<p>分号 <code>；</code> 表示复句内部并列分句之间的停顿。</p>\n<h3 id=\"56-引号\"><a class=\"anchor\" href=\"#56-引号\">#</a> 5.6. 引号</h3>\n<p>引用时，应该使用全角双引号（ <code>“ ”</code> ），注意前后双引号不同。</p>\n<pre><code>例句：许多人都认为客户服务的核心是“友好”和“专业”。\n</code></pre>\n<p>引号里面还要用引号时，外面一层用双引号，里面一层用单引号（ <code>‘ ’</code> ），注意前后单引号不同。</p>\n<pre><code>例句：鲍勃解释道：“我要放音乐，可萨利说，‘不行！’。”\n</code></pre>\n<h3 id=\"57-圆括号\"><a class=\"anchor\" href=\"#57-圆括号\">#</a> 5.7. 圆括号</h3>\n<p>补充说明时，使用全角圆括号 <code>（）</code> ，括号前后不加空格。</p>\n<pre><code>例句：请确认所有的连接（电缆和接插件）均安装牢固。\n</code></pre>\n<h3 id=\"58-冒号\"><a class=\"anchor\" href=\"#58-冒号\">#</a> 5.8. 冒号</h3>\n<p>全角冒号（ <code>：</code> ）常用在需要解释的词语后边，引出解释和说明。</p>\n<pre><code>例句：请确认以下几项内容：时间、地点、活动名称，以及来宾数量。\n</code></pre>\n<p>表示时间时，应使用半角冒号（ <code>:</code> ）。</p>\n<pre><code>例句：早上 8:00\n</code></pre>\n<h3 id=\"59-省略号\"><a class=\"anchor\" href=\"#59-省略号\">#</a> 5.9. 省略号</h3>\n<p>省略号 <code>……</code>  表示语句未完、或者语气的不连续。它占两个汉字空间、包含六个省略点，不要使用 <code>。。。</code> 或 <code>...</code>  等非标准形式。</p>\n<p>省略号不应与 “等” 这个词一起使用。</p>\n<pre><code>反例：我们为会餐准备了香蕉、苹果、梨…等各色水果。\n\n正例：我们为会餐准备了各色水果，有香蕉、苹果、梨……\n\n正例：我们为会餐准备了香蕉、苹果、梨等各色水果。\n</code></pre>\n<h3 id=\"510-感叹号\"><a class=\"anchor\" href=\"#510-感叹号\">#</a> 5.10. 感叹号</h3>\n<p>应该使用平静的语气叙述，尽量避免使用感叹号 <code>！</code> 。</p>\n<p>不得多个感叹号连用，比如 <code>！！</code> 和 <code>!!!</code> 。</p>\n<h3 id=\"511-破折号\"><a class=\"anchor\" href=\"#511-破折号\">#</a> 5.11. 破折号</h3>\n<p>破折号 <code>————</code>  一般用于做进一步解释。破折号应占两个汉字的位置。</p>\n<pre><code>例句：直觉————尽管它并不总是可靠的————告诉我，这事可能出了些问题。\n</code></pre>\n<h3 id=\"512-连接号\"><a class=\"anchor\" href=\"#512-连接号\">#</a> 5.12. 连接号</h3>\n<p>连接号用于连接两个类似的词。</p>\n<p>以下场合应该使用直线连接号（ <code>-</code> ），占一个半角字符的位置。</p>\n<ul>\n<li>两个名词的复合</li>\n<li>图表编号</li>\n</ul>\n<pre><code>例句：氧化-还原反应\n\n例句：图 1-1\n</code></pre>\n<p>以下场合应该使用波浪连接号（ <code>～</code> ），占一个全角字符的位置。</p>\n<ul>\n<li>数值范围（例如日期、时间或数字）</li>\n</ul>\n<pre><code>例句：2009 年～2011 年\n</code></pre>\n<p>注意，波浪连接号前后两个值都应该加上单位。</p>\n<p>波浪连接号也可以用汉字 “至” 代替。</p>\n<pre><code>例句：周围温度：-20°C 至 -10°C\n</code></pre>\n<h2 id=\"6-结构\"><a class=\"anchor\" href=\"#6-结构\">#</a> 6. 结构</h2>\n<h3 id=\"61-目录结构\"><a class=\"anchor\" href=\"#61-目录结构\">#</a> 6.1. 目录结构</h3>\n<p>技术手册目录结构是一部完整的书，建议采用下面的结构。</p>\n<ul>\n<li><strong>简介</strong>（Introduction） - [必选][目录 | 文件] 提供对产品和文档本身的总体的、扼要的说明</li>\n<li><strong>入门篇</strong>（Quickstart） - [可选][文件] 如何最快速地使用产品</li>\n<li><strong>基础篇</strong>（Basics） - [必选][目录] 又称” 使用篇 “，提供初级的使用教程\n<ul>\n<li><strong>环境准备</strong>（Prerequisite） - [可选][文件] 软件使用需要满足的前置条件</li>\n<li><strong>安装</strong>（Installation） - [可选][文件] 软件的安装方法</li>\n<li><strong>配置</strong>（Configuration） - [可选][目录 | 文件] 软件的配置</li>\n<li><strong>特性</strong>（Feature） - [必选][目录 | 文件] 软件的功能特性</li>\n</ul>\n</li>\n<li><strong>进阶篇</strong>（Advanced） - [可选][目录] 又称” 开发篇 “，提供中高级的开发教程\n<ul>\n<li><strong>原理</strong>（Principle） - [可选][目录 | 文件] 软件的原理</li>\n<li><strong>设计</strong>（Design） - [可选][目录 | 文件] 软件的设计，如：架构、设计思想等</li>\n</ul>\n</li>\n<li><strong>实战篇</strong>（Action） - [可选][目录] 提供一些具有实战意义的示例说明</li>\n<li><strong>API</strong>（API） - [可选][目录 | 文件] 软件 API 的逐一介绍</li>\n<li><strong>常见问题</strong>（FAQ） - [可选][目录 | 文件] 常见问题解答</li>\n<li><strong>附录</strong>（Appendix） - [可选][目录] 不属于教程本身、但对阅读教程有帮助的内容\n<ul>\n<li><strong>命令</strong>（Command） - [可选][目录] 命令</li>\n<li><strong>资源</strong>（Resource） - [必选][文件] 资源</li>\n<li><strong>术语</strong>（Glossary） - [可选][文件] 名词解释</li>\n<li><strong>技巧</strong>（Recipe） - [可选][文件] 最佳实践</li>\n<li><strong>版本</strong>（Changelog） - [可选][文件] 版本说明</li>\n<li><strong>反馈</strong>（Feedback） - [可选][文件] 反馈方式</li>\n</ul>\n</li>\n</ul>\n<p>下面是两个真实范例，可参考。</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3JlZHV4LmpzLm9yZy9pbmRleC5odG1s\">Redux 手册</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2ZsaWdodC1tYW51YWwuYXRvbS5pby8=\">Atom 手册</span></li>\n</ul>\n<h3 id=\"62-文件名\"><a class=\"anchor\" href=\"#62-文件名\">#</a> 6.2. 文件名</h3>\n<p>文档的文件名不得含有空格。</p>\n<p>文件名必须使用半角字符，不得使用全角字符。这也意味着，中文不能用于文件名。</p>\n<pre><code>反例： 名词解释.md\n\n正例： glossary.md\n</code></pre>\n<p>文件名建议只使用小写字母，不使用大写字母。</p>\n<pre><code>反例：TroubleShooting.md\n\n正例：troubleshooting.md\n</code></pre>\n<p>为了醒目，某些说明文件的文件名，可以使用大写字母，比如 <code>README</code> 、 <code>LICENSE</code> 。</p>\n<p>文件名包含多个单词时，单词之间建议使用半角的连词线（ <code>-</code> ）分隔。</p>\n<pre><code>反例：advanced_usage.md\n\n正例：advanced-usage.md\n</code></pre>\n<h2 id=\"7-emoji\"><a class=\"anchor\" href=\"#7-emoji\">#</a> 7. Emoji</h2>\n<p>在 markdown 文档中，普遍会使用 emoji，帮助理解内容。但是，如果滥用 emoji，可能会适得其反。</p>\n<p>这里，将一些比较约定俗成的 emoji 表情使用场景列举一下：</p>\n<ul>\n<li>💡 提示 - [推荐]</li>\n<li>🔔 注意、警告 - [推荐]</li>\n<li>⭕ 正确 - [推荐]</li>\n<li>❌ 错误 - [推荐]</li>\n<li>❓ 问题 - [推荐]</li>\n<li>⛔ 禁止 - [推荐]</li>\n<li>🚧 未完待续、有待补充 - [推荐]</li>\n<li>📚 参考、参考资料 - [可选]</li>\n<li>⌨ 源码 - [可选]</li>\n</ul>\n<h2 id=\"8-参考\"><a class=\"anchor\" href=\"#8-参考\">#</a> 8. 参考</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3dlbmt1LmJhaWR1LmNvbS92aWV3LzIzY2MxYTY1MjdkMzI0MGM4NDQ3ZWZiZi5odG1s\">产品手册中文写作规范</span>，by 华为</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2RvY3MuZGFvY2xvdWQuaW8vd3JpdGUtZG9jcy9mb3JtYXQ=\">写作规范和格式规范</span>，by DaoCloud</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5oaXRhY2hpLXRjLmNvLmpwL2NvbXBhbnkvdGhlc2lzL3RoZXNpcy5wZGY=\">技术写作技巧在日汉翻译中的应用</span>，by 刘方</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGVuZ29vLmRlL2RvY3VtZW50cy9zdHlsZWd1aWRlcy9sZW5nb29fc3R5bGVndWlkZV9aSC5wZGY=\">简体中文规范指南</span>，by lengoo</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVuLmxlYW5jbG91ZC5jbi9jb3B5d3JpdGluZy1zdHlsZS1ndWlkZS5odG1s\">文档风格指南</span>，by LeanCloud</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xUjhsTUNQZjZ6Q0Q1S0VBOGVrWjVrbks3N2l3OUotdko2dkVvcFBlbXFaTS9lZGl0\">豌豆荚文案风格指南</span>，by 豌豆荚</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NwYXJhbm9pZC9jaGluZXNlLWNvcHl3cml0aW5nLWd1aWRlbGluZXM=\">中文文案排版指北</span>，by sparanoid</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3czYy5naXRodWIuaW8vY2xyZXEv\">中文排版需求</span>，by W3C</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTcvMDIvZmlsZW5hbWUtc2hvdWxkLWJlLWxvd2VyY2FzZS5odG1s\">为什么文件名要小写？</span>, by 阮一峰</li>\n</ul>\n",
            "tags": [
                "工作",
                "工作效率",
                "效率提升",
                "规范"
            ]
        },
        {
            "id": "https://metal-heart.github.io/posts/890fcec5/",
            "url": "https://metal-heart.github.io/posts/890fcec5/",
            "title": "嵌入式编程技巧项目启动说明书",
            "date_published": "2021-11-01T12:45:48.000Z",
            "content_html": "<h2 id=\"centerfont-size12b嵌入式编程技巧项目启动说明书bfontcenter\"><a class=\"anchor\" href=\"#centerfont-size12b嵌入式编程技巧项目启动说明书bfontcenter\">#</a> &lt;center&gt;&lt;font size=12&gt;&lt;b &gt; 嵌入式编程技巧项目启动说明书 &lt;/b&gt;&lt;/font&gt;&lt;/center&gt;</h2>\n<table>\n<thead>\n<tr>\n<th>文档状态</th>\n<th>文档标志</th>\n<th><span class=\"exturl\" data-url=\"aHR0cDovL3huLS0wMS0tZ2U5ZHI4cTlxY2I3M2NtaDJhOXMzYnZmMGEubWQ=\">01 - 项目启动说明书.md</span></th>\n<th>审核人</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[√] 草   稿</td>\n<td>当前版本</td>\n<td>v0.1</td>\n<td>审核日期</td>\n<td></td>\n</tr>\n<tr>\n<td>[ ] 正式发布</td>\n<td>作者</td>\n<td>将狼才鲸</td>\n<td>批准人</td>\n<td></td>\n</tr>\n<tr>\n<td>[ ] 正在修改</td>\n<td>完成日期</td>\n<td>2020-03-23</td>\n<td>批准日期</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr />\n<p>&lt;center&gt; 版本历史 &lt;/center&gt;</p>\n<table>\n<thead>\n<tr>\n<th>版本 / 状态</th>\n<th>作者</th>\n<th>参与者</th>\n<th>起止日期</th>\n<th>修订说明</th>\n<th>批准人</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr />\n<p>&lt;center&gt; 项目组成员 &lt;/center&gt;</p>\n<table>\n<thead>\n<tr>\n<th>项目负责人</th>\n<th>将狼才鲸</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>产品经理</td>\n<td></td>\n</tr>\n<tr>\n<td>项目经理</td>\n<td></td>\n</tr>\n<tr>\n<td>需求团队</td>\n<td></td>\n</tr>\n<tr>\n<td>设计团队</td>\n<td></td>\n</tr>\n<tr>\n<td>开发团队</td>\n<td></td>\n</tr>\n<tr>\n<td>测试团队</td>\n<td></td>\n</tr>\n<tr>\n<td>配置管理人员</td>\n<td></td>\n</tr>\n<tr>\n<td>质量保证人员</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h1 id=\"负一-项目简介\"><a class=\"anchor\" href=\"#负一-项目简介\">#</a> 负一、项目简介</h1>\n<pre><code>附加章节。本章是项目和产品初步说明和构想，最终的产品信息在后续的《产品定义说明书》中确定。\n</code></pre>\n<h2 id=\"-11-产品说明\"><a class=\"anchor\" href=\"#-11-产品说明\">#</a> -1.1 产品说明</h2>\n<p><strong>功能</strong>：嵌入式实用示例代码展示<br />\n<strong>编辑 / 编译环境</strong>：Ubuntu Linux、Windows<br />\n<strong> 运行环境</strong>：Ubuntu Linux、硬件仿真器：SkyEye/ARMulator/Softgun/RealBoard/QEMU/Protenus/Keil/RTSM、目标开发板<br />\n<strong>使用语言</strong>：C、C++、汇编等<br />\n<strong>控制</strong>：Console 控制台、Ncurses 基于文本的用户界面、QT、Web<br />\n<strong> 接口</strong>：API、私有通讯协议<br />\n<strong>用途</strong>：展示嵌入式编程技巧、架构、模块<br />\n<strong>目标群体</strong>：入门嵌入式编程的人员、工作中查找技术实现的人员<br />\n<strong>要求</strong>：文档齐全、从易到难、有目录索引、模块独立不耦合、以实用为准</p>\n<h2 id=\"-12-项目背景\"><a class=\"anchor\" href=\"#-12-项目背景\">#</a> -1.2 项目背景</h2>\n<pre><code>因为UP主想自己从头到尾做一个项目。\n一是记录自己的经验，方便以后工作中要用到时回来查看抄代码；\n二是做出东西时能不断给自己成就感，打发晚上和周末漫长的时间；\n三是如果能帮助到任何人也是很美好的一件事。\n</code></pre>\n<h1 id=\"〇-项目流程\"><a class=\"anchor\" href=\"#〇-项目流程\">#</a> 〇、项目流程</h1>\n<pre><code>本章是附加章节，主要介绍一个项目的完整生命周期所需要的操作步骤，进行一下项目管理知识普及，实际的《项目启动说明书》从第一章开始。\n</code></pre>\n<h2 id=\"01-项目启动阶段\"><a class=\"anchor\" href=\"#01-项目启动阶段\">#</a> 0.1 项目启动阶段</h2>\n<pre><code>项目启动由项目负责人或者启动过程组成员负责，项目启动的初始原因可能是负责人的灵感、负责人发现商机、产品更新迭代、竞争对手推出新品等等。\n项目启动以项目启动会的召开为标志，在项目启动会召开之前需要准备以下材料：\n输出文档：《项目启动说明书》\n项目启动说明书中包含以下章节：\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>产品定义</th>\n<th>需求计划</th>\n<th>项目计划</th>\n<th>人员配置</th>\n<th>规章制度</th>\n<th>风险预估</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>产品描述</td>\n<td>调研计划</td>\n<td>实施计划</td>\n<td>项目负责人</td>\n<td>项目管理</td>\n<td>骨干人员流动</td>\n</tr>\n<tr>\n<td>主要功能</td>\n<td>调研问卷 数据采集表</td>\n<td>时间安排 里程碑计划 进度检查</td>\n<td>产品经理</td>\n<td>项目开发流程</td>\n<td>团队氛围涣散</td>\n</tr>\n<tr>\n<td>产品特色</td>\n<td>调研记录</td>\n<td>开发计划</td>\n<td>项目经理</td>\n<td>需求变更流程</td>\n<td>进度延后</td>\n</tr>\n<tr>\n<td>实施的意义</td>\n<td>调研总结</td>\n<td>资源 预算 成本计划</td>\n<td>客户代表</td>\n<td>版本控制章程</td>\n<td>质量不达标</td>\n</tr>\n<tr>\n<td>提交产物 完成标记  成果展望</td>\n<td>系统分析</td>\n<td>交付物计划</td>\n<td>开发团队</td>\n<td>保密制度</td>\n<td>成本超支</td>\n</tr>\n<tr>\n<td>约束条件 支持的操作系统 接口</td>\n<td>可行性分析</td>\n<td>沟通计划</td>\n<td>测试团队</td>\n<td>Bug 追踪流程</td>\n<td>需求频繁变更</td>\n</tr>\n<tr>\n<td>目标用户</td>\n<td>竞品分析</td>\n<td>质量控制计划</td>\n<td>人员与职责</td>\n<td>奖惩制度</td>\n<td>目标及需求不明确</td>\n</tr>\n<tr>\n<td>项目范围 使用场景 项目目标</td>\n<td>商业价值</td>\n<td>风险控制计划</td>\n<td>组织结构</td>\n<td></td>\n<td>人员技能不足</td>\n</tr>\n<tr>\n<td>项目背景</td>\n<td>规格说明书</td>\n<td>用户培训计划</td>\n<td></td>\n<td></td>\n<td>市场萎缩</td>\n</tr>\n<tr>\n<td></td>\n<td>成本要求</td>\n<td></td>\n<td></td>\n<td></td>\n<td>竞品增加</td>\n</tr>\n</tbody>\n</table>\n<p>《项目启动说明书》</p>\n<h2 id=\"02-需求分析阶段\"><a class=\"anchor\" href=\"#02-需求分析阶段\">#</a> 0.2 需求分析阶段</h2>\n<table>\n<thead>\n<tr>\n<th>需求定义</th>\n<th>竞品分析</th>\n<th>市场调研</th>\n<th>商业价值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>功能 子功能 接口</td>\n<td>公司背景</td>\n<td>用户需求</td>\n<td>项目价值</td>\n</tr>\n<tr>\n<td>性能需求</td>\n<td>用户数量</td>\n<td>功能满意度</td>\n<td>社会价值</td>\n</tr>\n<tr>\n<td>可靠性需求</td>\n<td>融资进展</td>\n<td>功能接受度</td>\n<td>用户价值</td>\n</tr>\n<tr>\n<td>响应时间</td>\n<td>特色功能</td>\n<td>用户访谈</td>\n<td></td>\n</tr>\n<tr>\n<td>可扩展性</td>\n<td>交互分析</td>\n<td>利润导向</td>\n<td></td>\n</tr>\n<tr>\n<td>数据流图</td>\n<td>用户评论</td>\n<td>市场的问题</td>\n<td></td>\n</tr>\n<tr>\n<td>运行环境 设计约束</td>\n<td></td>\n<td>市场的机会</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>《需求规格说明书》</p>\n<h2 id=\"03-概要设计阶段\"><a class=\"anchor\" href=\"#03-概要设计阶段\">#</a> 0.3 概要设计阶段</h2>\n<table>\n<thead>\n<tr>\n<th>系统架构</th>\n<th>系统框图</th>\n<th>架构</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>系统分析评审</td>\n<td>系统流程图</td>\n<td>顺序执行</td>\n</tr>\n<tr>\n<td>概要设计说明书</td>\n<td>开发系统</td>\n<td>时间片切分</td>\n</tr>\n<tr>\n<td>系统框架</td>\n<td>目标系统</td>\n<td>模块路由</td>\n</tr>\n<tr>\n<td>稳定性</td>\n<td></td>\n<td>状态机</td>\n</tr>\n<tr>\n<td>远程升级</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>安全性</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>《概要设计说明书》</p>\n<h2 id=\"04-详细设计阶段\"><a class=\"anchor\" href=\"#04-详细设计阶段\">#</a> 0.4 详细设计阶段</h2>\n<table>\n<thead>\n<tr>\n<th>详细设计文档</th>\n<th>模块设计文档</th>\n<th>单元测试文档</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>接口说明</td>\n<td>函数功能接口</td>\n<td>单元测试用例</td>\n</tr>\n<tr>\n<td>API 接口函数说明</td>\n<td>数据结构</td>\n<td></td>\n</tr>\n<tr>\n<td>通讯协议</td>\n<td>全局变量</td>\n<td></td>\n</tr>\n<tr>\n<td>模块划分</td>\n<td>文件读写</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>错误输出模块</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"05-开发\"><a class=\"anchor\" href=\"#05-开发\">#</a> 0.5 开发</h2>\n<pre><code>系统原型、《编码规范》、代码管理规范、设计文档规范、交叉审核\n分支管理、bug追踪、进度报告、版本号说明、CICD自动测试自动发布\n系统分析文档\n</code></pre>\n<h2 id=\"06-测试\"><a class=\"anchor\" href=\"#06-测试\">#</a> 0.6 测试</h2>\n<pre><code>《测试大纲》、测试计划、测试报告、问题清单、测试用例、产品集成测试\n功能测试、压力测试、性能测试（提供性能参数）、抗干扰测试\n</code></pre>\n<h2 id=\"07-交付发布\"><a class=\"anchor\" href=\"#07-交付发布\">#</a> 0.7 交付 / 发布</h2>\n<pre><code>用户说明、产品说明、项目总结、系统管理手册、安装配置手册、用户操作手册\n用户培训计划、用户培训教程、系统上线报告、问题清单、项目验收报告、项目总结报告\n</code></pre>\n<h2 id=\"08-售后与升级\"><a class=\"anchor\" href=\"#08-售后与升级\">#</a> 0.8 售后与升级</h2>\n<pre><code>用户体验调查、缺陷追踪\n</code></pre>\n<h1 id=\"一-产品定义\"><a class=\"anchor\" href=\"#一-产品定义\">#</a> 一、产品定义</h1>\n<p>==== 产品定义<br />\n一款展示嵌入式软件编程规范和技巧的源码库，可以在 Ubuntu 主机 / 硬件仿真器 / 实际开发板运行的软件系统，包含从简答单个训练用例到复杂软件系统的全套开发文档和源码，可读、可仿真、可运行。<br />\n逐步展示嵌入式软件 C 语言编程技巧：编程规范、注释规范、源文件管理、编译控制、版本命名、模块编写、驱动编写、应用编写、协议设计、网络编程、系统架构、模块设计、接口设计、人机交互、单元测试、算法优化、版本管理……</p>\n<h1 id=\"二-需求计划\"><a class=\"anchor\" href=\"#二-需求计划\">#</a> 二、需求计划</h1>\n<p>==== 需求定义<br />\n一键确定主机性能 确定主机环境 确定编译工具 确定测试环境（字符串菜单 qt web 文档在线查看） boot 选择 区分有无 MMU</p>\n<h1 id=\"三-项目计划\"><a class=\"anchor\" href=\"#三-项目计划\">#</a> 三、项目计划</h1>\n<p>==== 一些准则<br />\n要做的功能都是自己会做的，不需要太多学习<br />\n作出的东西都是有实际作用 复杂的工程不替换一开始简单的功能，让人可以从最简单的开始慢慢接触<br />\n成品至少包含嵌入式中每一个方向。命名：模块名 + 系统名 + 芯片名 + 板级，所有设备上线探测，<br />\n代码有不加宏定义的版本，有加宏定义的版本​<br />\n首先要是自己都会的，然后所有的东西都有实际用处，其次要循序渐进各步骤的代码都有，搜索 arm 模拟器，51protenus 单片机模拟器，确定使用仿真平台。目的是使用所有能仿真的外设，做网络通讯产品控制别人的传感器执行器。有多少玩就能相互控制多少人的设备。所有的例程都应用在仿真器中，但是也要保证能稍作修改就能跑到实际硬件中。目的是所有跑起来的程序都有相互通信的可能。可以连一个网站，可以查找哪些设备在线，专门用来受理不同主机的网络请求，使两台设备相互通讯。第一阶段把编程规范说清楚就行。出一个 git 使用教程，实例解说。<br />\n（画出组织结构图）</p>\n<h1 id=\"四-人员配置\"><a class=\"anchor\" href=\"#四-人员配置\">#</a> 四、人员配置</h1>\n<h1 id=\"五-规章制度\"><a class=\"anchor\" href=\"#五-规章制度\">#</a> 五、规章制度</h1>\n<p>==== 沟通方案<br />\n微信群、邮件、gitee 留言、钉钉工时打卡<br />\n ==== 项目管理：禅道<br />\n代码管理：gitee<br />\n==== 项目开发流程<br />\n文档、表格、流程图、时序图、甘特图：markdown 思维导图（脑图）：XMind<br />\n 瀑布开发、敏捷开发<br />\n部门管理与项目管理分开<br />\n源码文件夹划分</p>\n<h1 id=\"六-风险预估\"><a class=\"anchor\" href=\"#六-风险预估\">#</a> 六、风险预估</h1>\n",
            "tags": [
                "工作",
                "工作效率",
                "嵌入式编程",
                "教程"
            ]
        },
        {
            "id": "https://metal-heart.github.io/posts/2155/",
            "url": "https://metal-heart.github.io/posts/2155/",
            "title": "《常用shell命令整理之操作文件和目录3》",
            "date_published": "2021-10-12T02:45:48.000Z",
            "content_html": "<h2 id=\"1-hostname-查看主机名\"><a class=\"anchor\" href=\"#1-hostname-查看主机名\">#</a> 1. hostname - 查看主机名</h2>\n<p><code>hostname</code>  命令用于查看系统的主机名，或是修改系统的主机名。</p>\n<p><code>hostname</code>  的常用命令如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 显示系统的当前主机名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">hostname</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 修改你系统的主机名</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">hostname</span> blinkfox-system</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 使用 -F 选项，从指定的文件中读取主机名</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">hostname</span> <span class=\"token parameter variable\">-F</span> /root/hostname.txt</pre></td></tr></table></figure><h2 id=\"2-uptime-查看系统运行时间\"><a class=\"anchor\" href=\"#2-uptime-查看系统运行时间\">#</a> 2. uptime - 查看系统运行时间</h2>\n<p><code>uptime</code>  命令用于打印系统的运行时间等信息。使用如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">uptime</span></pre></td></tr></table></figure><h2 id=\"3-w-who-列出登录的用户\"><a class=\"anchor\" href=\"#3-w-who-列出登录的用户\">#</a> 3. w、who - 列出登录的用户</h2>\n<p><code>w</code>  命令用于显示登录用户及他们当前运行的进程。输入的内容格式如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>w</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 打印如下</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">22</span>:42  up <span class=\"token number\">18</span> days, <span class=\"token number\">1</span> hr, <span class=\"token number\">2</span> users, load averages: <span class=\"token number\">1.23</span> <span class=\"token number\">1.79</span> <span class=\"token number\">1.75</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token environment constant\">USER</span>     TTY      FROM              LOGIN@  IDLE WHAT</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>blinkfox console  -                日19   6days -</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>blinkfox s000     -                五23       - w</pre></td></tr></table></figure><p><code>who</code>  命令有与 <code>w</code>  命令类似的用途，但它的功能比 <code>w</code>  命令更强大一些。语法格式如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">who</span> <span class=\"token punctuation\">[</span>OPTION<span class=\"token punctuation\">]</span><span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">[</span>FILE <span class=\"token operator\">|</span> ARG1 ARG2<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p><code>who</code>  常用命令如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 显示当前登录的所有用户信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">who</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 显示系统的启动时间</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">who</span> <span class=\"token parameter variable\">-b</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 显示系统登录进程</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">who</span> <span class=\"token parameter variable\">-l</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 显示与当前标准输入关联的用户信息</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">who</span> <span class=\"token parameter variable\">-m</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 显示系统的运行级别</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">who</span> <span class=\"token parameter variable\">-r</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 显示所有登录用户的用户名和登录用户数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">who</span> <span class=\"token parameter variable\">-q</span></pre></td></tr></table></figure><h2 id=\"4-uname-查看系统信息\"><a class=\"anchor\" href=\"#4-uname-查看系统信息\">#</a> 4. uname - 查看系统信息</h2>\n<p><code>uname</code>  命令用于打印内核名称和版本、主机名等系统信息。命令的语法如下所示：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">uname</span> <span class=\"token punctuation\">[</span>OPTION<span class=\"token punctuation\">]</span><span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><p>常用使用方式如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 只打印内核的名称</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">uname</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 使用 -n 选项，只打印系统的主机名</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">uname</span> <span class=\"token parameter variable\">-n</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 使用 -r 选项，打印内核版本信息</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">uname</span> <span class=\"token parameter variable\">-r</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 使用 -m 选项，打印系统的硬件名称</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">uname</span> <span class=\"token parameter variable\">-m</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 使用 -p 选项，打印系统的处理器类型信息</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">uname</span> <span class=\"token parameter variable\">-p</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 使用 -i 选项，打印系统的硬件平台信息</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">uname</span> <span class=\"token parameter variable\">-i</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 使用 -a 选项，打印上述所有示例中的信息</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">uname</span> <span class=\"token parameter variable\">-a</span></pre></td></tr></table></figure><h2 id=\"5-date-显示和设置系统日期和时间\"><a class=\"anchor\" href=\"#5-date-显示和设置系统日期和时间\">#</a> 5. date - 显示和设置系统日期和时间</h2>\n<p><code>date</code>  命令用于以多种格式显示日期和时间，或设置系统的日期和时间。 <code>date</code>  命令的语法如下所示：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">date</span> <span class=\"token punctuation\">[</span>OPTION<span class=\"token punctuation\">]</span><span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">[</span>+FORMAT<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">date</span> <span class=\"token punctuation\">[</span>-u<span class=\"token operator\">|</span>--utc<span class=\"token operator\">|</span>--universal<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>MMDDhhmm<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>CC<span class=\"token punctuation\">]</span>YY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>.ss<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>常用使用命令如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 以默认格式显示系统的当前日期时间</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">date</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 格式化当前日期</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">date</span> +<span class=\"token string\">\"%Y-%m-%d\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 格式化输出昨天的日期</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">date</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">\"1 day ago\"</span> +<span class=\"token string\">\"%Y-%m-%d\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 2 秒后格式化输出</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">date</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">\"2 second\"</span> +<span class=\"token string\">\"%Y-%m-%d %H:%M.%S\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 普通格式化转出</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">date</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">\"2009-12-12\"</span> +<span class=\"token string\">\"%Y/%m/%d %H:%M.%S\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># apache 格式转换</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">date</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">\"Dec 5, 2009 12:00:37 AM\"</span> +<span class=\"token string\">\"%Y-%m-%d %H:%M.%S\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 日期加减操作</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">date</span> +%Y%m%d <span class=\"token comment\">#显示前天年月日</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">date</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">\"+1 day\"</span> +%Y%m%d <span class=\"token comment\">#显示前一天的日期</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token function\">date</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">\"-1 day\"</span> +%Y%m%d <span class=\"token comment\">#显示后一天的日期</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token function\">date</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">\"-1 month\"</span> +%Y%m%d <span class=\"token comment\">#显示上一月的日期</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token function\">date</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">\"+1 month\"</span> +%Y%m%d <span class=\"token comment\">#显示下一月的日期</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token function\">date</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">\"-1 year\"</span> +%Y%m%d <span class=\"token comment\">#显示前一年的日期</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token function\">date</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">\"+1 year\"</span> +%Y%m%d <span class=\"token comment\">#显示下一年的日期</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\"># 设定时间</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token function\">date</span> <span class=\"token parameter variable\">-s</span> <span class=\"token comment\"># 设置当前时间，只有 root 权限才能设置，其他只能查看</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token function\">date</span> <span class=\"token parameter variable\">-s</span> <span class=\"token number\">20160816</span> <span class=\"token comment\"># 设置成 20160816，这样会把具体时间设置成空 00:00:00</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token function\">date</span> <span class=\"token parameter variable\">-s</span> 01:01:01 <span class=\"token comment\"># 设置具体时间，不会对日期做更改</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token function\">date</span> <span class=\"token parameter variable\">-s</span> <span class=\"token string\">\"01:01:01 2012-05-23\"</span> <span class=\"token comment\"># 这样可以设置全部时间 </span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token function\">date</span> <span class=\"token parameter variable\">-s</span> <span class=\"token string\">\"01:01:01 20120523\"</span> <span class=\"token comment\"># 这样可以设置全部时间</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token function\">date</span> <span class=\"token parameter variable\">-s</span> <span class=\"token string\">\"2012-05-23 01:01:01\"</span> <span class=\"token comment\"># 这样可以设置全部时间 </span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token function\">date</span> <span class=\"token parameter variable\">-s</span> <span class=\"token string\">\"20120523 01:01:01\"</span> <span class=\"token comment\"># 这样可以设置全部时间</span></pre></td></tr></table></figure><h2 id=\"6-id-显示用户属性\"><a class=\"anchor\" href=\"#6-id-显示用户属性\">#</a> 6. id - 显示用户属性</h2>\n<p><code>id</code>  命令用于打印输出用户 <code>uid</code> 、 <code>gid</code> 、用户名和组名等用户身份信息。 <code>id</code>  命令的语法如下所示：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">id</span> <span class=\"token punctuation\">[</span>OPTION<span class=\"token punctuation\">]</span><span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">[</span>USERNAME<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>常见使用命令如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 输出当前用户的 uid、用户名、gid、组名及用户属于的群组信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">id</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 使用 -u 选项，输出用户的 uid</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">id</span> <span class=\"token parameter variable\">-u</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#-u 选项和 -n 选项结合使用，输出账户的用户名</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">id</span> <span class=\"token parameter variable\">-un</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 使用 -g 选项，输出帐号当前起作用的 gid</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">id</span> <span class=\"token parameter variable\">-g</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># -g 与 -n 选项结合使用，输出帐号当前起作用的用户组名</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">id</span> <span class=\"token parameter variable\">-gn</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 使用 -G 选项，输出帐号所属的所有群组 id</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">id</span> <span class=\"token parameter variable\">-G</span> root</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># -G 与 -n 选项结合使用，输出账号所属的所有群组的名称</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">id</span> <span class=\"token parameter variable\">-Gn</span> root</pre></td></tr></table></figure>",
            "tags": [
                "工具",
                "Linux",
                "编程语言",
                "编程",
                "shell"
            ]
        },
        {
            "id": "https://metal-heart.github.io/posts/62570/",
            "url": "https://metal-heart.github.io/posts/62570/",
            "title": "《常用shell命令整理之操作文件和目录2》",
            "date_published": "2021-10-12T02:45:48.000Z",
            "content_html": "<h2 id=\"1-ls-列出文件名和目录\"><a class=\"anchor\" href=\"#1-ls-列出文件名和目录\">#</a> 1. ls - 列出文件名和目录</h2>\n<p><code>ls</code>  命令是 <code>Linux</code>  中最常用的命令之一，其作用就是列出文件名和目录。在命令行提示符下，直接输入 <code>ls</code>  命令，不带任何选项，将列出当前目录下所有文件和目录，但不会显示详细的信息，比如，文件类型、大小、修改日期和时间、权限等。</p>\n<p>以下便是 <code>ls</code>  命令及其选项的作用说明：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 仅列出当前目录下所有文件和目录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ls</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 每行显示一条记录，每条记录包括文件类型、大小、修改日期和时间、权限等</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 将文件大小显示符合人类阅读习惯的格式</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-lh</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 将使用不同的特殊字符归类不同的文件类型</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-F</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 以长列表格式列出某个目录的信息</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-ld</span> /var/log</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 将递归地列出子目录的内容</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-R</span> /etc/sysconfig/</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 以长列表格式按文件或目录的修改时间倒序地列出文件和目录</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-ltr</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># 以长列表格式按文件大小顺序列出文件和目录</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-ls</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># 列出包括隐藏文件或目录在内的所有文件和目录，包括 “.”（当前目录）和 “..”（父目录）</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-a</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>B</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\"># 列出包括隐藏文件或目录在内的所有文件和目录，不包括 “.”（当前目录）和 “..”（父目录）</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-A</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>输出的内容类似于-l选项，指示显示uid和gid，替代显示所有者和用户组</pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-n</span></pre></td></tr></table></figure><h2 id=\"2-cat-连接显示文件内容\"><a class=\"anchor\" href=\"#2-cat-连接显示文件内容\">#</a> 2. cat - 连接显示文件内容</h2>\n<p><code>cat</code>  命令也是 Linux 系统中最常用的命令之一。 <code>cat</code>  命令让我们可以看看文件的内容、连接文件、创建一个或多个文件和重定向输出到终端或文件。</p>\n<p><code>cat</code>  命令的语法如下所示：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> <span class=\"token punctuation\">[</span>OPTION<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>FILE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><p><code>cat</code>  常用命令如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 使用 cat 命令查看文件 /etc/group 的内容</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cat</span> /etc/group</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 显示多个文件的内容</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">cat</span> /etc/redhat-release /etc/issue</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># -n 选项，可以显示文件内容的行号</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">cat</span> <span class=\"token parameter variable\">-n</span> /etc/fstab</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># -b 选项和 -n 选项类似，但只标识非空白行的行号</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">cat</span> <span class=\"token parameter variable\">-b</span> /etc/fstab</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># -e 选项，将在每一行的结尾显示 “$” 字符</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">cat</span> <span class=\"token parameter variable\">-e</span> /etc/fstab</pre></td></tr></table></figure><blockquote>\n<p>当你只输入 cat 命令，而没有任何参数时，它只是接收标准输入的内容并在标准输出中显示。所以你在输入一行内容并回车后，会在接下来的一行显示相同的内容。你也可以重定向标准输出到一个新文件。</p>\n</blockquote>\n<h2 id=\"3less-more-分屏显示文件\"><a class=\"anchor\" href=\"#3less-more-分屏显示文件\">#</a> 3.less、more - 分屏显示文件</h2>\n<p><code>more</code>  命令在你使用小的 xterm 窗口时，或是想不使用文本编辑器而只是简单地阅读一个文件时是很有用的。more 命令是一个用于一次翻阅一整屏文件的过滤器。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看一个文件，自动清空屏幕并显示文件开头部分</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">more</span> /etc/inittab</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 指定一次显示 num 行</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">more</span> <span class=\"token parameter variable\">-num</span> /etc/inittab</pre></td></tr></table></figure><p>与 <code>more</code>  命令相比，我个人更喜欢 <code>less</code>  命令来查看文件。 <code>less</code>  命令与 <code>more</code>  命令类似，但 <code>less</code>  命令向前和向后翻页都支持，而且 <code>less</code>  命令不需要在查看前加载整个文件，即 <code>less</code>  命令查看文件更快速。</p>\n<p><code>less</code>  常用命令参数如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token parameter variable\">-b</span>  <span class=\"token operator\">&lt;</span>缓冲区大小<span class=\"token operator\">></span> 设置缓冲区的大小</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token parameter variable\">-e</span>  当文件显示结束后，自动离开</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token parameter variable\">-f</span>  强迫打开特殊文件，例如外围设备代号、目录和二进制文件</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token parameter variable\">-g</span>  只标志最后搜索的关键词</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token parameter variable\">-i</span>  忽略搜索时的大小写</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token parameter variable\">-m</span>  显示类似more命令的百分比</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token parameter variable\">-N</span>  显示每行的行号</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token parameter variable\">-o</span>  <span class=\"token operator\">&lt;</span>文件名<span class=\"token operator\">></span> 将less 输出的内容在指定文件中保存起来</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token parameter variable\">-Q</span>  不使用警告音</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token parameter variable\">-s</span>  显示连续空行为一行</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token parameter variable\">-S</span>  行过长时间将超出部分舍弃</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token parameter variable\">-x</span>  <span class=\"token operator\">&lt;</span>数字<span class=\"token operator\">></span> 将“tab”键显示为规定的数字空格</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>/字符串：向下搜索“字符串”的功能</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>?字符串：向上搜索“字符串”的功能</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>n： 重复前一个搜索（与 / 或 ? 有关）</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>N： 反向重复前一个搜索（与 / 或 ? 有关）</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>b  向后翻一页</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>d  向后翻半页</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>h  显示帮助界面</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Q  退出less 命令</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>u  向前滚动半页</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>y  向前滚动一行</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>空格键 滚动一行</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>回车键 滚动一页</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">[</span>pagedown<span class=\"token punctuation\">]</span>： 向下翻动一页</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">[</span>pageup<span class=\"token punctuation\">]</span>：   向上翻动一页</pre></td></tr></table></figure><h2 id=\"4head-显示文件头部\"><a class=\"anchor\" href=\"#4head-显示文件头部\">#</a> 4.head - 显示文件头部</h2>\n<p><code>head</code>  命令用于打印指定输入的开头部分内容。默认情况下，打印每个指定输入的前 10 行内容。</p>\n<p>使用 <code>-n</code>  选项可以指定打印文件的前 N 行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 指定打印文件的前 5 行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">head</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">5</span> /etc/inittab</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>（或）head <span class=\"token parameter variable\">-5</span> /etc/inittab</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 打印文件的前 N 个字节的数据</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">head</span> <span class=\"token parameter variable\">-c</span> <span class=\"token number\">10</span> /etc/inittab</pre></td></tr></table></figure><h2 id=\"5tail-显示文件尾部\"><a class=\"anchor\" href=\"#5tail-显示文件尾部\">#</a> 5.tail - 显示文件尾部</h2>\n<p><code>tail</code>  命令和 <code>head</code>  命令相反，它打印指定输入的结尾部分的内容。默认情况下，它打印指定输入的最后 10 行内容。</p>\n<p>使用 <code>-n</code>  选项可以指定打印文件的最后 N 行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 指定打印文件的后 10 行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">tail</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">10</span> /etc/inittab</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">tail</span> <span class=\"token parameter variable\">-10</span> /etc/inittab</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 即时打印文件中新写入的行</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">tail</span> <span class=\"token parameter variable\">-f</span> /var/log/messages</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># --retry 选项表示持续尝试打开某个文件，当你想打开一个稍后才会创建或即使不可用的文件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">tail</span> <span class=\"token parameter variable\">-f</span> /tmp/debug.log <span class=\"token parameter variable\">--retry</span></pre></td></tr></table></figure><h2 id=\"6file-查看文件类型\"><a class=\"anchor\" href=\"#6file-查看文件类型\">#</a> 6.file - 查看文件类型</h2>\n<p><code>file</code>  命令用于接收一个文件作为参数并执行某些测试，已确定正确的文件类型。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看文件类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">file</span> /etc/inittab</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 可以 MIME 类型的格式显示文件类型的信息</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">file</span> <span class=\"token parameter variable\">-i</span>  /etc/inittab</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 使用 - N 选项，输出的队列可以以在文件名之后无空白填充的形式显示</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">file</span> <span class=\"token parameter variable\">-N</span> *</pre></td></tr></table></figure><h2 id=\"7wc-查看文件统计信息\"><a class=\"anchor\" href=\"#7wc-查看文件统计信息\">#</a> 7.wc - 查看文件统计信息</h2>\n<p><code>wc</code>  命令用于查看文件的行数、单词数和字符数等信息。语法类似如下所示：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wc</span> filename</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>X Y Z /etc/inittab</pre></td></tr></table></figure><p>其中 X 表示行数，Y 表示单词数，Z 表示字节数，filename 表示文件名。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># -l 选项，可以只统计文件的行数信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span> /etc/inittab</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># -w 选项，可以只统计文件的单词数信息</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">wc</span> <span class=\"token parameter variable\">-w</span> /etc/inittab</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># -c 选项，可以只统计文件的字节数信息</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">wc</span> <span class=\"token parameter variable\">-c</span> /etc/inittab</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># -L 选项，可以只统计文件中最长的行的长度</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">wc</span> <span class=\"token parameter variable\">-L</span> /etc/inittab</pre></td></tr></table></figure><h2 id=\"8find-查找文件或目录\"><a class=\"anchor\" href=\"#8find-查找文件或目录\">#</a> 8.find - 查找文件或目录</h2>\n<p><code>find</code>  命令用于根据你指定的参数搜索和定位文件和目录的列表。 <code>find</code>  命令可以在多种情况下使用，比如你可以通过权限、用户、用户组、文件类型、日期、大小和其他可能的条件来查找文件。</p>\n<p><code>find</code>  命令常用使用和说明如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查找指定目录下的某个文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">find</span> /etc/ <span class=\"token parameter variable\">-name</span> inittab</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 在当前目录下查找名称为 inittab 的文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-name</span> inittab</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 在当前目录下，文件不区分大小写是 example 的所有文件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-iname</span> example</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 找出当前目录下所有以 sh 结尾的文件</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*.sh\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 找出当前目录下，文件权限是 777 的所有文件</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-perm</span> <span class=\"token number\">777</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 找出当前目录下，文件权限不是 777 的所有文件</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-type</span> f <span class=\"token operator\">!</span> <span class=\"token parameter variable\">-perm</span> <span class=\"token number\">777</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 找出当前目录下所有只读文件</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-type</span> f <span class=\"token operator\">!</span> <span class=\"token parameter variable\">-perm</span> /a+w</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># 找出你帐号主目录下的所有可执行文件</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token function\">find</span> ~ <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-perm</span> /a+w</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># 找出 /tmp 目录下的.log 文件并将其删除：</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token function\">find</span> /tmp/ <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*.log\"</span> <span class=\"token parameter variable\">-exec</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\"># 找出当前目录下的所有空文件</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-empty</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># 找出当前目录下的所有空目录</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-type</span> d <span class=\"token parameter variable\">-empty</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\"># 找出 /tmp 目录下的所有隐藏文件</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token function\">find</span> /tmp/ <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\".*\"</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\"># 找出 /tmp 目录下，所有者是 root 的文件和目录</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token function\">find</span> /tmp/ <span class=\"token parameter variable\">-user</span> root</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># 找出 /tmp 目录下，用户组是 developer 的文件和目录</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token function\">find</span> /tmp/ <span class=\"token parameter variable\">-group</span> root</pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\"># 找出你账号的主目录下，3 天前修改的文件</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token function\">find</span> ~ <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-mtime</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\"># 找出你账号的主目录下，30 天以前修改的所有文件</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token function\">find</span> ~ <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-mtime</span> +30</pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\"># 找出你账号的主目录下，3 天以内修改的所有文件</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token function\">find</span> ~ <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-mtime</span> <span class=\"token parameter variable\">-3</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\"># 找出你账号的主目录下，30 天以前，60 天以内修改的所有文件</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token function\">find</span> ~ <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-mtime</span> +30 <span class=\"token parameter variable\">-mtime</span> <span class=\"token parameter variable\">-60</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\"># 找出 /etc 目录下，一小时以内变更过的文件</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token function\">find</span> /etc <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-cmin</span> <span class=\"token parameter variable\">-60</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\"># 找出 /etc 目录下，一小时以内访问过的文件</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token function\">find</span> /etc <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-amin</span> <span class=\"token parameter variable\">-60</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\"># 找出你账号主目录下，大小是 50MB 的所有文件</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token function\">find</span> ~ <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-size</span> 50MB</pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\"># 找出你账号主目录下，大于 50MB 小于 100MB 的所有文件</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token function\">find</span> ~ <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-size</span> +50MB <span class=\"token parameter variable\">-size</span> <span class=\"token parameter variable\">-100MB</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\"># 找出你账号主目录下，大于 100MB 的文件并将其删除</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token function\">find</span> ~ <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-size</span> +100MB <span class=\"token parameter variable\">-exec</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "工具",
                "Linux",
                "编程语言"
            ]
        },
        {
            "id": "https://metal-heart.github.io/posts/31850/",
            "url": "https://metal-heart.github.io/posts/31850/",
            "title": "《常用shell命令整理之操作文件和目录4》",
            "date_published": "2021-10-12T02:45:48.000Z",
            "content_html": "<h2 id=\"1-sort-文本排序\"><a class=\"anchor\" href=\"#1-sort-文本排序\">#</a> 1. sort - 文本排序</h2>\n<p><code>sort</code>  命令用于将文本文件的行排序。默认情况下， <code>sort</code>  命令是按照字符串的字母顺序排序。</p>\n<p>sort 的常用命令如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 将文本内容按字母顺序排序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sort</span> example.txt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 使用 -u 选项，移除所有重复行后排序</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sort</span> <span class=\"token parameter variable\">-u</span> example.txt</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 使用 -n 选项，将令数字按数值的大小排序</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">sort</span> <span class=\"token parameter variable\">-n</span> example.txt</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 使用 -r 选项，以倒序方式排序</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">sort</span> <span class=\"token parameter variable\">-n</span> <span class=\"token parameter variable\">-r</span> example.txt</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 同时将 file1、file2 的内容排序</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">sort</span> file1 file2</pre></td></tr></table></figure><h2 id=\"2uniq-文本去重\"><a class=\"anchor\" href=\"#2uniq-文本去重\">#</a> 2.uniq - 文本去重</h2>\n<p><code>uniq</code>  命令用于移除或发现文件中重复的条目。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 它将移除文件中重复的行并显示单一行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">uniq</span> example.txt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 可以统计重复行出现的次数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">uniq</span> <span class=\"token parameter variable\">-c</span> example.txt</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 使用 -d 选项，只显示文件中有重复的行并只显示一次</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">uniq</span> <span class=\"token parameter variable\">-d</span> example.txt</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 使用 -D 选项，显示文件中所有重复的行</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">uniq</span> <span class=\"token parameter variable\">-D</span> example.txt</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 使用 -u 选项，只显示文件中不重复的行</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">uniq</span> <span class=\"token parameter variable\">-u</span> example.txt</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 使用 -w 选项，限制 uniq 命令只比较每行的前 3 个字符是否重复</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">uniq</span> <span class=\"token parameter variable\">-w</span> <span class=\"token number\">3</span> example.txt</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 使用 -s 选项，避免 uniq 命令比较每行的前 3 个字符，只比较后面的字符是否重复</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">uniq</span> <span class=\"token parameter variable\">-s</span> <span class=\"token number\">3</span> example.txt</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># 使用 -f 选项，避免 uniq 命令比较第一列的内容，只比较后面的字符是否重复</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token function\">uniq</span> <span class=\"token parameter variable\">-f</span> <span class=\"token number\">1</span> example.txt</pre></td></tr></table></figure><h2 id=\"3tr\"><a class=\"anchor\" href=\"#3tr\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovLzMudHI=\">3.tr</span> - 替换或删除字符</h2>\n<p><code>tr</code>  命令主要用于删除文件中控制字符或进行字符转换。使用 <code>tr</code>  时要转换两个字符串：字符串 1 用于查询，字符串 2 用于处理各种转换。 <code>tr</code>  刚执行时，字符串 1 中的字符被映射到字符串 2 中的字符，然后转换操作开始。</p>\n<p><code>tr</code>  命令的语法如下所示：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tr</span> <span class=\"token punctuation\">[</span>OPTION<span class=\"token punctuation\">]</span><span class=\"token punctuation\">..</span>. SET1 <span class=\"token punctuation\">[</span>SET2<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>常用命令示例：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 若要将大括号转换为小括号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">tr</span> <span class=\"token string\">'&#123;&#125;'</span> <span class=\"token string\">'()'</span> <span class=\"token operator\">&lt;</span> textfile <span class=\"token operator\">></span> newfile</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 若要将大括号转换成方括号</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">tr</span> <span class=\"token string\">'&#123;&#125;'</span> <span class=\"token string\">'\\[]'</span> <span class=\"token operator\">&lt;</span> textfile <span class=\"token operator\">></span> newfile</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 若要将小写字符转换成大写，请输入：</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">tr</span> <span class=\"token string\">'a-z'</span> <span class=\"token string\">'A-Z'</span> <span class=\"token operator\">&lt;</span> textfile <span class=\"token operator\">></span> newfile</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 若要创建一个文件中的单词列表</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">tr</span> <span class=\"token parameter variable\">-cs</span> <span class=\"token string\">'[:lower:][:upper:]'</span> <span class=\"token string\">'[\\n*]'</span> <span class=\"token operator\">&lt;</span> textfile <span class=\"token operator\">></span> newfile</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 若要从某个文件中删除所有空字符</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">tr</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'\\0'</span> <span class=\"token operator\">&lt;</span> textfile <span class=\"token operator\">></span> newfile</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 若要用单独的换行替换每一序列的一个或多个换行，请输入：</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">tr</span> <span class=\"token parameter variable\">-s</span> <span class=\"token string\">'\\n'</span> <span class=\"token operator\">&lt;</span> textfile <span class=\"token operator\">></span> newfile</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 要以单个 “#” 字符替换 &lt;space> 字符类中的每个字符序列</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">tr</span> <span class=\"token parameter variable\">-s</span> <span class=\"token string\">'[:space:]'</span> <span class=\"token string\">'[#*]'</span></pre></td></tr></table></figure><h2 id=\"4grep-查找字符串\"><a class=\"anchor\" href=\"#4grep-查找字符串\">#</a> 4.grep - 查找字符串</h2>\n<p><code>grep</code>  命令用于搜索文本或指定的文件中与指定的字符串或模式相匹配的行。默认情况下， <code>grep</code>  命令只显示匹配的行。</p>\n<p><code>grep</code>  命令的语法如下所示：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">grep</span> <span class=\"token punctuation\">[</span>OPTION<span class=\"token punctuation\">]</span><span class=\"token punctuation\">..</span>. PATTERN <span class=\"token punctuation\">[</span>FILE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">grep</span> <span class=\"token punctuation\">[</span>OPTION<span class=\"token punctuation\">]</span><span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">[</span>-e PATTERN <span class=\"token operator\">|</span> <span class=\"token parameter variable\">-f</span> FILE<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>FILE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># `grep` 命令查找文件 /etc/passwd 中帐号 blinkfox 的信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">grep</span> blinkfox /etc/passwd</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 使用 -i 选项，强制 grep 命令忽略搜索关键字的大小写</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-i</span> blinkfox /etc/passwd</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 使用 -r 选项，可以递归搜索指定目录下的所有文件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-r</span> blinkfox /etc/</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 使用 -w 选项，只匹配包含指定单词的行</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-w</span> blinkfox /etc/</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 使用 -c 选项，报告文件或文本中模式被匹配的次数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-c</span> blinkfox /etc/passwd</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 使用 -n 选项，显示每一个匹配的行的行号</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-n</span> blinkfox /etc/passwd</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 使用 -v 选项，可以输出除匹配指定模式的行以外的其他所有行</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> blinkfox /etc/passwd</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># 使用 --color 选项，在输出中将匹配的字符串以彩色的形式标出</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token function\">grep</span> <span class=\"token parameter variable\">--color</span> blinkfox /etc/passwd</pre></td></tr></table></figure><h2 id=\"5diff-比较两个文件\"><a class=\"anchor\" href=\"#5diff-比较两个文件\">#</a> 5.diff - 比较两个文件</h2>\n<p><code>diff</code>  命令用于比较两个文件，并找出它们之间的不同。 <code>diff</code>  命令的语法如下所示：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">diff</span> <span class=\"token punctuation\">[</span>OPTION<span class=\"token punctuation\">]</span><span class=\"token punctuation\">..</span>. from-file to-file</pre></td></tr></table></figure><p>常用使用方式如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 比较两个文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">diff</span> nsswitch.conf nsswitch.conf.org</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 使用 -w 选项，比较时忽略空格</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">diff</span> <span class=\"token parameter variable\">-w</span> nsswitch.conf nsswitch.conf.org</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 使用 -y 选项，以并排的格式输出两个文件的比较结果</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">diff</span> <span class=\"token parameter variable\">-y</span> nsswitch.conf nsswitch.conf.org</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>使用 <span class=\"token parameter variable\">-c</span> 选项，以上下对比的格式输出两个文件的比较结果</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">diff</span> <span class=\"token parameter variable\">-c</span> nsswitch.conf nsswitch.conf.org</pre></td></tr></table></figure>",
            "tags": [
                "工具",
                "Linux",
                "编程语言",
                "编程",
                "shell"
            ]
        },
        {
            "id": "https://metal-heart.github.io/posts/48477/",
            "url": "https://metal-heart.github.io/posts/48477/",
            "title": "《常用shell命令整理之操作文件和目录1》",
            "date_published": "2021-10-10T02:45:48.000Z",
            "content_html": "<h2 id=\"1-touch-创建文件\"><a class=\"anchor\" href=\"#1-touch-创建文件\">#</a> 1. touch - 创建文件</h2>\n<p><code>touch</code>  命令就可用于创建、变更和修改文件的时间戳。它是 Linux 操作系统的标准程序。 <code>touch</code>  命令又如下选项：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>-a: 只改变访问时间 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>-c: 不创建任何文件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-m: 只改变修改时间</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>-r: 使用指定文件的时间替代当前时间</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-t: 使用 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>CC<span class=\"token punctuation\">]</span>YY<span class=\"token punctuation\">]</span>MMDDhhmm<span class=\"token punctuation\">[</span>.ss<span class=\"token punctuation\">]</span> 替代当前时间</pre></td></tr></table></figure><p>touch 命令的常见用法如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 创建一个名为 effyl 的新空文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">touch</span> effyl</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 同时创建名称分别为 effyl myeffyl lueffyl 的三个文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">touch</span> effyl myeffyl lueffyl</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 使用 -a 选项，可以改变或更新文件的最新访问时间，如果文件 effyl 不存在，则新创建一个</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">touch</span> <span class=\"token parameter variable\">-a</span> effyl</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 使用 -c 选项，可以避免创建一个新文件，并用当前时间更新文件的时间戳</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">touch</span> <span class=\"token parameter variable\">-c</span> effyl</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 使用 -m 选项，可以只改变文件的修改时间，而访问时间不变</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">touch</span> <span class=\"token parameter variable\">-m</span> effyl</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 使用 -c 和 -t 选项，来明确设置文件的时间</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">touch</span> <span class=\"token parameter variable\">-c</span> <span class=\"token parameter variable\">-t</span> YYMMDDHHMM filename</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 如果想使用文件 myeffyl 的时间戳更新文件 effyl 的时间戳，可以使用 -r 选项</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">touch</span> <span class=\"token parameter variable\">-r</span> myeffyl effyl</pre></td></tr></table></figure><h2 id=\"2mkdir-创建目录\"><a class=\"anchor\" href=\"#2mkdir-创建目录\">#</a> 2.mkdir - 创建目录</h2>\n<p><code>mkdir</code>  命令用于创建一个新目录。最基本的 <code>mkdir</code>  命令的使用方法如下所示：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 在当前目录下创建一个给定的目录名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token operator\">&lt;</span>dirname<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 在 backup 中的相对路径创建一个名为 old 的目录</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">mkdir</span> backup/old</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 在 backup 中的绝对路径中创建一个名为 old 的目录</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">mkdir</span> /home/blinkfox/backup/old</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 使用 -p 选项，会自动创建所有还不存在的父目录</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> backup/old</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 使用 -m 选项，可以设置将要创建目录的权限</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 如：创建一个任何人都有读写访问权限的目录</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> <span class=\"token parameter variable\">-m</span> <span class=\"token number\">777</span> backup/old</pre></td></tr></table></figure><h2 id=\"3cp-复制文件或目录\"><a class=\"anchor\" href=\"#3cp-复制文件或目录\">#</a> 3.cp - 复制文件或目录</h2>\n<p><code>cp</code>  命令用于将文件从一个地方复制到另一个地方。原来的文件保持不变，新文件可能保持原名或用一个不同的名字。</p>\n<p>使用 cp 命令复制文件和目录的语法有以下几种：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 复制源文件到目标文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cp</span> <span class=\"token punctuation\">[</span>OPTION<span class=\"token punctuation\">]</span> SOURCE DEST</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 复制一个或多个源文件到一个目录</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">cp</span> <span class=\"token punctuation\">[</span>OPTION<span class=\"token punctuation\">]</span> SOURCE<span class=\"token punctuation\">..</span>. DIRECTORY</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 同上</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">cp</span> <span class=\"token punctuation\">[</span>OPTION<span class=\"token punctuation\">]</span> <span class=\"token parameter variable\">-t</span> DIRECTORY SOURCE<span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><p>常用使用示例如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 在当前目录下，创建一个文件 file.txt 的副本，取名为 newfile.txt</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cp</span> file.txt newfile.txt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 复制当前目录下的 file.txt 文件到 /tmp 目录下</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">cp</span> file.txt /tmp</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 复制当前目录下的所有文件到 /tmp 目录下</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">cp</span> * /tmp</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 使用 -p 选项，可以使复制一个文件到新文件时，保留源文件的所有者、权限等信息</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">cp</span> <span class=\"token parameter variable\">-p</span> filename /path/to/new/location/myfile</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 使用 -R 或 -r 选项，恶意递归地复制一个目录</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 即将一个目录及其下的所有文件和子目录都复制到另一个目录</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">cp</span> <span class=\"token parameter variable\">-R</span> * /home/blinkfox/backup</pre></td></tr></table></figure><h2 id=\"4ln-链接文件或目录\"><a class=\"anchor\" href=\"#4ln-链接文件或目录\">#</a> 4.ln - 链接文件或目录</h2>\n<p><code>ln</code>  命令用于创建软链接或硬链接。使用 -s 选项，可以创建一个软链接：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 在目录 lib 下创建一个软链接 library.so，链接到 /home/blinkfox/src/library.so</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ln</span> <span class=\"token parameter variable\">-s</span> /home/blinkfox/src/library.so /home/blinkfox/lib</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 创建目录的软链接</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">ln</span> <span class=\"token parameter variable\">-s</span> /home/blinkfox/src <span class=\"token builtin class-name\">source</span></pre></td></tr></table></figure><h2 id=\"5-mv-移动文件或目录\"><a class=\"anchor\" href=\"#5-mv-移动文件或目录\">#</a> 5. mv - 移动文件或目录</h2>\n<p><code>mv</code>  命令用于将文件和目录从一个位置移到另外一个位置。除了移动文件， <code>mv</code>  命令还可用于修改文件或目录的名字。</p>\n<p>mv 命令的基本语法如下所示：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mv</span> SOURCE<span class=\"token punctuation\">..</span>. DIRECTORY</pre></td></tr></table></figure><p>常用命令如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 将当前目录下的文件 source.txt 移到目录 /tmp 下</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mv</span> source.txt /tmp</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 将目录 dir1、dir2 移到目录 dir_dist 下</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">mv</span> dir1 dir2 dir_dist</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 将当前目录下的 old.txt 文件更名为 new.txt</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">mv</span> old.txt new.txt</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 使用 -i 选项，在重写覆盖目标文件或目录之前给出提示信息</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">mv</span> <span class=\"token parameter variable\">-i</span> old.txt new.txt</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 将当前目录下的所有文件移动到目录 /tmp 下</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">mv</span> * /tmp/</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 使用 -i 选项，从 dir1 中移动那些在目标目录中不存在的文件到目标目录</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">mv</span> <span class=\"token parameter variable\">-u</span> dir1/* dir2/</pre></td></tr></table></figure><h2 id=\"6rm-删除文件或目录\"><a class=\"anchor\" href=\"#6rm-删除文件或目录\">#</a> 6.rm - 删除文件或目录</h2>\n<p><code>rm</code>  命令用于删除指定的文件和目录。其语法如下所示：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">..</span>. FILE<span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><p><code>rm</code>  的常用命令如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 删除当前目录下的文件 file1.txt、file2.txt、file3.txt</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">rm</span> file1.txt file2.txt file3.txt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 删除当前目录下的所有文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">rm</span> *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 删除你当前帐号主目录下的 temp 目录中的所有文件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">rm</span> ~/temp/*</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 使用 -i 选项，可以在删除每个文件或目录前提示用户确认</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-i</span> *</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 删除当前目录下所有以 \".doc\" 结尾的文件</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">rm</span> *.doc</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 删除当前目录下所有文件名中包含 \"movie\" 字符串的文件</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">rm</span> *movie*</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 删除当前目录下所有以 \"a\" 开头的文件</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">rm</span> a*</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># 删除当前目录下整个文件名（包括扩展名）只有 3 个字符的所有文件</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token function\">rm</span> ???</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># 删除当前目录下文件扩展名有两个字符的所有文件</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token function\">rm</span> *.??</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\"># 删除当前目录下文件名中含有字母 a 或 b 或 c 的所有文件</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token function\">rm</span> *<span class=\"token punctuation\">[</span>abc<span class=\"token punctuation\">]</span>*</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># 删除当前目录下文件名中包含 0~9 的所有文件</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token function\">rm</span> *<span class=\"token punctuation\">[</span><span class=\"token number\">0</span>-9<span class=\"token punctuation\">]</span>*</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\"># 删除当前目录下文件扩展名是字母 c 或 h 的所有文件</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token function\">rm</span> *.<span class=\"token punctuation\">[</span>ch<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\"># 删除 /tmp 目录下的所有文件及其子目录</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> /tmp/*</pre></td></tr></table></figure><blockquote>\n<p>-f 删除前不提示用户确认，并忽略不存在的文件</p>\n</blockquote>\n<blockquote>\n<p>-r 递归地删除目录及其下的内容</p>\n</blockquote>\n",
            "tags": [
                "工具",
                "Linux",
                "编程语言"
            ]
        },
        {
            "id": "https://metal-heart.github.io/posts/f9c292b/",
            "url": "https://metal-heart.github.io/posts/f9c292b/",
            "title": "《软件工程之美》笔记",
            "date_published": "2021-07-12T05:20:31.000Z",
            "content_html": "<h1 id=\"软件工程之美笔记\"><a class=\"anchor\" href=\"#软件工程之美笔记\">#</a> 《软件工程之美》笔记</h1>\n<h2 id=\"到底应该怎样理解软件工程\"><a class=\"anchor\" href=\"#到底应该怎样理解软件工程\">#</a> 到底应该怎样理解软件工程？</h2>\n<p><strong>软件产品危机</strong>：软件产品质量低劣、软件维护工作量大、成本不断上升、进度不可控、程序人员无限度地增加。</p>\n<p>软件工程，它是为研究和克服软件危机而生。</p>\n<p><strong>软件工程的本质</strong>：用工程化方法去规范软件开发，让项目可以按时完成、成本可控、质量有保证。</p>\n<p><strong>软件工程的核心</strong>：是围绕软件项目开发，对开发过程的组织，对方法的运用，对工具的使用。</p>\n<p><strong>软件工程 = 过程 + 方法 + 工具。</strong></p>\n<h2 id=\"工程思维把每件事都当作一个项目来推进\"><a class=\"anchor\" href=\"#工程思维把每件事都当作一个项目来推进\">#</a> 工程思维：把每件事都当作一个项目来推进</h2>\n<p><strong>有目的、有计划、有步骤地解决问题的方法就是工程方法。</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/dunwu/images/dev/snap/20220712132650.png\" alt=\"\" /></p>\n<p>工程方法通常会分成六个阶段：想法、概念、计划、设计、开发和发布。</p>\n<ul>\n<li>** 想法：** 想法阶段通常是想要解决问题。最开始问题通常是模糊的，所以需要清晰地定义好问题，研究其可行性，检查是否有可行的解决方案。</li>\n<li>** 概念：** 概念阶段就是用图纸、草图、模型等方式，提出一些概念性的解决方案。这些方案可能有多个，最终会确定一个解决方案。</li>\n<li>** 计划：** 计划阶段是关于如何实施的计划，通常会包含人员、任务、任务持续时间、任务的依赖关系，以及完成项目所需要的预算。</li>\n<li>** 设计：** 设计阶段就是要针对产品需求，将解决方案进一步细化，设计整体架构和划分功能模块，作为分工合作和开发实施的一个依据和参考。</li>\n<li>** 开发：** 开发阶段就是根据设计方案，将解决方案构建实施。开发阶段通常是一个迭代的过程，这个阶段通常会有构建、测试、调试和重新设计的迭代。</li>\n<li>** 发布：** 将最终结果包括文档发布。</li>\n</ul>\n<h2 id=\"瀑布模型像工厂流水线一样把软件开发分层化\"><a class=\"anchor\" href=\"#瀑布模型像工厂流水线一样把软件开发分层化\">#</a> 瀑布模型：像工厂流水线一样把软件开发分层化</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/dunwu/images/dev/snap/20220712133102.png\" alt=\"\" /></p>\n<p>瀑布模型把整个项目过程分成了六个主要阶段：</p>\n<ul>\n<li><strong>问题的定义及规划</strong>：这个阶段是需求方和开发方共同确定软件开发目标，同时还要做可行性研究，以确定项目可行。这个阶段会产生需求文档和可行性研究报告。</li>\n<li><strong>需求分析</strong>：对需求方提出的所有需求，进行详细的分析。这个阶段一般需要和客户反复确认，以保证能充分理解客户需求。最终会形成需求分析文档。</li>\n<li><strong>软件设计</strong>：根据需求分析的结果，对整个软件系统进行抽象和设计，如系统框架设计，数据库设计等等。最后会形成架构设计文档。</li>\n<li><strong>程序编码</strong>：将架构设计和界面设计的结果转换成计算机能运行的程序代码。</li>\n<li><strong>软件测试</strong>：在编码完成后，对可运行的结果对照需求分析文档进行严密的测试。如果测试发现问题，需要修复。最终测试完成后，形成测试报告。</li>\n<li><strong>运行维护</strong>：在软件开发完成，正式运行投入使用。后续需要继续维护，修复错误和增加功能。交付时需要提供使用说明文档。</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/dunwu/images/dev/snap/20220712133357.png\" alt=\"\" /></p>\n<h2 id=\"瀑布模型之外还有哪些开发模型\"><a class=\"anchor\" href=\"#瀑布模型之外还有哪些开发模型\">#</a> 瀑布模型之外，还有哪些开发模型？</h2>\n<h3 id=\"快速原型模型\"><a class=\"anchor\" href=\"#快速原型模型\">#</a> 快速原型模型</h3>\n<p><strong>快速原型模型，就是为了要解决客户的需求不明确和需求多变的问题。</strong></p>\n<p>先迅速建造一个可以运行的软件原型，然后收集用户反馈，再反复修改确认，使开发出的软件能真正反映用户需求，这种开发模型就叫快速原型模型，也叫原型模型。</p>\n<p>原型模型因为能快速修改，所以能快速对用户的反馈和变更作出响应，同时原型模型注重和客户的沟通，所以最终开发出来的软件能够真正反映用户的需求。</p>\n<p>但这种快速原型开发往往是以牺牲质量为代价的。</p>\n<h3 id=\"增量模型\"><a class=\"anchor\" href=\"#增量模型\">#</a> 增量模型</h3>\n<p>增量模型是把待开发的软件系统模块化，然后在每个小模块的开发过程中，应用一个小瀑布模型，对这个模块进行需求分析、设计、编码和测试。相对瀑布模型而言，增量模型周期更短，不需要一次性把整个软件产品交付给客户，而是分批次交付。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/dunwu/images/dev/snap/20220712134154.png\" alt=\"\" /></p>\n<p>因为增量模型的根基是模块化，所以，** 如果系统不能模块化，那么将很难采用增量模型的模式来开发。** 另外，对模块的划分很抽象，这本身对于系统架构的水平是要求很高的。</p>\n<p>基于这样的特点，增量模型主要适用于：<strong>需求比较清楚，能模块化的软件系统，并且可以按模块分批次交付。</strong></p>\n<h3 id=\"迭代模型\"><a class=\"anchor\" href=\"#迭代模型\">#</a> 迭代模型</h3>\n<p>迭代模型每次只设计和实现产品的一部分，然后逐步完成更多功能。每次设计和实现一个阶段叫做一个迭代。</p>\n<p>在迭代模型中，整个项目被拆分成一系列小的迭代。通常一个迭代的时间都是固定的，不会太长，例如 2-4 周。每次迭代只实现一部分功能，做能在这个周期内完成的功能。</p>\n<p>在一个迭代中都会包括需求分析、设计、实现和测试，类似于一个小瀑布模型。<strong>迭代结束时要完成一个可以运行的交付版本。</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/dunwu/images/dev/snap/20220712134329.png\" alt=\"\" /></p>\n<p><strong>增量模型是按照功能模块来拆分；而迭代模型则是按照时间来拆分，看单位时间内能完成多少功能。</strong></p>\n<h3 id=\"v-模型\"><a class=\"anchor\" href=\"#v-模型\">#</a> V 模型</h3>\n<p>V 模型适合外包项目。V 模型本质上还是瀑布模型，只不过它是更重视对每个阶段验收测试的过程模型。</p>\n<p>针对从需求定义一直到编码阶段，每个阶段都有对应的测试验收。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/dunwu/images/dev/snap/20220712134518.png\" alt=\"\" /></p>\n<h3 id=\"螺旋模型\"><a class=\"anchor\" href=\"#螺旋模型\">#</a> 螺旋模型</h3>\n<p>如果你现在要做一个风险很高的项目，客户可能随时不给你钱了。这种情况下，如果采用传统瀑布模型，无疑风险很高，可能做完的时候才发现客户给不了钱，损失就很大了！</p>\n<p>这种情况，基于增量模型或者迭代模型进行开发，就可以有效降低风险。你需要注意的是，在每次交付的时候，要同时做一个风险评估，如果风险过大就不继续后续开发了，及时止损。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/dunwu/images/dev/snap/20220712134638.png\" alt=\"\" /></p>\n<p>这种强调风险，以风险驱动的方式完善项目的开发模型就是螺旋模型。</p>\n<h2 id=\"敏捷开发到底是想解决什么问题\"><a class=\"anchor\" href=\"#敏捷开发到底是想解决什么问题\">#</a> 敏捷开发到底是想解决什么问题？</h2>\n<p>敏捷开发是一套价值观和原则。</p>\n<p>瀑布模型面向的是过程，而敏捷开发面向的是人。</p>\n<h2 id=\"大厂都在用哪些敏捷方法上\"><a class=\"anchor\" href=\"#大厂都在用哪些敏捷方法上\">#</a> 大厂都在用哪些敏捷方法？（上）</h2>\n<h3 id=\"一切工作任务围绕-ticket-开展\"><a class=\"anchor\" href=\"#一切工作任务围绕-ticket-开展\">#</a> 一切工作任务围绕 Ticket 开展</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/dunwu/images/dev/snap/20220712135814.png\" alt=\"\" /></p>\n<ul>\n<li>每一个任务的状态都可以被跟踪起来：什么时候开始做的，谁在做，做完没有。</li>\n<li>整个团队在做什么一目了然。</li>\n<li>Ticket 和敏捷开发中的 Backlog（任务清单）正好结合起来，通过 Ticket 可以收集管理整个项目的 Backlog 和当前 Sprint（迭代）的 Backlog。</li>\n</ul>\n<h3 id=\"基于-git-和-ci-的开发流程\"><a class=\"anchor\" href=\"#基于-git-和-ci-的开发流程\">#</a> 基于 Git 和 CI 的开发流程</h3>\n<p>Git 本来只是源代码管理工具，但是其强大的分支管理和灵活的权限控制，结合一定的开发流程，却可以帮助你很好的控制代码质量。</p>\n<h3 id=\"站立会议\"><a class=\"anchor\" href=\"#站立会议\">#</a> 站立会议</h3>\n<ul>\n<li>每个人轮流介绍一下，昨天干了什么事情，今天计划做什么事情，工作上有没有障碍无法推进。有问题，记录到 “问题停车场”。</li>\n<li>检查最近的 Ticket，甄别一下优先级。有需要讨论的先收集到问题停车场。</li>\n<li>针对未讨论的问题展开讨论，能在会议时间内解决的问题，就马上解决，不能解决的会后再私下讨论或者再组织会议。</li>\n</ul>\n<h2 id=\"大厂都在用哪些敏捷方法下\"><a class=\"anchor\" href=\"#大厂都在用哪些敏捷方法下\">#</a> 大厂都在用哪些敏捷方法？（下）</h2>\n<p>在分工上：</p>\n<ul>\n<li>产品经理：写需求设计文档，将需求整理成 Ticket，随时和项目成员沟通确认需求；</li>\n<li>开发人员：每天从看板上按照优先级从高到低领取 Ticket，完成日常开发任务；</li>\n<li>测试人员：测试已经部署到测试环境的程序，如果发现 Bug，提交 Ticket；</li>\n<li>项目经理：保障日常工作流程正常执行，让团队成员可以专注工作，提供必要的帮助，解决问题。</li>\n</ul>\n<p>如何完成需求和修复 Bug？</p>\n<p>日常工作，是围绕 Ticket 来开展的。所有的需求、Bug、任务都作为 Ticket 提交到项目的 Backlog，每个 Sprint 的任务都以看板的形式展现出来。</p>\n<p>每个人手头事情忙完后，就可以去看板上的 “To Do” 栏，按照优先级从高到低选取新的 Ticket。选取后移动到 “In Progress” 栏。</p>\n<p>每周一部署生产环境</p>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90aW1lLmdlZWtiYW5nLm9yZy9jb2x1bW4vaW50cm8vMTAwMDIzNzAx\">软件工程之美</span></li>\n</ul>\n",
            "tags": [
                "软件",
                "笔记",
                "软件工程"
            ]
        },
        {
            "id": "https://metal-heart.github.io/posts/34066/",
            "url": "https://metal-heart.github.io/posts/34066/",
            "title": "《软件工程》笔记",
            "date_published": "2021-07-12T05:20:31.000Z",
            "content_html": "<h1 id=\"软件工程之美笔记\"><a class=\"anchor\" href=\"#软件工程之美笔记\">#</a> 《软件工程之美》笔记</h1>\n<h2 id=\"到底应该怎样理解软件工程\"><a class=\"anchor\" href=\"#到底应该怎样理解软件工程\">#</a> 到底应该怎样理解软件工程？</h2>\n<p><strong>软件产品危机</strong>：软件产品质量低劣、软件维护工作量大、成本不断上升、进度不可控、程序人员无限度地增加。</p>\n<p>软件工程，它是为研究和克服软件危机而生。</p>\n<p><strong>软件工程的本质</strong>：用工程化方法去规范软件开发，让项目可以按时完成、成本可控、质量有保证。</p>\n<p><strong>软件工程的核心</strong>：是围绕软件项目开发，对开发过程的组织，对方法的运用，对工具的使用。</p>\n<p><strong>软件工程 = 过程 + 方法 + 工具。</strong></p>\n<h2 id=\"工程思维把每件事都当作一个项目来推进\"><a class=\"anchor\" href=\"#工程思维把每件事都当作一个项目来推进\">#</a> 工程思维：把每件事都当作一个项目来推进</h2>\n<p><strong>有目的、有计划、有步骤地解决问题的方法就是工程方法。</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/dunwu/images/dev/snap/20220712132650.png\" alt=\"\" /></p>\n<p>工程方法通常会分成六个阶段：想法、概念、计划、设计、开发和发布。</p>\n<ul>\n<li>** 想法：** 想法阶段通常是想要解决问题。最开始问题通常是模糊的，所以需要清晰地定义好问题，研究其可行性，检查是否有可行的解决方案。</li>\n<li>** 概念：** 概念阶段就是用图纸、草图、模型等方式，提出一些概念性的解决方案。这些方案可能有多个，最终会确定一个解决方案。</li>\n<li>** 计划：** 计划阶段是关于如何实施的计划，通常会包含人员、任务、任务持续时间、任务的依赖关系，以及完成项目所需要的预算。</li>\n<li>** 设计：** 设计阶段就是要针对产品需求，将解决方案进一步细化，设计整体架构和划分功能模块，作为分工合作和开发实施的一个依据和参考。</li>\n<li>** 开发：** 开发阶段就是根据设计方案，将解决方案构建实施。开发阶段通常是一个迭代的过程，这个阶段通常会有构建、测试、调试和重新设计的迭代。</li>\n<li>** 发布：** 将最终结果包括文档发布。</li>\n</ul>\n<h2 id=\"瀑布模型像工厂流水线一样把软件开发分层化\"><a class=\"anchor\" href=\"#瀑布模型像工厂流水线一样把软件开发分层化\">#</a> 瀑布模型：像工厂流水线一样把软件开发分层化</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/dunwu/images/dev/snap/20220712133102.png\" alt=\"\" /></p>\n<p>瀑布模型把整个项目过程分成了六个主要阶段：</p>\n<ul>\n<li><strong>问题的定义及规划</strong>：这个阶段是需求方和开发方共同确定软件开发目标，同时还要做可行性研究，以确定项目可行。这个阶段会产生需求文档和可行性研究报告。</li>\n<li><strong>需求分析</strong>：对需求方提出的所有需求，进行详细的分析。这个阶段一般需要和客户反复确认，以保证能充分理解客户需求。最终会形成需求分析文档。</li>\n<li><strong>软件设计</strong>：根据需求分析的结果，对整个软件系统进行抽象和设计，如系统框架设计，数据库设计等等。最后会形成架构设计文档。</li>\n<li><strong>程序编码</strong>：将架构设计和界面设计的结果转换成计算机能运行的程序代码。</li>\n<li><strong>软件测试</strong>：在编码完成后，对可运行的结果对照需求分析文档进行严密的测试。如果测试发现问题，需要修复。最终测试完成后，形成测试报告。</li>\n<li><strong>运行维护</strong>：在软件开发完成，正式运行投入使用。后续需要继续维护，修复错误和增加功能。交付时需要提供使用说明文档。</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/dunwu/images/dev/snap/20220712133357.png\" alt=\"\" /></p>\n<h2 id=\"瀑布模型之外还有哪些开发模型\"><a class=\"anchor\" href=\"#瀑布模型之外还有哪些开发模型\">#</a> 瀑布模型之外，还有哪些开发模型？</h2>\n<h3 id=\"快速原型模型\"><a class=\"anchor\" href=\"#快速原型模型\">#</a> 快速原型模型</h3>\n<p><strong>快速原型模型，就是为了要解决客户的需求不明确和需求多变的问题。</strong></p>\n<p>先迅速建造一个可以运行的软件原型，然后收集用户反馈，再反复修改确认，使开发出的软件能真正反映用户需求，这种开发模型就叫快速原型模型，也叫原型模型。</p>\n<p>原型模型因为能快速修改，所以能快速对用户的反馈和变更作出响应，同时原型模型注重和客户的沟通，所以最终开发出来的软件能够真正反映用户的需求。</p>\n<p>但这种快速原型开发往往是以牺牲质量为代价的。</p>\n<h3 id=\"增量模型\"><a class=\"anchor\" href=\"#增量模型\">#</a> 增量模型</h3>\n<p>增量模型是把待开发的软件系统模块化，然后在每个小模块的开发过程中，应用一个小瀑布模型，对这个模块进行需求分析、设计、编码和测试。相对瀑布模型而言，增量模型周期更短，不需要一次性把整个软件产品交付给客户，而是分批次交付。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/dunwu/images/dev/snap/20220712134154.png\" alt=\"\" /></p>\n<p>因为增量模型的根基是模块化，所以，** 如果系统不能模块化，那么将很难采用增量模型的模式来开发。** 另外，对模块的划分很抽象，这本身对于系统架构的水平是要求很高的。</p>\n<p>基于这样的特点，增量模型主要适用于：<strong>需求比较清楚，能模块化的软件系统，并且可以按模块分批次交付。</strong></p>\n<h3 id=\"迭代模型\"><a class=\"anchor\" href=\"#迭代模型\">#</a> 迭代模型</h3>\n<p>迭代模型每次只设计和实现产品的一部分，然后逐步完成更多功能。每次设计和实现一个阶段叫做一个迭代。</p>\n<p>在迭代模型中，整个项目被拆分成一系列小的迭代。通常一个迭代的时间都是固定的，不会太长，例如 2-4 周。每次迭代只实现一部分功能，做能在这个周期内完成的功能。</p>\n<p>在一个迭代中都会包括需求分析、设计、实现和测试，类似于一个小瀑布模型。<strong>迭代结束时要完成一个可以运行的交付版本。</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/dunwu/images/dev/snap/20220712134329.png\" alt=\"\" /></p>\n<p><strong>增量模型是按照功能模块来拆分；而迭代模型则是按照时间来拆分，看单位时间内能完成多少功能。</strong></p>\n<h3 id=\"v-模型\"><a class=\"anchor\" href=\"#v-模型\">#</a> V 模型</h3>\n<p>V 模型适合外包项目。V 模型本质上还是瀑布模型，只不过它是更重视对每个阶段验收测试的过程模型。</p>\n<p>针对从需求定义一直到编码阶段，每个阶段都有对应的测试验收。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/dunwu/images/dev/snap/20220712134518.png\" alt=\"\" /></p>\n<h3 id=\"螺旋模型\"><a class=\"anchor\" href=\"#螺旋模型\">#</a> 螺旋模型</h3>\n<p>如果你现在要做一个风险很高的项目，客户可能随时不给你钱了。这种情况下，如果采用传统瀑布模型，无疑风险很高，可能做完的时候才发现客户给不了钱，损失就很大了！</p>\n<p>这种情况，基于增量模型或者迭代模型进行开发，就可以有效降低风险。你需要注意的是，在每次交付的时候，要同时做一个风险评估，如果风险过大就不继续后续开发了，及时止损。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/dunwu/images/dev/snap/20220712134638.png\" alt=\"\" /></p>\n<p>这种强调风险，以风险驱动的方式完善项目的开发模型就是螺旋模型。</p>\n<h2 id=\"敏捷开发到底是想解决什么问题\"><a class=\"anchor\" href=\"#敏捷开发到底是想解决什么问题\">#</a> 敏捷开发到底是想解决什么问题？</h2>\n<p>敏捷开发是一套价值观和原则。</p>\n<p>瀑布模型面向的是过程，而敏捷开发面向的是人。</p>\n<h2 id=\"大厂都在用哪些敏捷方法上\"><a class=\"anchor\" href=\"#大厂都在用哪些敏捷方法上\">#</a> 大厂都在用哪些敏捷方法？（上）</h2>\n<h3 id=\"一切工作任务围绕-ticket-开展\"><a class=\"anchor\" href=\"#一切工作任务围绕-ticket-开展\">#</a> 一切工作任务围绕 Ticket 开展</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/dunwu/images/dev/snap/20220712135814.png\" alt=\"\" /></p>\n<ul>\n<li>每一个任务的状态都可以被跟踪起来：什么时候开始做的，谁在做，做完没有。</li>\n<li>整个团队在做什么一目了然。</li>\n<li>Ticket 和敏捷开发中的 Backlog（任务清单）正好结合起来，通过 Ticket 可以收集管理整个项目的 Backlog 和当前 Sprint（迭代）的 Backlog。</li>\n</ul>\n<h3 id=\"基于-git-和-ci-的开发流程\"><a class=\"anchor\" href=\"#基于-git-和-ci-的开发流程\">#</a> 基于 Git 和 CI 的开发流程</h3>\n<p>Git 本来只是源代码管理工具，但是其强大的分支管理和灵活的权限控制，结合一定的开发流程，却可以帮助你很好的控制代码质量。</p>\n<h3 id=\"站立会议\"><a class=\"anchor\" href=\"#站立会议\">#</a> 站立会议</h3>\n<ul>\n<li>每个人轮流介绍一下，昨天干了什么事情，今天计划做什么事情，工作上有没有障碍无法推进。有问题，记录到 “问题停车场”。</li>\n<li>检查最近的 Ticket，甄别一下优先级。有需要讨论的先收集到问题停车场。</li>\n<li>针对未讨论的问题展开讨论，能在会议时间内解决的问题，就马上解决，不能解决的会后再私下讨论或者再组织会议。</li>\n</ul>\n<h2 id=\"大厂都在用哪些敏捷方法下\"><a class=\"anchor\" href=\"#大厂都在用哪些敏捷方法下\">#</a> 大厂都在用哪些敏捷方法？（下）</h2>\n<p>在分工上：</p>\n<ul>\n<li>产品经理：写需求设计文档，将需求整理成 Ticket，随时和项目成员沟通确认需求；</li>\n<li>开发人员：每天从看板上按照优先级从高到低领取 Ticket，完成日常开发任务；</li>\n<li>测试人员：测试已经部署到测试环境的程序，如果发现 Bug，提交 Ticket；</li>\n<li>项目经理：保障日常工作流程正常执行，让团队成员可以专注工作，提供必要的帮助，解决问题。</li>\n</ul>\n<p>如何完成需求和修复 Bug？</p>\n<p>日常工作，是围绕 Ticket 来开展的。所有的需求、Bug、任务都作为 Ticket 提交到项目的 Backlog，每个 Sprint 的任务都以看板的形式展现出来。</p>\n<p>每个人手头事情忙完后，就可以去看板上的 “To Do” 栏，按照优先级从高到低选取新的 Ticket。选取后移动到 “In Progress” 栏。</p>\n<p>每周一部署生产环境</p>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90aW1lLmdlZWtiYW5nLm9yZy9jb2x1bW4vaW50cm8vMTAwMDIzNzAx\">软件工程之美</span></li>\n</ul>\n",
            "tags": [
                "软件",
                "笔记",
                "软件工程",
                "笔记"
            ]
        },
        {
            "id": "https://metal-heart.github.io/posts/62526/",
            "url": "https://metal-heart.github.io/posts/62526/",
            "title": "《硬件设计经验谈》",
            "date_published": "2021-07-10T02:00:00.000Z",
            "content_html": "<h1 id=\"1充分了解各方的设计需求确定合适的解决方案\"><a class=\"anchor\" href=\"#1充分了解各方的设计需求确定合适的解决方案\">#</a> 1. 充分了解各方的设计需求，确定合适的解决方案</h1>\n<p>启动一个硬件开发项目，原始的推动力会来自于很多方面，比如市场的需要，基于整个系统架构的需要，应用软件部门的功能实现需要，提高系统某方面能力的需要等等，所以作为一个硬件系统的设计者，要<strong>主动的去了解各个方面的需求，并且综合起来，提出最合适的硬件解决方案</strong>。比如 A 项目的原始推动力来自于公司内部的一个高层软件小组，他们在实际当中发现原有的处理器板 IP 转发能力不能满足要求，从而对于系统的配置和使用都会造成很大的不便，所以他们提出了对新硬件的需求。根据这个目标，硬件方案中就针对性的选用了两个高性能网络处理器，然后还需要深入的和软件设计者交流，以确定内存大小，内部结构，对外接口和调试接口的数量及类型等等细节，比如软件人员喜欢将控制信令通路和数据通路完全分开来，这样在确定内部数据走向的时候要慎重考虑。项目开始之初是需要召开很多的讨论会议的，应该尽量邀请所有相关部门来参与，好处有三个，第一可以充分了解大家的需要，以免在系统设计上遗漏重要的功能，第二是可以让各个部门了解这个项目的情况，提早做好时间和人员上协作的准备，第三是从感情方面讲，在设计之初各个部门就参与了进来，这个项目就变成了大家共同的一个心血结晶，会得到大家的呵护和良好合作，对完成工作是很有帮助的。</p>\n<h1 id=\"2原理图设计中要注意的问题\"><a class=\"anchor\" href=\"#2原理图设计中要注意的问题\">#</a> 2. 原理图设计中要注意的问题</h1>\n<p><strong>原理图设计中要有 “拿来主义”，现在的芯片厂家一般都可以提供参考设计的原理图，所以要尽量的借助这些资源，在充分理解参考设计的基础上，做一些自己的发挥</strong>。当主要的芯片选定以后，最关键的外围设计包括了电源，时钟和芯片间的互连。</p>\n<p>电源是保证硬件系统正常工作的基础，设计中要详细的分析：<strong>系统能够提供的电源输入；单板需要产生的电源输出；各个电源需要提供的电流大小；电源电路效率；各个电源能够允许的波动范围；整个电源系统需要的上电顺序等等</strong>。比如 A 项目中的网络处理器需要 1.25V 作为核心电压，要求精度在＋5%- －3% 之间，电流需要 12A 左右，根据这些要求，设计中采用 5V 的电源输入，利用 Linear 的开关电源控制器和 IR 的 MOSFET 搭建了合适的电源供应电路，精度要求决定了输出电容的 ESR 选择，并且为防止电流过大造成的电压跌落，加入了远端反馈的功能。<br />\n时钟电路的实现要考虑到目标电路的抖动等要求，A 项目中用到了 GE 的 PHY 器件，刚开始的时候使用一个内部带锁相环的零延时时钟分配芯片提供 100MHz 时钟，结果 GE 链路上出现了丢包，后来换成简单的时钟 Buffer 器件就解决了丢包问题，分析起来就是内部的锁相环引入了抖动。<br />\n芯片之间的互连要保证数据的无误传输，在这方面，高速的差分信号线具有速率高，好布线，信号完整性好等特点，A 项目中的多芯片间互连均采用了高速差分信号线，在调试和测试中没有出现问题。</p>\n<h1 id=\"3pcb设计中要注意的问题\"><a class=\"anchor\" href=\"#3pcb设计中要注意的问题\">#</a> 3.PCB 设计中要注意的问题</h1>\n<p>PCB 设计中要做到目的明确，对于重要的信号线要非常严格的要求布线的长度和处理地环路，而对于低速和不重要的信号线就可以放在稍低的布线优先级上。重要的部分包括：电源的分割；内存的时钟线，控制线和数据线的长度要求；高速差分线的布线等等。<br />\n针对 DDR memory 这个部分的布线是非常关键的，要考虑到控制线和地址线的拓扑分布，数据线和时钟线的长度差别控制等方面，在实现的过程中，根据芯片的数据手册和实际的工作频率可以得出具体的布线规则要求，比如同一组内的数据线长度相差不能超过多少个 mil，每个通路之间的长度相差不能超过多少个 mil 等等。当这些要求确定后就可以明确要求 PCB 设计人员来实现了，如果设计中所有的重要布线要求都明确了，可以转换成整体的布线约束，利用 CAD 中的自动布线工具软件来实现 PCB 设计，这也是在高速 PCB 设计中的一个发展趋势。</p>\n<h1 id=\"4检查和调试\"><a class=\"anchor\" href=\"#4检查和调试\">#</a> 4. 检查和调试</h1>\n<p>当准备调试一块板的时候，一定要先认真的做好目视检查，检查在焊接的过程中是否有可见的短路和管脚搭锡等故障，检查是否有元器件型号放置错误，第一脚放置错误，漏装配等问题，然后用万用表<strong>测量各个电源到地的电阻，以检查是否有短路</strong>，这个好习惯可以避免贸然上电后损坏单板。调试的过程中要有平和的心态，遇见问题是非常正常的，要做的就是多做比较和分析，逐步的排除可能的原因，要坚信 “凡事都是有办法解决的” 和 “问题出现一定有它的原因”，这样最后一定能调试成功。</p>\n<h1 id=\"5一些总结的话\"><a class=\"anchor\" href=\"#5一些总结的话\">#</a> 5. 一些总结的话</h1>\n<p>现在从技术的角度来说，每个设计最终都可以做出来，但是一个项目的成功与否，不仅仅取决<strong>于技术上的实现，还与完成的时间，产品的质量，团队的配合密切相关，所以良好的团队协作，透明坦诚的项目沟通，精细周密的研发安排，充裕的物料和人员安排，这样才能保证一个项目的成功。</strong></p>\n<p>一个好的硬件工程师实际上就是一个项目经理，他 / 她需要从外界交流获取对自己设计的需求，然后汇总，分析成具体的硬件实现。还要跟众多的芯片和方案供应商联系，从中挑选出合适的方案，当原理图完成后，他 / 她要组织同事来进行配合评审和检查，还要和 CAD 工程师一起工作来完成 PCB 的设计。与此同时，还要准备好 BOM 清单，开始采购和准备物料，联系加工厂家完成板的贴装。在调试的过程中他 / 她要组织好软件工程师来一起攻关调试，配合测试工程师一起解决测试中发现的问题，等到产品推出到现场，如果出现问题，还需要做到及时的支持。所以做一个硬件设计人员要锻炼出良好的沟通能力，面对压力的调节能力，同一时间处理多个事务的协调和决断能力和良好平和的心态等等。</p>\n<p>还有细心和认真，因为硬件设计上的一个小疏忽往往就会造成非常大的经济损失，比如以前碰到一块板在 PCB 设计完备出制造文件的时候误操作造成了电源层和地层连在了一起，PCB 板制造完毕后又没有检查直接上生产线贴装，到测试的时候才发现短路问题，但是元器件已经都焊接到板上了，结果造成了几十万的损失。所以细心和认真的检查，负责任的测试，不懈的学习和积累，才能使得一个硬件设计人员持续不断的进步，而后术业有所小成。</p>\n",
            "tags": [
                "硬件设计",
                "硬件设计"
            ]
        },
        {
            "id": "https://metal-heart.github.io/posts/59766/",
            "url": "https://metal-heart.github.io/posts/59766/",
            "title": "《职场求生攻略》",
            "date_published": "2021-06-13T12:56:48.000Z",
            "content_html": "<h1 id=\"职场求生攻略笔记\"><a class=\"anchor\" href=\"#职场求生攻略笔记\">#</a> 《职场求生攻略》笔记</h1>\n<h2 id=\"学会如何工作和学习技术同等重要\"><a class=\"anchor\" href=\"#学会如何工作和学习技术同等重要\">#</a> 学会如何工作，和学习技术同等重要</h2>\n<div class=\"note info\">\n<p>以利益为视角，以换位思考为手段。</p>\n</div>\n<h2 id=\"优先级工作中那么多事情我要如何安排优先级\"><a class=\"anchor\" href=\"#优先级工作中那么多事情我要如何安排优先级\">#</a> 优先级：工作中那么多事情，我要如何安排优先级？</h2>\n<h3 id=\"基于工作性质安排优先级\"><a class=\"anchor\" href=\"#基于工作性质安排优先级\">#</a> 基于工作性质安排优先级</h3>\n<p>工作可以划分为：</p>\n<p>业务拓展：需求分析、设计、开发都属于这范畴。</p>\n<p>安全问题：安全无小事。要高度重视安全问题。</p>\n<p>线上问题：直接影响用户体验和权益。要第一优先级去处理。</p>\n<h3 id=\"基于合作安排优先级\"><a class=\"anchor\" href=\"#基于合作安排优先级\">#</a> 基于合作安排优先级</h3>\n<p>事情如果没有明显的轻重缓急，优先做那些会阻塞别人工作的事情。</p>\n<h3 id=\"做事情本身的优先级\"><a class=\"anchor\" href=\"#做事情本身的优先级\">#</a> 做事情本身的优先级</h3>\n<p>我们做事情的时候，如果能把其中的每一步都想清楚，理清依赖关系，安排得井井有条，这就已经事半功倍了。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/dunwu/images/dev/snap/20220711065205.png\" alt=\"\" /></p>\n<h2 id=\"沟通邮件那么重要你还在轻视邮件吗\"><a class=\"anchor\" href=\"#沟通邮件那么重要你还在轻视邮件吗\">#</a> 沟通：邮件那么重要，你还在轻视邮件吗？</h2>\n<h3 id=\"邮件的特性\"><a class=\"anchor\" href=\"#邮件的特性\">#</a> 邮件的特性</h3>\n<ol>\n<li>异步交流：邮件是一种异步交流的方式，双方有足够的时间准备邮件内容。</li>\n<li>无法修改：邮件内容无法修改，这是邮件可靠的基石。</li>\n<li>方便扩散：邮件有邮件组，可以很方便地把相关人员加进来，并且保留邮件历史记录。</li>\n</ol>\n<h3 id=\"邮件是公司内部的合同\"><a class=\"anchor\" href=\"#邮件是公司内部的合同\">#</a> 邮件是公司内部的合同</h3>\n<p>场景 1：设计确认（邮件的 “确认” 功能）</p>\n<p>场景 2：优先级（邮件的 “证据链” 功能）</p>\n<p>场景 3：大促（邮件的 “沟通协调” 功能）</p>\n<p>场景 4：新业务接入（邮件的 “防遗忘” 功能）</p>\n<p>场景 5：技术升级和 Bug 修复（邮件的 “广而告之” 功能）</p>\n<h3 id=\"邮件的魅力\"><a class=\"anchor\" href=\"#邮件的魅力\">#</a> 邮件的魅力</h3>\n<p>我们都是普通人，普通人没有 “背锅” 的压力，就没有持久的把事情做好的动力。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/dunwu/images/dev/snap/20220711065742.png\" alt=\"\" /></p>\n<h2 id=\"沟通程序员为什么应该爱上交流\"><a class=\"anchor\" href=\"#沟通程序员为什么应该爱上交流\">#</a> 沟通：程序员为什么应该爱上交流？</h2>\n<h3 id=\"\"><a class=\"anchor\" href=\"#\">#</a> <img data-src=\"https://raw.githubusercontent.com/dunwu/images/dev/snap/20220711070152.png\" alt=\"\" /></h3>\n<h2 id=\"主观能动性为什么程序员需要发挥主观能动性\"><a class=\"anchor\" href=\"#主观能动性为什么程序员需要发挥主观能动性\">#</a> 主观能动性：为什么程序员，需要发挥主观能动性？</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/dunwu/images/dev/snap/20220711070531.png\" alt=\"\" /></p>\n<h2 id=\"责任的边界程序员的职责范围仅仅只是被安排的任务吗\"><a class=\"anchor\" href=\"#责任的边界程序员的职责范围仅仅只是被安排的任务吗\">#</a> 责任的边界：程序员的职责范围仅仅只是被安排的任务吗？</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/dunwu/images/dev/snap/20220711070722.png\" alt=\"\" /></p>\n",
            "tags": [
                "工作",
                "职场",
                "教程",
                "工作"
            ]
        }
    ]
}